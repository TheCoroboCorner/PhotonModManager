{
  "locMap": {
    "b_crv_mach": {
      "name": "Machinery",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_printer}Blueprinter{}"
      ],
      "type": "Back"
    },
    "b_crv_os": {
      "name": "Old Scroll",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_rustyprinter} Rusty Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_gm": {
      "name": "Gold Mayhem",
      "text": [
        "Start with an",
        "Eternal {C:money,T:j_crv_moneyprinter}Money Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_rpd": {
      "name": "Ripped Deck",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_brokenprinter}Broken Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_jw": {
      "name": "Jimbo World",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_jimboprinter}Jimbo Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_gd": {
      "name": "Gross Deck",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_grossprinter}Gross Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_tsd": {
      "name": "The Suspicious Desert",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_obeliskprinter}Obelisk Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_spx": {
      "name": "Speaking Fax",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_faxprinter}Fax Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_phf": {
      "name": "Phantom Forge",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_spectralprinter}Spectral Printer{}"
      ],
      "type": "Back"
    },
    "b_crv_hg": {
      "name": "Hollow Gems",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_legendaryprinter} Legendary Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_gb": {
      "name": "Glassbound",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_glassprinter} Glass Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_atg": {
      "name": "Art Gallery",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_smile} Camera{} and",
        "an Eternal {C:attention,T:j_joker}Joker{}"
      ],
      "type": "Back"
    },
    "b_crv_tcih": {
      "name": "The Company Is Hiring!",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_lpm} Lethal Press Machine{}."
      ],
      "type": "Back"
    },
    "b_crv_dc": {
      "name": "Devil's Casino",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_devilishprinter} Devilish Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_rf": {
      "name": "MDeck HQ",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_full} Mega Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_sb": {
      "name": "Steelbound",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_steelprinter} Steel Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_up": {
      "name": "Upgrade!",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_tierp} Advanced Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_lp": {
      "name": "Lucky Pot",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_luckyprinter} Lucky Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_cf": {
      "name": "Celestial Forge",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_celestialprinter} Celestial Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_pd": {
      "name": "Polychrome Printer Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_pcp} Polychrome Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_fd": {
      "name": "Foil Printer Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_fcp} Foil Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_hd": {
      "name": "Holographic Printer Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_hcp} Holographic Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_nd": {
      "name": "Negative Printer Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_ncp} Negative Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_ued": {
      "name": "Ultimate Printer Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_ucp} Ultimate Edition Printer{}."
      ],
      "type": "Back"
    },
    "b_crv_und": {
      "name": "Unregistered Deck",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_urp} Unregistered Printer{}."
      ],
      "type": "Back"
    },
    "bl_crv_minimalizm": {
      "name": "Minimalizm",
      "text": [
        "Must play 3 cards or less"
      ],
      "type": "Blind"
    },
    "bl_crv_rrp": {
      "name": "Russian Roulette+",
      "text": [
        "One random joker is destroyed",
        "after every hand"
      ],
      "type": "Blind"
    },
    "bl_crv_fragile": {
      "name": "Fragile",
      "text": [
        "Destroy a random",
        "played card after scoring"
      ],
      "type": "Blind"
    },
    "bl_crv_no": {
      "name": "The Swarm",
      "text": [
        "Upon entering blind,",
        "blind requirement is multiplied",
        "by the amount of your jokers"
      ],
      "type": "Blind"
    },
    "pnr_crv_pprinter": {
      "name": "Lil' Printer",
      "text": [
        "Has a {C:green}#2# in #1#{} chance to",
        "copy the first {C:attention}Joker{}",
        "in your deck when a hand is played"
      ],
      "type": "Partner"
    },
    "sleeve_crv_machinerys": {
      "name": "Machinery Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_printer}Blueprinter{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_machinerys_alt": {
      "name": "Machinery Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_printer}Blueprinter{}",
        "{C:red}#1#{} Discards and {C:blue}#2#{} Hand"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_oldscrolls": {
      "name": "Old Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_rustyprinter}Rusty Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_oldscrolls_alt": {
      "name": "Old Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_rustyprinter}Rusty Printer{}",
        "{C:red}#1#{} Discards and {C:blue}#2#{} Hand"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_goldms": {
      "name": "Gold Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_moneyprinter}Money Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_goldms_alt": {
      "name": "Gold Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_moneyprinter}Money Printer{}",
        "Start with an extra {C:money}10$"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_rpds": {
      "name": "Ripped Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_brokenprinter}Broken Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_jims": {
      "name": "Jimbo Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_jimboprinter}Jimbo Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_grossl": {
      "name": "Gross Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_grossprinter}Gross Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_obels": {
      "name": "Suspicious Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_obeliskprinter}Obelisk Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_faxs": {
      "name": "Fax Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_faxprinter}Fax Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_phfs": {
      "name": "Phantom Sleeve",
      "text": [
        "Start with an",
        "Eternal {C:attention,T:j_crv_spectralprinter}Spectral Printer{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_hgs": {
      "name": "Hollow Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_legendaryprinter} Legendary Printer{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_hgs_alt": {
      "name": "Hollow Sleeve",
      "text": [
        "Start with a",
        "{C:purple}Soul{} Card."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_gbs": {
      "name": "Glass Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_glassprinter} Glass Printer{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_atgs": {
      "name": "Art Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_smile} Camera{} and",
        "an Eternal {C:attention,T:j_joker}Joker{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_atgs_alt": {
      "name": "Art Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_smile} Camera{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_tcihs": {
      "name": "Lethal Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_lpm} Lethal Press Machine{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_tcihs_alt": {
      "name": "Lethal Sleeve",
      "text": [
        "Start with",
        "{C:attention}3{C:red} Scraps."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_dcs": {
      "name": "Devil's Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_devilishprinter} Devilish Printer{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_mqs": {
      "name": "MSleeve HQ",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_full} Mega Printer{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_sbs": {
      "name": "Steelbound Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_steelprinter} Steel Printer{}."
      ],
      "type": "Sleeve"
    },
    "sleeve_crv_ups": {
      "name": "Upgrade Sleeve",
      "text": [
        "Start with an",
        "Eternal{C:attention,T:j_crv_tierp} Advanced Printer{}."
      ],
      "type": "Sleeve"
    },
    "m_crv_shattered": {
      "name": "Shattered",
      "text": [
        "{X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Enhanced"
    },
    "m_crv_bulletproofglass": {
      "name": "Bulletproof Glass",
      "text": [
        "{X:mult,C:white}X#1#{} Mult.",
        "{C:green}#2# in #3# {}chance to",
        "turn into {C:attention}Glass"
      ],
      "type": "Enhanced"
    },
    "m_crv_diamondcard": {
      "name": "Diamond Card",
      "text": [
        "{X:mult,C:white}X#1#{} Mult",
        "while this card",
        "stays in hand"
      ],
      "type": "Enhanced"
    },
    "m_crv_soulcard": {
      "name": "Soul Card",
      "text": [
        "{C:chips}A wandering soul"
      ],
      "type": "Enhanced"
    },
    "m_crv_mugged": {
      "name": "Stained",
      "text": [
        "{X:mult,C:white}X#1#{} Mult",
        "if played hand contains a {C:attention}Flush"
      ],
      "type": "Enhanced"
    },
    "m_crv_aflame": {
      "name": "Aflame",
      "text": [
        "{X:mult,C:white}X#1#{} Mult",
        "if played hand contains a {C:attention}Full House"
      ],
      "type": "Enhanced"
    },
    "m_crv_mega": {
      "name": "Mega",
      "text": [
        "{X:mult,C:white}X#1#{} Mult when scored"
      ],
      "type": "Enhanced"
    },
    "m_crv_tier1card": {
      "name": "Tier 1 Card",
      "text": [
        "{C:chips}+#1#{} Chips",
        "when scored"
      ],
      "type": "Enhanced"
    },
    "m_crv_tier2card": {
      "name": "Tier 2 Card",
      "text": [
        "{C:chips}+#1#{} Chips and",
        "{C:mult}+#2#{} Mult",
        "when scored"
      ],
      "type": "Enhanced"
    },
    "m_crv_tier3card": {
      "name": "Tier 3 Card",
      "text": [
        "{C:chips}+#1#{} Chips and",
        "{X:mult,C:white}X#2#{} Mult",
        "when scored"
      ],
      "type": "Enhanced"
    },
    "m_crv_boostcard": {
      "name": "Boosted",
      "text": [
        "{C:chips}+#1#{} Chips and",
        "{X:mult,C:white}X#2#{} Mult",
        "when scored",
        "turns into a {C:attention}Tier 3 Card{}",
        "after 3 times played",
        "{C:inactive}(#3#/3)"
      ],
      "type": "Enhanced"
    },
    "m_crv_blessedcard": {
      "name": "Blessed",
      "text": [
        "{C:green}#1# in #4#{} chance for {C:chips}+#8# {}Chips",
        "{C:green}#1# in #3#{} chance for {C:mult}+#7#{{} Mult",
        "{C:green}#1# in #2#{} chance for {X:mult,C:white}X#6#{} Mult",
        "{C:green}#1# in #5#{} chance to win {C:money}$30{}",
        "{C:inactive}(All can trigger on the same turn)"
      ],
      "type": "Enhanced"
    },
    "Joker": {
      "name": "The Ace",
      "text": [
        "Gains {X:mult,C:white}X#2#{} mult",
        "for each scored {C:attention}Ace.",
        "{C:inactive}(Currently {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Enhanced"
    },
    "Tarot": {
      "name": "Ink & Intuition",
      "text": [
        "{C:green}#1# in #2#{} chance to",
        "create a {C:attention}Printer",
        "{C:inactive}(Must have room)"
      ],
      "type": "Enhanced"
    },
    "scrap": {
      "name": "Horn",
      "text": [
        "Gives{C:money} 30$"
      ],
      "type": "Enhanced"
    },
    "EnchancedDocuments": {
      "name": "Glass Contract",
      "text": [
        "Turns #1# card into {C:attention}Glass",
        "{C:green} #2# in #3#{} chance for it to be a",
        "{C:dark_edition} Bulletproof Glass{}"
      ],
      "type": "Enhanced"
    },
    "Spectral": {
      "name": "Vault Key",
      "text": [
        "Spawns a random",
        "{C:purple}Vaulted{} Joker"
      ],
      "type": "Enhanced"
    },
    "Other": {
      "name": "Printer's Seal",
      "text": [
        "When scored, adds a copy",
        "of the card to hand",
        "{C:inactive}(Removes the seal from",
        "{C:inactive}the copied card)"
      ],
      "type": "Enhanced"
    },
    "Tag": {
      "name": "Cartridge Tag",
      "text": [
        "Next shop has a free",
        "{C:red}Printer Joker"
      ],
      "type": "Enhanced"
    },
    "Voucher": {
      "name": "Extra Ink",
      "text": [
        "Allows for certain",
        "{C:red}Printers{} to print {C:dark_edition}Negative"
      ],
      "type": "Enhanced"
    },
    "BakeryCharm": {
      "name": "Printer's Charm",
      "text": [
        "When ending shop, get a",
        "{C:red}Cartridge Tag"
      ],
      "type": "Enhanced"
    },
    "labels": {
      "name": "",
      "text": [],
      "type": "misc"
    },
    "dictionary": {
      "name": "",
      "text": [],
      "type": "misc"
    },
    "quips": {
      "name": "",
      "text": [],
      "type": "misc"
    }
  },
  "atlases": {
    "partners": {
      "path": "part.png",
      "px": 46,
      "py": 58,
      "localPath": "/wiki-data/Revos-Vault---Balatro-Mod@Cdrvo/4.2.2c/part.png",
      "resolvedGitHubPath": "assets/1x/part.png"
    }
  },
  "cards": [
    {
      "type": "Joker",
      "key": "letterprinter",
      "atlas": "aiko",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"letterprinter\",\n\tatlas = \"aiko\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tdependencies = \"aikoyorisshenanigans\",\n\tloc_vars = function(self, info_queue, center)\n\tend,\n\n\tcalculate = function(self, card, context)\n        local crv = card.ability.extra\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card{\n                    set = \"Alphabet\",\n                    editon = \"e_negative\"\n                }\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n                    SMODS.add_card{\n                        set = \"Alphabet\",\n                        editon = \"e_negative\"\n                    }\n\t\t\t\tend\n\t\t\tend\n\t\tend\n    end,\n    in_pool = function(self, args)\n        return G.GAME.akyrs_character_stickers_enabled\n    end,",
      "config": {
        "set": "Alphabet",
        "editon": "e_negative"
      },
      "ability": {
        "set": "Alphabet",
        "editon": "e_negative"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stamprinter",
      "atlas": "garb",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"stamprinter\",\n\tatlas = \"garb\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tloc_vars = function(self, info_queue, center)\n\tend,\n\n\tcalculate = function(self, card, context)\n        local crv = card.ability.extra\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card{\n                    set = \"Stamp\",\n                    editon = \"e_negative\"\n                }\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n                    SMODS.add_card{\n                        set = \"Stamp\",\n                        editon = \"e_negative\"\n                    }\n\t\t\t\tend\n\t\t\tend\n\t\tend\n    end,\n    in_pool = function(self, args)\n        return true\n    end,\n    set_badges = function(self, card, badges)\n        G.C.GARBR = HEX(\"7E5A7D\")\n\t\tbadges[#badges+#badges] = create_badge(\"Garbshit\",G.C.GARBR,nil,1)\n\tend",
      "config": {
        "set": "Stamp",
        "editon": "e_negative"
      },
      "ability": {
        "set": "Stamp",
        "editon": "e_negative"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "horosprint",
      "atlas": "maximusc",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"horosprint\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3.14,\n\t\t},\n\t},\n\trarity = \"crv_p\",\n\tatlas = \"maximusc\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tcost = 6,\n\tdependencies = \"Maximus\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.starting_shop and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card{\n                    set = \"Horoscope\",\n                    edition = \"e_negative\"\n                }\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n                    SMODS.add_card{\n                        set = \"Horoscope\",\n                    }\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 3.14
        }
      },
      "ability": {
        "extra": {
          "xmult": 3.14
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimboprinterplus",
      "atlas": "maximusc",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"jimboprinterplus\",\n\tatlas = \"maximusc\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"Maximus\",\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_mxms_joker_plus\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Joker\", G.jokers, nil, nil, nil, nil, \"j_mxms_joker_plus\")\n\t\t\t\tnew_card:set_edition({\n\t\t\t\t\tnegative = true,\n\t\t\t\t}, true)\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal new_card = create_card(\"Joker\", G.jokers, nil, nil, nil, nil, \"j_mxms_joker_plus\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "45degreeprinter",
      "atlas": "morefluff45",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"45degreeprinter\",\n\tconfig = {\n\t\textra = {\n\t\t},\n\t},\n\trarity = \"crv_p\",\n\tatlas = \"morefluff45\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n    display_size = {\n\t\tw = 114,\n\t\th = 114,\n\t},\n\tcost = 6,\n    dependencies = \"MoreFluff\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card{\n                    set = \"Rotarot\",\n                    edition = \"e_negative\"\n                }\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n                    SMODS.add_card{\n                        set = \"Rotarot\",\n                    }\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stoneoven",
      "atlas": "prismc",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"stoneoven\",\n\tatlas = \"prismc\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n            pizza = 1\n        },\n\t},\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_blueprint\n\tend,\n\tdependencies = \"Prism\",\n\tcalculate = function(self, card, context)\n        local crv = card.ability.extra\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal card = create_card(nil, G.jokers, nil, nil, nil, nil, nil,\"Pizza\")\n\t\t\t\tcard:add_to_deck()\n\t\t\t\tcard:set_edition({negative = true},true)\n\t\t\t\tG.jokers:emplace(card)\n                end\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal card = create_card(nil, G.jokers, nil, nil, nil, nil, nil,\"Pizza\")\n\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(card)\n\t\t\t\tend\n\t\t\tend\n\t\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "pizza": 1
        }
      },
      "ability": {
        "extra": {
          "pizza": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mythprint",
      "atlas": "prismc",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"mythprint\",\n\tatlas = \"prismc\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n            pizza = 1\n        },\n\t},\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_blueprint\n\tend,\n\tdependencies = \"Prism\",\n    calculate = function(self, card, context)\n        if context.setting_blind and not context.blueprint then\n            if G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n                SMODS.add_card{\n                    set = \"Myth\",\n                    edition = \"e_negative\"\n                }\n            else\n                if #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n                    SMODS.add_card{\n                        set = \"Myth\",\n                    }\n                end\n            end\n        end\n    end,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "pizza": 1
        }
      },
      "ability": {
        "extra": {
          "pizza": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "saphire",
      "atlas": "prismc",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"saphire\",\n    atlas = \"prismc\",\n    pos = {x = 0, y = 1},\n    discovered = false,\n    config = {extra = {x_mult = 1,x_gain = 0.75}},\n    effect = \"Glass Card\",\n    loc_vars = function(self, info_queue, card)\n        local card_ability = card and card.ability or self.config\n        return {\n            vars = { card_ability.extra.x_mult, card_ability.extra.x_gain}\n        }\n    end,\n\tdependencies = \"Prism\",\n    calculate = function(self, card, context)\n        if context.cardarea == G.play and context.main_scoring then\n            return {\n                xmult = card.ability.extra.x_mult\n            }\n        end\n        if context.end_of_round and context.cardarea == G.hand and context.playing_card_end_of_round then\n            card.ability.extra.x_mult = card.ability.extra.x_mult + card.ability.extra.x_gain\n            return{\n\t\t\t\tcolour = G.C.RED,\n\t\t\t\tmessage = localize({ type = \"variable\", key = \"a_xmult\", vars = { card.ability.extra.x_mult } }),\n\t\t\t\tcard = card,\n            }\n        end\n\tend,",
      "config": {
        "extra": {
          "x_mult": 1,
          "x_gain": 0.75
        }
      },
      "ability": {
        "extra": {
          "x_mult": 1,
          "x_gain": 0.75
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "saphirecontract",
      "atlas": "prismc",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"saphirecontract\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"prismc\",    \n\tpos = { x = 2, y = 1},\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tdependencies = \"Prism\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif pseudorandom(\"glassdocument\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_saphire\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\telse\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_prism_crystal\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "crystalprinter",
      "atlas": "prismc",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"crystalprinter\",\n\tatlas = \"prismc\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_crystalcontract\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif\n\t\t\t\t G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\t\tthen\n\t\t\t\tSMODS.add_card{\n                    key = \"c_crv_saphirecontract\",\n                    area = G.consumeables,\n                    edition = \"e_negative\"\n                }\n            else \n                SMODS.add_card{\n                    key = \"c_crv_saphirecontract\",\n                    area = G.consumeables,\n                }\n            end\n        end\n    end,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,\n\tdependencies = \"Prism\",",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "reverseprinter",
      "atlas": "rtarot",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"reverseprinter\",\n\tatlas = \"rtarot\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"reverse_tarot\",\n\tloc_vars = function(self, info_queue, center) end,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\tlocal card = create_card(\"Tarot\", G.consumeables, nil, nil, nil, nil, nil, \"remp\")\n\t\t\t\t\t\tcard:set_edition({ negative = true }, true)\n\t\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\telse\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tif G.consumeables.config.card_limit > #G.consumeables.cards then\n\t\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\t\tlocal card = create_card(\"Tarot\", G.consumeables, nil, nil, nil, nil, nil, \"remp\")\n\t\t\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\t\t\tend\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "zodiacprinter",
      "atlas": "rtarot",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"zodiacprinter\",\n\tatlas = \"rtarot\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 1,\n\t\ty = 1\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"reverse_tarot\",\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Zodiac\",\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Zodiac\",\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "quartzprinter",
      "atlas": "rtarot",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"quartzprinter\",\n\tatlas = \"rtarot\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"reverse_tarot\",\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\tkey = \"c_crv_crystalcontract\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\tkey = \"c_crv_crystalcontract\",\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "quartz",
      "atlas": "rtarot",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"quartz\",\n\tatlas = \"rtarot\",\n\tpos = { x = 0, y = 2 },\n\tshatters = true,\n\tconfig = {\n\t\textra = {\n\t\t\tx_chips = 2,\n\t\t\tshatter_prob = 8,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.x_chips,\n\t\t\t\tG.GAME.probabilities.normal,\n\t\t\t\tcard.ability.extra.shatter_prob,\n\t\t\t},\n\t\t}\n\tend,\n\tdependencies = \"reverse_tarot\",\n\tcalculate = function(self, card, context)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn { x_chips = card.ability.extra.x_chips }\n\t\tend\n\t\tif\n\t\t\tcontext.destroy_card\n\t\t\tand context.cardarea == G.play\n\t\t\tand pseudorandom(\"crystal\") < G.GAME.probabilities.normal / 4\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\n\t\t\t\tfunc = function()\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_crystal\"])\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "x_chips": 2,
          "shatter_prob": 8
        }
      },
      "ability": {
        "extra": {
          "x_chips": 2,
          "shatter_prob": 8
        }
      },
      "vars": [
        2,
        1,
        8
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "crystalcontract",
      "atlas": "rtarot",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'crystalcontract', \n\tset = 'EnchancedDocuments', \n\tdiscovered = true,\n\tatlas = 'rtarot', \n\tpos = {x = 2, y = 2}, \n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1, odds = 4}\n\t},\n\tdependencies = \"reverse_tarot\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\t  end,\n\tcan_use = function(self,card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then \n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self,card,area,copier)\n\t\tif pseudorandom('crystalcontract') < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_quartz\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\telse \n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_crystal\"])\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\tdelay(0.5)\n\tend\n\t\n\t end\n\t \n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "copperprinter",
      "atlas": "rtarot",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = \"copperprinter\",\n\tatlas = \"rtarot\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"reverse_tarot\",\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\tkey = \"c_crv_coppercontract\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\tkey = \"c_crv_coppercontract\",\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "coatedcopper",
      "atlas": "rtarot",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = \"coatedcopper\",\n\tatlas = \"rtarot\",\n\tpos = { x = 0, y = 3 },\n\tshatters = true,\n    config = {\n        extra = {\n            x_chips = 2.5\n        }\n    },\n\tdependencies = \"reverse_tarot\",\n    loc_vars = function(self, info_queue, center)\n        return {vars = {center.ability.extra.x_chips}}\n    end,\n    calculate = function(self,card,context)\n        if context.main_scoring and context.cardarea == G.hand then\n            return {x_chips = card.ability.extra.x_chips}\n        end\n    end,",
      "config": {
        "extra": {
          "x_chips": 2.5
        }
      },
      "ability": {
        "extra": {
          "x_chips": 2.5
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "coppercontract",
      "atlas": "rtarot",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = 'coppercontract', \n\tset = 'EnchancedDocuments', \n\tdiscovered = true,\n\tatlas = 'rtarot', \n\tpos = {x = 2, y = 3}, \n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1, odds = 4}\n\t},\n\tdependencies = \"reverse_tarot\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\t  end,\n\tcan_use = function(self,card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then \n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self,card,area,copier)\n\t\tif pseudorandom('coppercontract') < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_coatedcopper\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\telse \n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_copper\"])\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\tdelay(0.5)\n\tend\n\t\n\t end\n\t \n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "omniprinter",
      "atlas": "rtarot",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "key = \"omniprinter\",\n\tatlas = \"rtarot\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"reverse_tarot\",\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\tkey = \"c_crv_omnicontract\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\tkey = \"c_crv_omnicontract\",\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "omnicontract",
      "atlas": "rtarot",
      "pos": {
        "x": 2,
        "y": 4
      },
      "raw": "key = 'omnicontract', \n\tset = 'EnchancedDocuments', \n\tdiscovered = true,\n\tatlas = 'rtarot', \n\tpos = {x = 2, y = 4}, \n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1, odds = 4}\n\t},\n\tdependencies = \"reverse_tarot\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\t  end,\n\tcan_use = function(self,card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then \n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self,card,area,copier)\n\t\tif pseudorandom('coppercontract') < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_omnirank\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\telse \n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tlocal ss = pseudorandom_element(omnisuits, pseudoseed(\"omnicontract\"))\n\t\t\tif ss == 1 then\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_secondary_heart\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\telseif ss == 2 then\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_secondary_spade\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\telseif ss == 3 then\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_secondary_diamond\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\telseif ss == 4 then\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_reverse_secondary_club\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\tend\n\t\n\t end\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "riftrinter",
      "atlas": "riftr",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"riftrinter\",\n\tatlas = \"riftr\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 0,\n\t\t\tmult_gain = 15,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.mult_gain },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\t\t\tSMODS.add_card({\n                        set = \"Rift\",\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n                end\n\tend,\n    draw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"negative\", nil, card.ARGS.send_to_shader)\n\t\tcard.children.center:draw_shader(\"negative_shine\", nil, card.ARGS.send_to_shader)\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,\n    dependencies = \"RiftRaft\",",
      "config": {
        "extra": {
          "mult": 0,
          "mult_gain": 15
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "mult_gain": 15
        }
      },
      "vars": [
        0,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "archive",
      "atlas": "riftr",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"archive\",\n    set = \"Rift\",\n    atlas = \"riftr\",\n    loc_txt = {\n        name = \"Abyssal Archive\",\n        text = {\n            \"Add {C:attention}#1#{} random {C:attention}Contracts{}\",\n            \"to the {C:riftraft_void}Void{}\",\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.amount,\n            }\n        }\n    end,\n    config = {\n        extra = {amount = 3},\n    },\n    pos = {x = 1, y = 0},\n    cost = 1,\n    can_use = function(self, card)\n        return true\n    end,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tcard:set_edition({ negative = true }, true)\n\tend,\n    draw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"negative\", nil, card.ARGS.send_to_shader)\n\t\tcard.children.center:draw_shader(\"negative_shine\", nil, card.ARGS.send_to_shader)\n\tend,\n    use = function(self, card, area)\n        local added = {}\n        for i=1, card.ability.extra.amount do\n            G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2, func = function()\n                play_sound('timpani')\n                local new_card = SMODS.create_card{set = 'EnchancedDocuments', area = G.riftraft_rifthand, key_append = 'archive', discover = true}\n                new_card:set_edition({negative = true}, true, true)\n                G.riftraft_rifthand:emplace(new_card)\n                card:juice_up(0.3, 0.5)\n                table.insert(added, new_card)\n                return true\n            end}))\n        end\n        G.E_MANAGER:add_event(Event({trigger = 'immediate', func = function()\n            SMODS.calculate_context({add_to_void = true, added = added})\n            return true \n        end}))\n        if not RIFTRAFT.in_void_pack() then\n            G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.5, func = function()\n                for i,v in ipairs(G.riftraft_rifthand.cards) do\n                    draw_card(G.riftraft_rifthand, G.riftraft_void, nil,'down', nil, v, 0.08)\n                end\n                return true\n            end}))\n        end\n    end,\n    dependencies = \"RiftRaft\",",
      "config": {
        "extra": {
          "amount": 3
        }
      },
      "ability": {
        "extra": {
          "amount": 3
        }
      },
      "vars": [
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "burgerpr",
      "atlas": "sdm0",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"burgerpr\",\n\tatlas = \"sdm0\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tdependencies = \"sdm0sstuff\",\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_sdm_burger\n\tend,\n\t\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card{\n                    key = \"j_sdm_burger\",\n                    edition = \"e_negative\",\n                    area = G.jokers\n                }\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n                    SMODS.add_card{\n                        key = \"j_sdm_burger\",\n                        area = G.jokers\n                    }\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ObjectType",
      "key": "TOGAW",
      "atlas": null,
      "pos": null,
      "raw": "object_type = \"ObjectType\",\n\tkey = \"TOGAW\",\n\tcards = {\n\t\t[\"j_toga_y2kbug\"] = true,\n\t\t[\"j_toga_controlpanel\"] = true,\n\t\t[\"j_toga_taskmgr\"] = true,\n\t\t[\"j_toga_win95\"] = true,\n\t\t[\"j_toga_win98\"] = true,\n\t\t[\"j_toga_winmillenium\"] = true,\n\t\t[\"j_toga_winnt4\"] = true,\n\t\t[\"j_toga_win2000\"] = true,\n\t\t[\"j_toga_useraccounts\"] = true,\n\t\t[\"j_toga_virtualmemory\"] = true,\n\t\t[\"j_toga_computerlock\"] = true,\n\t\t[\"j_toga_recyclebin\"] = true,\n\t\t[\"j_toga_theinternet\"] = true,\n\t\t[\"j_toga_systemrestore\"] = true,\n\t},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "printerexe",
      "atlas": "togaw",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"printerexe\",\n\tatlas = \"togaw\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tdisplay_size = {\n\t\tw = 74,\n\t\th = 95,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"TOGAW\",\n                    edition = \"e_negative\"\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n                    SMODS.add_card({\n                        set = \"TOGAW\",\n                    })\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,\ndependencies = \"TOGAPack\"",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "printzip",
      "atlas": "togap",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"printzip\",\n\tatlas = \"togap\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.tag_toga_togajokerbooster\n        info_queue[#info_queue + 1] = G.P_CENTERS.tag_toga_togajokerziparchive\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint \n\t\tthen\n\t\t\tlocal tag = pseudorandom_element(tags, pseudoseed(\"printzip\"))\n\t\t\tif tag == 1 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tadd_tag(Tag(\"tag_toga_togajokerziparchive\"))\n\t\t\t\t\tplay_sound(\"generic1\", 0.9 + math.random() * 0.1, 0.8)\n\t\t\t\t\tplay_sound(\"holo1\", 1.2 + math.random() * 0.1, 0.4)\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\telseif tag == 2 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tadd_tag(Tag(\"tag_toga_togajokerbooster\"))\n\t\t\t\t\tplay_sound(\"generic1\", 0.9 + math.random() * 0.1, 0.8)\n\t\t\t\t\tplay_sound(\"holo1\", 1.2 + math.random() * 0.1, 0.4)\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,\ndependencies = \"TOGAPack\"",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "minimalizm",
      "atlas": "blinds",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"minimalizm\",\n\tdebuff = {\n\t\th_size_le = 3,\n\t},\n\tatlas = \"blinds\",\n\tpos = { x = 0, y = 1 },\n\tboss = { min = 3, max = 10 },\n\tboss_colour = HEX(\"f84b4b\"),",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "fragile",
      "atlas": "blinds",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"fragile\",\n\tboss = { min = 1, max = 10 },\n\tatlas = \"blinds\",\n\tpos = { x = 0, y = 0 },\n\tboss_colour = HEX(\"ffffff\"),\n\t\tcalculate = function(self, blind, context)\n\t\tif context.final_scoring_step then\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\ttrigger = \"after\",\n\t\t\tdelay = 0.2,\n\t\t\tfunc = function()\n\t\t\t\tlocal cards = {}\n\t\t\t\tfor i = 1, #G.play.cards do\n\t\t\t\t\tcards[#cards + 1] = G.play.cards[i]\n\t\t\t\tend\n\t\t\t\tlocal _card = pseudorandom_element(cards, pseudoseed(\"fragile\"))\n\t\t\t\tif _card then\n\t\t\t\t\t_card:start_dissolve({ HEX(\"ffffff\") }, nil, 1.6)\n\t\t\t\tend\n\t\t\t\treturn true\n\t\t\tend,\n\t\t}))\n\t\tself.triggered = true\n\t\treturn true\n\tend\nend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "no",
      "atlas": "blinds",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = \"no\",\n\tboss = { min = 1, max = 10, showdown = true },\n\tatlas = \"blinds\",\n\tpos = { x = 0, y = 3 },\n\tboss_colour = HEX(\"008016\"),\n\tset_blind = function(self)\n\t\tG.GAME.blind.chips = G.GAME.blind.chips * #G.jokers.cards\n\t\tG.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\t\tself.triggered = true\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "rrp",
      "atlas": "blinds",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"rrp\",\n\tboss = {\n\t\tmin = 1,\n\t\tmax = 10,\n\t\tshowdown = true,\n\t},\n\tatlas = \"blinds\",\n\tpos = { x = 0, y = 2 },\n\tboss_colour = HEX(\"3e3e3e\"),\n\tdrawn_to_hand = function(self)\n\t\tif G.jokers.cards[1] and self.prepped then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif not G.jokers.cards[i].debuff or #G.jokers.cards < 2 then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\t\tG.jokers.cards[i]:set_debuff(false)\n\t\t\tend\n\t\t\tlocal _card = pseudorandom_element(jokers, pseudoseed(\"rrp\"))\n\t\t\tif _card then\n\t\t\t\t_card:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\tself.triggered = true\n\t\t\tend\n\t\t\tself.prepped = false\n\t\tend\n\tend,\n\tpress_play = function(self)\n\t\tself.prepped = true\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "pbst",
      "atlas": "booster",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'pbst',\n    atlas = 'booster',\n    pos= {x=0,y=0},\n    config = {extra = 2,choose = 1},\n    group_key = 'k_crv_pbstg',\n    cost = 4,\n    weight = 0.06,\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"Joker\",\n            rarity = \"crv_p\"\n        })\n    end,",
      "config": {
        "extra": 2,
        "choose": 1
      },
      "ability": {
        "extra": 2,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "pbst2",
      "atlas": "booster",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'pbst2',\n    atlas = 'booster',\n    pos= {x=1,y=0},\n    config = {extra = 3,choose = 1},\n    group_key = 'k_crv_pbstg',\n    cost = 4,\n    weight = 0.03,\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"Joker\",\n            rarity = \"crv_p\"\n        })\n    end,",
      "config": {
        "extra": 3,
        "choose": 1
      },
      "ability": {
        "extra": 3,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "pbst3",
      "atlas": "booster",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'pbst3',\n    atlas = 'booster',\n    pos= {x=2,y=0},\n    config = {extra = 4,choose = 1},\n    group_key = 'k_crv_pbstg',\n    cost = 4,\n    weight = 0.01,\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"Joker\",\n            rarity = \"crv_p\"\n        })\n    end,",
      "config": {
        "extra": 4,
        "choose": 1
      },
      "ability": {
        "extra": 4,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "cbst",
      "atlas": "booster",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'cbst',\n    atlas = 'booster',\n    pos= {x=0,y=1},\n    config = {extra = 2,choose = 1},\n    group_key = 'k_crv_cbstg',\n    cost = 4,\n    draw_hand = true,\n    weight = 0.8,\n    kind = \"Contract\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"EnchancedDocuments\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 2,
        "choose": 1
      },
      "ability": {
        "extra": 2,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "cbst2",
      "atlas": "booster",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'cbst2',\n    atlas = 'booster',\n    pos= {x=1,y=1},\n    config = {extra = 4,choose = 1},\n    group_key = 'k_crv_cbstg',\n    cost = 6,\n    draw_hand = true,\n    weight = 0.4,\n    kind = \"Contract\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"EnchancedDocuments\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 4,
        "choose": 1
      },
      "ability": {
        "extra": 4,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "cbst3",
      "atlas": "booster",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'cbst3',\n    atlas = 'booster',\n    pos= {x=2,y=1},\n    config = {extra = 4,choose = 2},\n    group_key = 'k_crv_cbstg',\n    cost = 8,\n    draw_hand = true,\n    weight = 0.4,\n    kind = \"Contract\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"EnchancedDocuments\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 4,
        "choose": 2
      },
      "ability": {
        "extra": 4,
        "choose": 2
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "bbst",
      "atlas": "booster",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'bbst',\n    atlas = 'booster',\n    pos= {x=0,y=2},\n    config = {extra = 3,choose = 1},\n    group_key = 'k_crv_bbstg',\n    cost = 4,\n    draw_hand = false,\n    weight = 0.9,\n    kind = \"Banana\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"BananaPool\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 3,
        "choose": 1
      },
      "ability": {
        "extra": 3,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "bbst2",
      "atlas": "booster",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'bbst2',\n    atlas = 'booster',\n    pos= {x=1,y=2},\n    config = {extra = 5,choose = 1},\n    group_key = 'k_crv_bbstg',\n    cost = 6,\n    draw_hand = false,\n    weight = 0.5,\n    kind = \"Banana\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"BananaPool\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 5,
        "choose": 1
      },
      "ability": {
        "extra": 5,
        "choose": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "bbst3",
      "atlas": "booster",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'bbst3',\n    atlas = 'booster',\n    pos= {x=2,y=2},\n    config = {extra = 5,choose = 2},\n    group_key = 'k_crv_bbstg',\n    cost = 8,\n    draw_hand = false,\n    weight = 0.4,\n    kind = \"Banana\",\n    create_card = function(self, card, i)\n        return SMODS.create_card({\n            set = \"BananaPool\",\n            skip_materialize = true\n        })\n    end,",
      "config": {
        "extra": 5,
        "choose": 2
      },
      "ability": {
        "extra": 5,
        "choose": 2
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "xmarksthejoker",
      "atlas": null,
      "pos": null,
      "raw": "key = \"xmarksthejoker\",\n    loc_txt = {\n        name = \"X marks the Joker?\",\n    },\n    jokers = {{\n        id = \"j_crv_maz\",\n        eternal = true\n    }},\n    restrictions = {\n\t\tbanned_other = {{id = \"bl_final_heart\",type = \"blind\"}},\n\t},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "zahand",
      "atlas": null,
      "pos": null,
      "raw": "key = \"zahand\",\n    loc_txt = {\n        name = \"Bizzare Hand\",\n    },\n    jokers = {{\n        id = \"j_crv_hand\",\n        eternal = true,\n        pinned = true\n    }},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "absolmath",
      "atlas": null,
      "pos": null,
      "raw": "key = \"absolmath\",\n    loc_txt = {\n        name = \"Absolute Mathematics\",\n    },\n    jokers = {{\n        id = \"j_crv_mathness\",\n        eternal = true,\n    },\n}",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "chaos",
      "atlas": null,
      "pos": null,
      "raw": "key = \"chaos\",\n\tbadge_colour = G.C.DARK_EDITION,\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "chaosa",
      "atlas": null,
      "pos": null,
      "raw": "key = \"chaosa\",\n\tpath = \"chaos.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "printersoul",
      "atlas": null,
      "pos": null,
      "raw": "key = \"printersoul\",\n\tpath = \"Printer_Soul.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "chaoticsol",
      "atlas": "printersoul",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"chaoticsol\",\n\tset = \"Spectral\",\n\thidden = true,\n\tsoul_set = \"Spectral\",\n\tsoul_rate = 0.001,\n\tcan_repeat_soul = false,\n\tconfig = { extra = {} },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {} }\n\tend,\n\tpos = { x = 0, y = 0 },\n\tsoul_pos = { x = 1, y = 0 },\n\tatlas = \"printersoul\",\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = false,\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function(self, card)\n\t\tSMODS.add_card{\n\t\t\tset = \"Joker\",\n\t\t\trarity = \"crv_chaos\",\n\t\t\tarea = G.jokers,\n\t\t}\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chaoticprintermachine",
      "atlas": "chaosa",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"chaoticprintermachine\",\n\tatlas = \"chaosa\",\n\trarity = \"crv_chaos\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = { x = 0, y = 1 },\n\tconfig = {\n\t\textra = { odds = 3\n },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.blueprint\n\t\t\tand pseudorandom(\"chaoticprintermachine\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tfor i = 1, 27 do\n\t\t\t\tSMODS.add_card({ set = \"Joker\", rarity = \"crv_p\",area = G.jokers,edition = \"e_negative\" })\n\t\t\tend\n\t\telse\n\t\t\tfor i = 1, 27 do\n\t\t\t\tSMODS.add_card({ set = \"Joker\", rarity = \"crv_p\",area = G.jokers})\n\t\t\tend\n\t\tend\n\tend\nend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "odds": 3
        }
      },
      "vars": [
        1,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "thefaxprinter",
      "atlas": "chaosa",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"thefaxprinter\",\n\tconfig = { extra = {} },\n\tdiscovered = false,\n\tunlocked = true,\n\trarity = \"crv_chaos\",\n\tatlas = \"chaosa\",\n\tblueprint_compat = true,\n\tpos = { x = 1, y = 0 },\n\tcost = 30,\n\teternal_compat = true,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_promotion\n\t\treturn { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tlocal new_card = create_card(\"Promotion\", G.jokers, nil, nil, nil, nil, \"j_crv_promotion\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({negative = true},true)\n\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\tlocal new_card = create_card(\"Promotion\", G.jokers, nil, nil, nil, nil, \"j_crv_promotion\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "promotion",
      "atlas": "chaosa",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"promotion\",\n\tconfig = { extra = { chips = 36286368, xmult = 4153211351420 } },\n\trarity = \"crv_chaos\",\n\tatlas = \"chaosa\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = { x = 0, y = 0 },\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.xmult } }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:is_face() or context.other_card:get_id() == 14 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t\tcard = card.other_card,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "chips": 36286368,
          "xmult": 4153211351420
        }
      },
      "ability": {
        "extra": {
          "chips": 36286368,
          "xmult": 4153211351420
        }
      },
      "vars": [
        36286368,
        4153211351420
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dirtinator9999",
      "atlas": "chaosa",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"dirtinator9999\",\n\tatlas = \"chaosa\",\n\trarity = \"crv_chaos\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = { x = 2, y = 0 },\n\tconfig = { extra = {} },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_dirtdocument\n\t\treturn { vars = { card.ability.extra.xmult } }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tlocal new_card = create_card(\"Dirt Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_dirtdocument\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({negative = true},true)\n\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\tlocal new_card = create_card(\"Dirt Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_dirtdocument\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.consumeables:emplace(new_card)\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "dirtdocument",
      "atlas": "chaosa",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"dirtdocument\", \n\tset = \"EnchancedDocuments\", \n\tatlas = \"chaosa\",\n\tpos = { x = 2, y = 1 }, \n\tdiscovered = true,\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 10,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_dirt\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "cards": 10
        }
      },
      "ability": {
        "extra": {
          "cards": 10
        }
      },
      "vars": [
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "dirt",
      "atlas": "chaosa",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"dirt\",\n\tatlas = \"chaosa\",\n\tpos = { x = 1, y = 1 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = true,\n\tno_rank = true,\n\tno_suit = true,\n\toverrides_base_rank = true,\n\tany_suit = false,\n\talways_scores = true,\n\tweight = 0,\n\tconfig = { extra = { x_mult = 99999999 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.x_mult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif\n\t\t\tcontext.main_scoring and context.cardarea == G.hand\n\t\t\tor context.main_scoring and context.cardarea == G.play\n\t\tthen\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "x_mult": 99999999
        }
      },
      "ability": {
        "extra": {
          "x_mult": 99999999
        }
      },
      "vars": [
        99999999
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "holyprinter",
      "atlas": "chaosa",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"holyprinter\",\n\tatlas = \"chaosa\",\n\trarity = \"crv_chaos\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = { x = 0, y = 2 },\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_holybanana\n\t\treturn { vars = {} }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tlocal new_card = create_card(\"Blueprinter\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({negative= true},true)\n\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\tlocal new_card = create_card(\"Blueprinter\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hfj",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "key = \"hfj\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_chaos\",\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = { x = 5, y = 4 },\n\tconfig = {\n\t\textra = { one = 0, chips = 0, ok = 0 },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.one, card.ability.extra.chips, card.ability.extra.ok } }\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.joker_main\n\t\t\tand next(SMODS.find_mod(\"Talisman\"))\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\tthen\n\t\t\tcard.ability.extra.ok = card.ability.extra.ok + 1\n\t\t\tlocal chips = hand_chips\n\t\t\tcard.ability.extra.chips = chips\n\t\t\tcard.ability.extra.one = to_number(card.ability.extra.chips * 4)\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_error\"),\n\t\t\t}\n\t\telseif\n\t\t\tcontext.joker_main\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\tthen\n\t\t\tcard.ability.extra.ok = card.ability.extra.ok + 1\n\t\t\tlocal chips = hand_chips\n\t\t\tcard.ability.extra.chips = chips\n\t\t\tcard.ability.extra.one = card.ability.extra.chips * 4\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_error\"),\n\t\t\t}\n\t\tend\n\t\tif context.joker_main and next(SMODS.find_mod(\"Talisman\")) and card.ability.extra.ok > 0 then\n\t\t\treturn {\n\t\t\t\tx_mult = to_number(card.ability.extra.one),\n\t\t\t}\n\t\telseif context.joker_main and card.ability.extra.ok > 0 then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.one,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.ok = 0\n\t\t\tcard.ability.extra.one = 0\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_cleaning\"),\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "one": 0,
          "chips": 0,
          "ok": 0
        }
      },
      "ability": {
        "extra": {
          "one": 0,
          "chips": 0,
          "ok": 0
        }
      },
      "vars": [
        0,
        0,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "masterofjokers",
      "atlas": "chaosa",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"masterofjokers\",\n\tatlas = \"chaosa\",\n\trarity = \"crv_chaos\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = { x = 1, y = 2 },\n\tconfig = {\n\t\textra = {multi = 2},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {card.ability.extra.multi} }\n\tend,\n\tcalculate = function(self, card, context)\n    if context.joker_main then\n      G.jokers.config.card_limit = G.jokers.config.card_limit * card.ability.extra.multi\n    end\n  end",
      "config": {
        "extra": {
          "multi": 2
        }
      },
      "ability": {
        "extra": {
          "multi": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "crash",
      "atlas": "chaosa",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"crash\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tatlas = \"chaosa\",\n\trarity = \"crv_chaos\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and G.GAME.blind.boss then\n\t\t\tfor i = 1, 999999999999999999999999 do\n\t\tSMODS.add_card{\n\t\t\tkey = \"j_chicot\"\n\t\t}\n\tend\n\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "inkintuition",
      "atlas": "tarots",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"inkintuition\",\n\tset = \"Tarot\",\n\tconfig = { extra = { odds = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tpos = { x = 0, y = 0 },\n\tatlas = \"tarots\",\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = true,\n\tcan_use = function(self, card)\n\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\treturn true\n\t\tend\n\tend,\n\tuse = function(self, card)\n\t\tif pseudorandom(\"inkintuition\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tSMODS.add_card({ set = \"Joker\", area = G.jokers, rarity = \"crv_p\" })\n\t\telse\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.4,\n\t\t\t\tfunc = function()\n\t\t\t\t\tattention_text({\n\t\t\t\t\t\ttext = localize(\"k_nope_ex\"),\n\t\t\t\t\t\tscale = 1.3,\n\t\t\t\t\t\thold = 1.4,\n\t\t\t\t\t\tmajor = card,\n\t\t\t\t\t\tbackdrop_colour = G.C.SECONDARY_SET.Tarot,\n\t\t\t\t\t\talign = (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK) and \"tm\" or \"cm\",\n\t\t\t\t\t\toffset = {\n\t\t\t\t\t\t\tx = 0,\n\t\t\t\t\t\t\ty = (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK) and -0.2 or 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsilent = true,\n\t\t\t\t\t})\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.06 * G.SETTINGS.GAMESPEED,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tblocking = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"tarot2\", 0.76, 0.4)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tplay_sound(\"tarot2\", 1, 0.4)\n\t\t\t\t\tcard:juice_up(0.3, 0.5)\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\t\tdelay(0.6)\n\tend,",
      "config": {
        "extra": {
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "odds": 2
        }
      },
      "vars": [
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "ObjectType",
      "key": "megaprinter",
      "atlas": null,
      "pos": null,
      "raw": "key = \"megaprinter\",\n\tcards = {\n\t\t[\"j_crv_head\"] = true,\n\t\t[\"j_crv_body\"] = true,\n\t\t[\"j_crv_back\"] = true,\n\t},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "dreamsdesires",
      "atlas": "tarots",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"dreamsdesires\",\n\tset = \"Tarot\",\n\tconfig = { extra = {} },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {} }\n\tend,\n\tpos = { x = 1, y = 0 },\n\tatlas = \"tarots\",\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = true,\n\tcan_use = function(self, card)\n\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\treturn true\n\t\tend\n\tend,\n\tuse = function(self, card)\n\t\tSMODS.add_card({ set = \"megaprinter\", area = G.jokers })\n\t\tdelay(1.5)\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ConsumableType",
      "key": "scrap",
      "atlas": null,
      "pos": null,
      "raw": "key = \"scrap\",\n\tcollection_rows = { 4, 5 },\n\tprimary_colour = G.C.RED,\n\tsecondary_colour = G.C.RED,\n\tshop_rate = nil,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "UndiscoveredSprite",
      "key": "scrap",
      "atlas": "documents2.png",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"scrap\",\n\tatlas = \"documents2.png\",\n\tpos = { x = 0, y = 0 },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "horn",
      "atlas": "scrapss",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "in_pool = function(self)\n\t\treturn true, { allow_duplicates = true }\n\tend,\n\tkey = \"horn\",\n\tdiscovered = true,\n\tunlocked = true,\n\tset = \"scrap\",\n\tatlas = \"scrapss\",\n\tcost = 0,\n\tpos = { x = 2, y = 0 },\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function()\n\t\treturn {\n\t\t\tease_dollars(30),\n\t\t}\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "pickles",
      "atlas": "scrapss",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "in_pool = function(self)\n\t\treturn true, { allow_duplicates = true }\n\tend,\n\tkey = \"pickles\",\n\tdiscovered = true,\n\tunlocked = true,\n\tset = \"scrap\",\n\tatlas = \"scrapss\",\n\tcost = 0,\n\tpos = { x = 0, y = 0 },\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function()\n\t\treturn {\n\t\t\tease_dollars(25),\n\t\t}\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "mp",
      "atlas": "scrapss",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "in_pool = function(self)\n\t\treturn true, { allow_duplicates = true }\n\tend,\n\tkey = \"mp\",\n\tdiscovered = true,\n\tunlocked = true,\n\tset = \"scrap\",\n\tatlas = \"scrapss\",\n\tcost = 0,\n\tpos = { x = 1, y = 0 },\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function()\n\t\treturn {\n\t\t\tease_dollars(20),\n\t\t}\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "ap",
      "atlas": "scrapss",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "in_pool = function(self)\n\t\treturn true, { allow_duplicates = true }\n\tend,\n\tkey = \"ap\",\n\tdiscovered = true,\n\tunlocked = true,\n\tset = \"scrap\",\n\tatlas = \"scrapss\",\n\tcost = 0,\n\tpos = { x = 3, y = 0 },\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function()\n\t\treturn {\n\t\t\tease_dollars(35),\n\t\t}\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "dc",
      "atlas": "scrapss",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "in_pool = function(self)\n\t\treturn true, { allow_duplicates = true }\n\tend,\n\tkey = \"dc\",\n\tdiscovered = true,\n\tunlocked = true,\n\tset = \"scrap\",\n\tatlas = \"scrapss\",\n\tcost = 0,\n\tpos = { x = 4, y = 0 },\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function()\n\t\treturn {\n\t\t\tease_dollars(15),\n\t\t}\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ConsumableType",
      "key": "EnchancedDocuments",
      "atlas": null,
      "pos": null,
      "raw": "key = \"EnchancedDocuments\",\n\n\tcollection_rows = { 4, 5 },\n\tprimary_colour = G.C.WHITE,\n\tsecondary_colour = G.C.BLACK,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "UndiscoveredSprite",
      "key": "EnchancedDocuments",
      "atlas": "documents_u",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"EnchancedDocuments\",\n\tatlas = \"documents_u\",\n\tpos = { x = 0, y = 0 },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "glassdocument",
      "atlas": "documents",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"glassdocument\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 0, y = 0 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif pseudorandom(\"glassdocument\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_bulletproofglass\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\telse\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_glass\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "steeldocument",
      "atlas": "documents",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"steeldocument\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 3, y = 0 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then --if cards in hand highlighted are above 0 but below the configurable value then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif pseudorandom(\"steeldocument\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_diamondcard\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\telse\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_steel\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "devilscontract",
      "atlas": "documents",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"devilscontract\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 1, y = 0 },\n\tconfig = {\n\t\textra = { cards = 1, odds = 4 },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then --if cards in hand highlighted are above 0 but below the configurable value then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif pseudorandom(\"devilscontract\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_soulcard\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\telse\n\t\t\tlocal random_key = imsofckntired[math.random(#imsofckntired)]\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[random_key])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "megadoc",
      "atlas": "megaenh",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"megadoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"megaenh\",\n\tpos = { x = 1, y = 0 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_mega\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "t1doc",
      "atlas": "t",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"t1doc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"t\",\n\tpos = { x = 0, y = 1 },\n\tconfig = { extra = { cards = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_tier1card\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "t2doc",
      "atlas": "t",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"t2doc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"t\",\n\tpos = { x = 1, y = 1 },\n\tconfig = { extra = { cards = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_tier2card\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 2
        }
      },
      "ability": {
        "extra": {
          "cards": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "t3doc",
      "atlas": "t",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"t3doc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"t\",\n\tpos = { x = 2, y = 1 },\n\tconfig = { extra = { cards = 3 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_tier3card\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 3
        }
      },
      "ability": {
        "extra": {
          "cards": 3
        }
      },
      "vars": [
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "boostdoc",
      "atlas": "t",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = \"boostdoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"t\",\n\tpos = { x = 3, y = 1 },\n\tconfig = { extra = { cards = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_boostcard\"])\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "luckydocument",
      "atlas": "documents",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"luckydocument\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 2, y = 0 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif pseudorandom(\"luckydocument\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_blessedcard\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\telse\n\t\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_lucky\"])\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.2,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tdelay(0.5)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "cards": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "polydoc",
      "atlas": "documents",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"polydoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 2, y = 1 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition({ polychrome = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition({ polychrome = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "foildoc",
      "atlas": "documents",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"foildoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 0, y = 1 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition({ foil = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition({ foil = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "holdoc",
      "atlas": "documents",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"holdoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 1, y = 1 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition({ holo = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition({ holo = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "negdoc",
      "atlas": "documents",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = \"negdoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 3, y = 1 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition({ negative = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition({ negative = true }, true)\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "uedoc",
      "atlas": "documents",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"uedoc\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 0, y = 2 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition(poll_edition(pseudorandom(\"uedoc\"), nil, true, true))\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition(poll_edition(pseudorandom(\"uedoc\"), nil, true, true))\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "rdocument",
      "atlas": "documents",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"rdocument\",\n\tset = \"EnchancedDocuments\",\n\tdiscovered = true,\n\tatlas = \"documents\",\n\tpos = { x = 1, y = 2 },\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif\n\t\t\t\t#G.hand.highlighted ~= 0\n\t\t\t\tand #G.hand.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.jokers.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\telseif\n\t\t\t\t#G.jokers.highlighted ~= 0\n\t\t\t\tand #G.jokers.highlighted <= card.ability.extra.cards\n\t\t\t\tand #G.hand.highlighted == 0\n\t\t\tthen\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_edition()\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\t\tfor i, card in pairs(G.jokers.highlighted) do\n\t\t\tcard:set_edition()\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "mach",
      "atlas": "Decks",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "name = 'Machinery',\n    key = 'mach',\n    atlas = 'Decks',\n    pos = {\n        x = 0,\n        y = 0\n    },\n\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_printer')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "os",
      "atlas": "Decks",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "name = 'Old Scroll',\n    key = 'os',\n    atlas = 'Decks',\n    pos = {\n        x = 1,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_rustyprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "gm",
      "atlas": "Decks",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "name = 'Gold Mayhem',\n    key = 'gm',\n    atlas = 'Decks',\n    pos = {\n        x = 2,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_moneyprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "rpd",
      "atlas": "Decks",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "name = 'Ripped Deck',\n    key = 'rpd',\n    atlas = 'Decks',\n    pos = {\n        x = 0,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_brokenprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "jw",
      "atlas": "Decks",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "name = \"Jimbo's World\",\n    key = 'jw',\n    atlas = 'Decks',\n    pos = {\n        x = 2,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_jimboprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "gd",
      "atlas": "Decks",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "name = 'Gross Deck',\n    key = 'gd',\n    atlas = 'Decks',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_grossprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "tsd",
      "atlas": "Decks",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "name = 'The Suspicious Desert',\n    key = 'tsd',\n    atlas = 'Decks',\n    pos = {\n        x = 1,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                joker_add('j_crv_obeliskprinter')\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "spx",
      "atlas": "Decks",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "name = 'Speaking Fax',\n    key = 'spx',\n    atlas = 'Decks',\n    pos = {\n        x = 1,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                joker_add('j_crv_faxprinter')\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "phf",
      "atlas": "Decks",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "name = 'Phantom Forge',\n    key = 'phf',\n    atlas = 'Decks',\n    pos = {\n        x = 2,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                joker_add('j_crv_spectralprinter')\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "hg",
      "atlas": "Decks",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "name = 'Hollow Gems',\n    key = 'hg',\n    atlas = 'Decks',\n    pos = {\n        x = 0,\n        y = 3\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_legendaryprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "gb",
      "atlas": "Decks",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "name = 'Glassbound',\n    key = 'gb',\n    atlas = 'Decks',\n    pos = {\n        x = 1,\n        y = 3\n    },\n\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_glassprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "atg",
      "atlas": "Decks",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "name = 'Art Gallery',\n    key = 'atg',\n    atlas = 'Decks',\n    pos = {\n        x = 2,\n        y = 3\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_smile')\n                joker_add('j_joker')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "tcih",
      "atlas": "Decks",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "name = 'The Company Is Hiring!',\n    key = 'tcih',\n    atlas = 'Decks',\n    pos = {\n        x = 0,\n        y = 4\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_lpm')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "dc",
      "atlas": "Decks2",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "name = \"Devil's Casino\",\n    key = 'dc',\n    atlas = 'Decks2',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_devilishprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "rf",
      "atlas": "Decks2",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "name = \"MDeck HQ\",\n    key = 'rf',\n    atlas = 'Decks2',\n    pos = {\n        x = 1,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_full')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "sb",
      "atlas": "Decks2",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "name = \"Steelbound\",\n    key = 'sb',\n    atlas = 'Decks2',\n    pos = {\n        x = 2,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_steelprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "up",
      "atlas": "Decks2",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "name = \"Upgrade!\",\n    key = 'up',\n    atlas = 'Decks2',\n    pos = {\n        x = 3,\n        y = 0\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_tierp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "lp",
      "atlas": "Decks2",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "name = \"Lucky Pot\",\n    key = 'lp',\n    atlas = 'Decks2',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_luckyprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "cf",
      "atlas": "Decks2",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "name = \"Celestial Forge\",\n    key = 'cf',\n    atlas = 'Decks2',\n    pos = {\n        x = 1,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_celestialprinter')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "pd",
      "atlas": "Decks2",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "name = \"Polychrome Deck\",\n    key = 'pd',\n    atlas = 'Decks2',\n    pos = {\n        x = 2,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_pcp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "fd",
      "atlas": "Decks2",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "name = \"Foil Deck\",\n    key = 'fd',\n    atlas = 'Decks2',\n    pos = {\n        x = 0,\n        y = 2\n    },\n\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_fcp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "hd",
      "atlas": "Decks2",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "name = \"Holographic Deck\",\n    key = 'hd',\n    atlas = 'Decks2',\n    pos = {\n        x = 1,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_hcp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "nd",
      "atlas": "Decks2",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "name = \"Negative Deck\",\n    key = 'nd',\n    atlas = 'Decks2',\n    pos = {\n        x = 3,\n        y = 2\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_ncp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "ued",
      "atlas": "Decks2",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "name = \"Ultimate Deck\",\n    key = 'ued',\n    atlas = 'Decks2',\n    pos = {\n        x = 2,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_ucp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "und",
      "atlas": "Decks2",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'und',\n    atlas = 'Decks2',\n    pos = {\n        x = 3,\n        y = 1\n    },\n    apply = function()\n\n        G.E_MANAGER:add_event(Event({\n\n            func = function()\n\n                joker_add('j_crv_urp')\n\n                return true\n            end\n        }))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "bulletproofglass",
      "atlas": "enh",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"bulletproofglass\",\n\tatlas = \"enh\",\n\tpos = { x = 0, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { x_mult = 2, odds = 8 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.x_mult, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.destroying_card\n\t\t\tand pseudorandom(\"bulletproofglass\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\n\t\t\t\tfunc = function()\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_glass\"])\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "x_mult": 2,
          "odds": 8
        }
      },
      "ability": {
        "extra": {
          "x_mult": 2,
          "odds": 8
        }
      },
      "vars": [
        2,
        1,
        8
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "diamondcard",
      "atlas": "enh",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"diamondcard\",\n\tatlas = \"enh\",\n\tpos = { x = 2, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { x_mult = 2.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.x_mult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.hand then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "x_mult": 2.5
        }
      },
      "ability": {
        "extra": {
          "x_mult": 2.5
        }
      },
      "vars": [
        2.5
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "soulcard",
      "atlas": "ghost",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"soulcard\",\n\tatlas = \"ghost\",\n\tpos = { x = 0, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = true,\n\tno_rank = true,\n\tno_suit = true,\n\toverrides_base_rank = true,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "mugged",
      "atlas": "enh",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"mugged\",\n\tatlas = \"enh\",\n\tpos = { x = 1, y = 1 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { xmult = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xmult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play and next(context.poker_hands[\"Flush\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "aflame",
      "atlas": "enh",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"aflame\",\n\tatlas = \"enh\",\n\tpos = { x = 1, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { xmult = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xmult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play and next(context.poker_hands[\"Full House\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "mega",
      "atlas": "megaenh",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"mega\",\n\tatlas = \"megaenh\",\n\tpos = { x = 0, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { xmult = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xmult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 4
        }
      },
      "ability": {
        "extra": {
          "xmult": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "tier1card",
      "atlas": "t",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"tier1card\",\n\tatlas = \"t\",\n\tpos = { x = 0, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { chips = 50 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 50
        }
      },
      "ability": {
        "extra": {
          "chips": 50
        }
      },
      "vars": [
        50
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "tier2card",
      "atlas": "t",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"tier2card\",\n\tatlas = \"t\",\n\tpos = { x = 1, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { chips = 100, mult = 10 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.mult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 100,
          "mult": 10
        }
      },
      "ability": {
        "extra": {
          "chips": 100,
          "mult": 10
        }
      },
      "vars": [
        100,
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "tier3card",
      "atlas": "t",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"tier3card\",\n\tatlas = \"t\",\n\tpos = { x = 2, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { chips = 200, x_mult = 3 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.x_mult } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 200,
          "x_mult": 3
        }
      },
      "ability": {
        "extra": {
          "chips": 200,
          "x_mult": 3
        }
      },
      "vars": [
        200,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "boostcard",
      "atlas": "t",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"boostcard\",\n\tatlas = \"t\",\n\tpos = { x = 3, y = 0 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = { chips = 250, x_mult = 4, handsp = 0 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.x_mult, card.ability.extra.handsp } }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play and not (card.ability.extra.handsp == 3) then\n\t\t\tcard.ability.extra.handsp = card.ability.extra.handsp + 1\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\t\tif card.ability.extra.handsp == 3 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard:set_ability(G.P_CENTERS[\"m_crv_tier3card\"])\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "chips": 250,
          "x_mult": 4,
          "handsp": 0
        }
      },
      "ability": {
        "extra": {
          "chips": 250,
          "x_mult": 4,
          "handsp": 0
        }
      },
      "vars": [
        250,
        4,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "blessedcard",
      "atlas": "enh",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"blessedcard\",\n\tatlas = \"enh\",\n\tpos = { x = 0, y = 1 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = {\n\t\textra = { odds = 5, odds2 = 3, odds3 = 2, odds4 = 10, xmult = 3, mult = 25, chips = 100, money = 30 },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t\tcard.ability.extra.odds2,\n\t\t\t\tcard.ability.extra.odds3,\n\t\t\t\tcard.ability.extra.odds4,\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\tcard.ability.extra.mult,\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tlocal effect = {}\n\t\tif\n\t\t\tpseudorandom(\"blessedcard\") < G.GAME.probabilities.normal / card.ability.extra.odds2\n\t\t\tand context.main_scoring\n\t\t\tand context.cardarea == G.play\n\t\tthen\n\t\t\teffect.mult = card.ability.extra.mult\n\t\tend\n\t\tif\n\t\t\tpseudorandom(\"blessedcard\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\tand context.main_scoring\n\t\t\tand context.cardarea == G.play\n\t\tthen\n\t\t\teffect.x_mult = card.ability.extra.xmult\n\t\tend\n\t\tif\n\t\t\tpseudorandom(\"blessedcard\") < G.GAME.probabilities.normal / card.ability.extra.odds3\n\t\t\tand context.main_scoring\n\t\t\tand context.cardarea == G.play\n\t\tthen\n\t\t\teffect.chips = card.ability.extra.chips\n\t\tend\n\t\tif\n\t\t\tpseudorandom(\"blessedcard\") < G.GAME.probabilities.normal / card.ability.extra.odds4\n\t\t\tand context.main_scoring\n\t\t\tand context.cardarea == G.play\n\t\tthen\n\t\t\teffect.dollars = card.ability.extra.money\n\t\tend\n\t\treturn effect\n\tend,",
      "config": {
        "extra": {
          "odds": 5,
          "odds2": 3,
          "odds3": 2,
          "odds4": 10,
          "xmult": 3,
          "mult": 25,
          "chips": 100,
          "money": 30
        }
      },
      "ability": {
        "extra": {
          "odds": 5,
          "odds2": 3,
          "odds3": 2,
          "odds4": 10,
          "xmult": 3,
          "mult": 25,
          "chips": 100,
          "money": 30
        }
      },
      "vars": [
        1,
        5,
        3,
        2,
        10,
        3,
        25,
        100
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "target",
      "atlas": "enh",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"target\",\n\tatlas = \"enh\",\n\tpos = { x = 0, y = 2 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = true,\n\tno_rank = true,\n\tno_suit = true,\n\toverrides_base_rank = true,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = { extra = {} },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {} }\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "honey",
      "atlas": "enh",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"honey\",\n\tatlas = \"enh\",\n\tpos = { x = 1, y = 2},\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = false,\n\tno_rank = false,\n\tno_suit = false,\n\toverrides_base_rank = false,\n\tany_suit = false,\n\talways_scores = false,\n\tweight = 0,\n\tconfig = {\n\t\textra = { dollars = 5 },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.dollars,\n\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n            return {\n                dollars = card.ability.extra.dollars,\n            }\n        end\n\tend",
      "config": {
        "extra": {
          "dollars": 5
        }
      },
      "ability": {
        "extra": {
          "dollars": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "shattered",
      "atlas": "enh",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = \"shattered\",\n\tatlas = \"enh\",\n\tpos = { x = 0, y = 3 },\n\tdiscovered = true,\n\tunlocked = true,\n\treplace_base_card = true,\n\tno_rank = true,\n\tno_suit = true,\n\talways_scores = true,\n\tweight = 0,\n\tconfig = { extra = { x_mult = 2} },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.x_mult} }\n\tend,\n\tcalculate = function(self, card, context, effect)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.x_mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "x_mult": 2
        }
      },
      "ability": {
        "extra": {
          "x_mult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "p",
      "atlas": null,
      "pos": null,
      "raw": "key = \"p\",\n\tbadge_colour = G.C.RARITY[3],\n\tpools = {\n\t\t[\"Joker\"] = {\n\t\t\trate = 0.01,\n\t\t},\n\t},\n\tdefault_weight = 0.01,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "holy",
      "atlas": null,
      "pos": null,
      "raw": "key = \"holy\",\n\tbadge_colour = G.C.RARITY[2],\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "pedro",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pedro\",\n\tbadge_colour = G.C.RARITY[3],\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "titan",
      "atlas": null,
      "pos": null,
      "raw": "key = \"titan\",\n\tbadge_colour = G.C.RARITY[4],\n\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "secret",
      "atlas": null,
      "pos": null,
      "raw": "key = \"secret\",\n\tbadge_colour = G.C.BLACK,\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "revoo_",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"revoo_\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 2,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:get_id() == 14 and not context.blueprint and not context.repetition then\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 2
        }
      },
      "vars": [
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spuzzypp",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"spuzzypp\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 1,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 1,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and not context.blueprint then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus or 0\n\t\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus\n\t\t\t\t\t+ card.ability.extra.chips\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif context.other_card.ability.effect == \"Base\" then\n\t\t\t\t\t\tcontext.other_card:set_ability(\n\t\t\t\t\t\t\tG.P_CENTERS[SMODS.poll_enhancement({\n\t\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t\t})],\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t)\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\textra = {\n\t\t\t\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tcard.ability.extra.chips = card.ability.extra.chips + 10\n\t\t\treturn {\n\t\t\t\tmessage = \"+10!\",\n\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 50
        }
      },
      "ability": {
        "extra": {
          "chips": 50
        }
      },
      "vars": [
        50
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "adam_",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"adam_\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 0.5,\n\t\t\tscrapc = 0,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 2,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg, card.ability.extra.scrapc },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.reroll_shop then\n\t\t\tlocal adamcc = pseudorandom_element(adamc, pseudoseed(\"lpm\"))\n\t\t\tif adamcc == 1 then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal scrapselect = pseudorandom_element(scrapselecta, pseudoseed(\"lpm\"))\n\t\t\t\t\tif G.GAME.jojo then\n\t\t\t\t\t\tif scrapselect == 1 then\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"jojo_Scraps\",\n\t\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t})\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tlocal scrapselect = pseudorandom_element(scrapselecta, pseudoseed(\"lpm\"))\n\t\t\t\t\t\tif G.GAME.jojo then\n\t\t\t\t\t\t\tif scrapselect == 1 then\n\t\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\t\tset = \"jojo_Scraps\",\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.using_consumeable then\n\t\t\tif G.GAME.jojo then\n\t\t\t\tif\n\t\t\t\t\tcontext.consumeable.ability.set == \"jojo_Scraps\"\n\t\t\t\t\tor context.consumeable.ability.set == \"scrap\" and not context.blueprint\n\t\t\t\tthen\n\t\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\t\t\tcard.ability.extra.scrapc = card.ability.extra.scrapc + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif context.consumeable.ability.set == \"scrap\" then\n\t\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\t\t\tcard.ability.extra.scrapc = card.ability.extra.scrapc + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif card.ability.extra.scrapc == 5 then\n\t\t\tcard.ability.extra.scrapc = 0\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"Spectral\",\n\t\t\t\tarea = G.consumeables,\n\t\t\t\tedition = \"e_negative\",\n\t\t\t\tsoulable = true,\n\t\t\t})\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.5,
          "scrapc": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.5,
          "scrapc": 0
        }
      },
      "vars": [
        1,
        0.5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chainsawm",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = \"chainsawm\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 0.1,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 3,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 3,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif\n\t\t\t\t(context.other_card:get_id() >= 0 or context.other_card:get_id() <= 0)\n\t\t\t\tand not context.other_card:is_face()\n\t\t\t\tand context.other_card:get_id() ~= 14\n\t\t\t\tand not context.blueprint\n\t\t\t\tand not context.repetition\n\t\t\tthen\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.1
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.1
        }
      },
      "vars": [
        1,
        0.1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "snayn3",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "key = \"snayn3\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t\ttimer = 4,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 4,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 4,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.timer },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\t\tif card.ability.extra.timer > 5 then\n\t\t\tcard.ability.extra.timer = 5\n\t\tend\n\t\tif context.joker_main and G.GAME.current_round.hands_left == 1 and card.ability.extra.timer == 5 then\n\t\t\tcard.ability.extra.timer = 0\n\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\tcard:set_ability(\"j_crv_snayn32\")\n\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = localize(\"k_evolve_crv\") })\n\t\tend\n\t\tif context.joker_main and not G.GAME.current_round.hands_left == 1 then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 3,
          "timer": 4
        }
      },
      "ability": {
        "extra": {
          "xmult": 3,
          "timer": 4
        }
      },
      "vars": [
        3,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "snayn32",
      "atlas": "rev",
      "pos": {
        "x": 1,
        "y": 5
      },
      "raw": "key = \"snayn32\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 20,\n\t\t},\n\t},\n\trarity = \"crv_titan\",\n\tatlas = \"rev\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 5,\n\t},\n\tsoul_pos = {\n\t\tx = 0,\n\t\ty = 5,\n\t},\n\tcost = 25,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.main_eval then\n\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\tcard:set_ability(\"j_crv_snayn3\")\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 20
        }
      },
      "ability": {
        "extra": {
          "xmult": 20
        }
      },
      "vars": [
        20
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "_pease",
      "atlas": "rev",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"_pease\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1.5,\n\t\t\txmultg = 0.5,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"rev\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:get_id() == 13 then\n\t\t\t\tif context.other_card.ability.effect == \"Base\" then\n\t\t\t\t\tcontext.other_card:set_ability(G.P_CENTERS[\"m_glass\"])\n\t\t\t\tend\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t\tcard = card.other_card,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.destroy_card and context.cardarea == G.play then\n\t\t\tif context.destroy_card:get_id() ~= 13 then\n\t\t\t\tif context.destroy_card:is_face() then\n\t\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\t\t\treturn {\n\t\t\t\t\t\tremove = true,\n\t\t\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 1.5,
          "xmultg": 0.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.5,
          "xmultg": 0.5
        }
      },
      "vars": [
        1.5,
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "holybanana",
      "atlas": "holybanana",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"holybanana\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4011,\n\t\t\tchips = 4011,\n\t\t\todds = 4011,\n\t\t},\n\t},\n\trarity = \"crv_holy\",\n\tatlas = \"holybanana\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.individual and not context.blueprint then\n\t\t\tif pseudorandom(\"holybanana\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.holybanana_extinct = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_std_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_sbg_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 4011,
          "chips": 4011,
          "odds": 4011
        }
      },
      "ability": {
        "extra": {
          "xmult": 4011,
          "chips": 4011,
          "odds": 4011
        }
      },
      "vars": [
        4011,
        4011,
        1,
        4011
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pedro",
      "atlas": "pedro",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"pedro\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 42831398,\n\t\t\tchips = 42831398,\n\t\t},\n\t},\n\trarity = \"crv_pedro\",\n\tatlas = \"pedro\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 42831398,
          "chips": 42831398
        }
      },
      "ability": {
        "extra": {
          "xmult": 42831398,
          "chips": 42831398
        }
      },
      "vars": [
        42831398,
        42831398
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "defaultprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = \"defaultprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal make = pseudorandom_element(cardtomake, pseudoseed(\"defaultprinter\"))\n\t\t\t\tlocal allcons = {}\n\t\t\t\tfor k, _ in pairs(SMODS.ConsumableTypes) do\n\t\t\t\t\ttable.insert(allcons, k)\n\t\t\t\tend\n\t\t\t\tlocal toadd = pseudorandom_element(allcons, pseudoseed(\"defaultprinter\"))\n\t\t\t\tif make == 1 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = toadd,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n\t\t\t\telseif make == 2 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n\t\t\t\telseif make == 3 then\n\t\t\t\t\tlocal acard = create_playing_card({\n\t\t\t\t\t\tfront = G.P_CARDS[\"\" .. \"_\" .. \"\"],\n\t\t\t\t\t\tcenter = G.P_CENTERS[SMODS.poll_enhancement({\n\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t})],\n\t\t\t\t\t}, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tlocal make = pseudorandom_element(cardtomake, pseudoseed(\"defaultprinter\"))\n\t\t\t\tlocal allcons = {}\n\t\t\t\tfor k, _ in pairs(SMODS.ConsumableTypes) do\n\t\t\t\t\ttable.insert(allcons, k)\n\t\t\t\tend\n\t\t\t\tlocal toadd = pseudorandom_element(allcons, pseudoseed(\"anything\"))\n\t\t\t\tif make == 1 then\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\tset = toadd,\n\t\t\t\t\t\t})\n\t\t\t\t\telse\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage = \"No Space!\",\n\t\t\t\t\t\t}\n\t\t\t\t\tend\n\t\t\t\telseif make == 2 then\n\t\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\t})\n\t\t\t\t\telse\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage = \"No Space!\",\n\t\t\t\t\t\t}\n\t\t\t\t\tend\n\t\t\t\telseif make == 3 then\n\t\t\t\t\tlocal acard = create_playing_card({\n\t\t\t\t\t\tfront = G.P_CARDS[\"\" .. \"_\" .. \"\"],\n\t\t\t\t\t\tcenter = G.P_CENTERS[SMODS.poll_enhancement({\n\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t})],\n\t\t\t\t\t}, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "printer",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"printer\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_blueprint\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Blueprint\", G.jokers, nil, nil, nil, nil, \"j_blueprint\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal new_card = create_card(\"Blueprint\", G.jokers, nil, nil, nil, nil, \"j_blueprint\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rustyprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"rustyprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_brainstorm\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Brainstorm\", G.jokers, nil, nil, nil, nil, \"j_brainstorm\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal new_card = create_card(\"Brainstorm\", G.jokers, nil, nil, nil, nil, \"j_brainstorm\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimboprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"jimboprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, center)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_joker\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Joker\", G.jokers, nil, nil, nil, nil, \"j_joker\")\n\t\t\t\tnew_card:set_edition({\n\t\t\t\t\tnegative = true,\n\t\t\t\t}, true)\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal new_card = create_card(\"Joker\", G.jokers, nil, nil, nil, nil, \"j_joker\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "grossprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"grossprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 100,\n\t\t\todds2 = 1011,\n\t\t\todds3 = 25,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_gros_michel\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_cavendish\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_holybanana\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_pedro\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds, card.ability.extra.odds2 },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tif pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / crv.odds3 then\n\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\tcard:set_ability(\"j_crv_grossprinter\")\n\t\t\tend\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Cavendish\", G.jokers, nil, nil, nil, nil, \"j_cavendish\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\tand #G.jokers.cards < G.jokers.config.card_limit\n\t\t\tor self.area == G.jokers\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Cavendish\", G.jokers, nil, nil, nil, nil, \"j_cavendish\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif context.setting_blind and G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tlocal new_card = create_card(\"Gros Michel\", G.jokers, nil, nil, nil, nil, \"j_gros_michel\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif context.setting_blind and #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\tlocal new_card = create_card(\"Gros Michel\", G.jokers, nil, nil, nil, nil, \"j_gros_michel\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds2\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Holy Banana\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds2\n\t\t\t\tand #G.jokers.cards < G.jokers.config.card_limit\n\t\t\tor self.area == G.jokers\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Holy Banana\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\t\tif\n\t\t\tG.GAME.pool_flags.holybanana_extinct == true\n\t\t\tand context.setting_blind\n\t\t\tand not (#SMODS.find_card(\"j_crv_pedro\") >= 1)\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Pedro\", G.jokers, nil, nil, nil, nil, \"j_crv_pedro\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tG.GAME.pool_flags.holybanana_extinct == true\n\t\t\tand context.setting_blind\n\t\t\tand not (#SMODS.find_card(\"j_crv_pedro\") >= 1)\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Pedro\", G.jokers, nil, nil, nil, nil, \"j_crv_pedro\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 100,
          "odds2": 1011,
          "odds3": 25
        }
      },
      "ability": {
        "extra": {
          "odds": 100,
          "odds2": 1011,
          "odds3": 25
        }
      },
      "vars": [
        1,
        100,
        1011
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "sgrossprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 3
      },
      "raw": "key = \"sgrossprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_secret\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 50,\n\t\t\todds2 = 505,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_cavendish\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_holybanana\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_pedro\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds, card.ability.extra.odds2 },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Cavendish\", G.jokers, nil, nil, nil, nil, \"j_cavendish\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\tand #G.jokers.cards < G.jokers.config.card_limit\n\t\t\tor self.area == G.jokers\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Cavendish\", G.jokers, nil, nil, nil, nil, \"j_cavendish\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif context.setting_blind and G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"BananaPool\",\n\t\t\t\tedition = \"e_negative\",\n\t\t\t})\n\t\telseif context.setting_blind and #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"BananaPool\",\n\t\t\t})\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds2\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Holy Banana\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\t\tand pseudorandom(\"grossprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds2\n\t\t\t\tand #G.jokers.cards < G.jokers.config.card_limit\n\t\t\tor self.area == G.jokers\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Holy Banana\", G.jokers, nil, nil, nil, nil, \"j_crv_holybanana\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\t\tif\n\t\t\tG.GAME.pool_flags.holybanana_extinct == true\n\t\t\tand context.setting_blind\n\t\t\tand not (#SMODS.find_card(\"j_crv_pedro\") >= 1)\n\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Pedro\", G.jokers, nil, nil, nil, nil, \"j_crv_pedro\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif\n\t\t\tG.GAME.pool_flags.holybanana_extinct == true\n\t\t\tand context.setting_blind\n\t\t\tand not (#SMODS.find_card(\"j_crv_pedro\") >= 1)\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Pedro\", G.jokers, nil, nil, nil, nil, \"j_crv_pedro\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 50,
          "odds2": 505
        }
      },
      "ability": {
        "extra": {
          "odds": 50,
          "odds2": 505
        }
      },
      "vars": [
        1,
        50,
        505
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "obeliskprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"obeliskprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_obelisk\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\tlocal new_card = create_card(\"Obelisk\", G.jokers, nil, nil, nil, nil, \"j_obelisk\")\n\t\t\tnew_card:set_edition({\n\t\t\t\tnegative = true,\n\t\t\t}, true)\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\telseif context.setting_blind and #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\tlocal new_card = create_card(\"Obelisk\", G.jokers, nil, nil, nil, nil, \"j_obelisk\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "moneyprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"moneyprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,\n\n\tcalc_dollar_bonus = function(self, card)\n\t\treturn 35\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "brokenprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"brokenprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "faxprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"faxprinter\",\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t},\n\t},\n\tdiscovered = false,\n\tunlocked = true,\n\trarity = \"crv_p\",\n\tatlas = \"Jokers\",\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tcost = 10,\n\teternal_compat = true,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_pprwork\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif pseudorandom(\"faxprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal new_card = create_card(\"Paper Work\", G.jokers, nil, nil, nil, nil, \"j_crv_pprwork\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\telse\n\t\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\t\tlocal new_card = create_card(\"Paper Work\", G.jokers, nil, nil, nil, nil, \"j_crv_pprwork\")\n\t\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "odds": 4
        }
      },
      "vars": [
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pprwork",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"pprwork\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 20.4,\n\t\t\tmult = 9.8,\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips, card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:get_id() >= 2 and context.other_card:get_id() <= 9 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t\t\tcard = card.other_card,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "chips": 20.4,
          "mult": 9.8
        }
      },
      "ability": {
        "extra": {
          "chips": 20.4,
          "mult": 9.8
        }
      },
      "vars": [
        20.4,
        9.8
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spectralprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = \"spectralprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Spectral\",\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Spectral\",\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "legendaryprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = \"legendaryprinter\",\n\tatlas = \"Jokers\",\n\trarity = 4,\n\tcost = 20,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 3,\n\t},\n\tsoul_pos = {\n\t\tx = 3,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif pseudorandom(\"legendaryprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\tlegendary = true,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\tstickers = { \"perishable\" },\n\t\t\t\t})\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "odds": 2
        }
      },
      "vars": [
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "glassprinter",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = \"glassprinter\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 16,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_glassdocument\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif\n\t\t\t\tpseudorandom(\"glassprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\tand G.GAME.used_vouchers[\"v_crv_printerup\"] == true\n\t\t\tthen\n\t\t\t\tlocal new_card =\n\t\t\t\t\tcreate_card(\"Glass Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_glassdocument\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:shatter()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\telseif\n\t\t\t\tpseudorandom(\"glassprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\t\tand #G.consumeables.cards < G.consumeables.config.card_limit\n\t\t\t\tor self.area == G.consumeables\n\t\t\tthen\n\t\t\t\tlocal new_card =\n\t\t\t\t\tcreate_card(\"Glass Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_glassdocument\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telseif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card =\n\t\t\t\t\tcreate_card(\"Glass Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_glassdocument\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\tcreate_card(\"Glass Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_glassdocument\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 16
        }
      },
      "ability": {
        "extra": {
          "odds": 16
        }
      },
      "vars": [
        1,
        16
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "steelprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"steelprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_steeldocument\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card =\n\t\t\t\t\tcreate_card(\"Steel Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_steeldocument\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\tcreate_card(\"Steel Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_steeldocument\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.5
        }
      },
      "vars": [
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "smile",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"smile\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_photograph\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\t(#SMODS.find_card(\"j_joker\") > 0)\n\t\t\tand context.setting_blind\n\t\t\tand pseudorandom(\"smile\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Photograph\", G.jokers, nil, nil, nil, nil, \"j_photograph\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\tlocal new_card = create_card(\"Photograph\", G.jokers, nil, nil, nil, nil, \"j_photograph\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "odds": 3
        }
      },
      "vars": [
        1,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "lpm",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = \"lpm\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 0,\n\t\t\tmult_gain = 15,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.mult_gain },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.reroll_shop then\n\t\t\tlocal lpmcc = pseudorandom_element(lpmc, pseudoseed(\"lpm\"))\n\t\t\tif lpmcc == 1 then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal scrapselect = pseudorandom_element(scrapselecta, pseudoseed(\"lpm\"))\n\t\t\t\t\tif G.GAME.jojo then\n\t\t\t\t\t\tif scrapselect == 1 then\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"jojo_Scraps\",\n\t\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t\t})\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tlocal scrapselect = pseudorandom_element(scrapselecta, pseudoseed(\"lpm\"))\n\t\t\t\t\t\tif G.GAME.jojo then\n\t\t\t\t\t\t\tif scrapselect == 1 then\n\t\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\t\tset = \"jojo_Scraps\",\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\t\t\tset = \"scrap\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult_mod = card.ability.extra.mult,\n\t\t\t\tmessage = localize({\n\t\t\t\t\ttype = \"variable\",\n\t\t\t\t\tkey = \"a_mult\",\n\t\t\t\t\tvars = { card.ability.extra.mult },\n\t\t\t\t}),\n\t\t\t}\n\t\tend\n\t\tif context.using_consumeable then\n\t\t\tif G.GAME.jojo then\n\t\t\t\tif\n\t\t\t\t\tcontext.consumeable.ability.set == \"jojo_Scraps\"\n\t\t\t\t\tor context.consumeable.ability.set == \"scrap\" and not context.blueprint\n\t\t\t\tthen\n\t\t\t\t\tcard.ability.extra.mult = card.ability.extra.mult + card.ability.extra.mult_gain\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_cbm_ex\"),\n\t\t\t\t\t\tdelay = 1.3,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif context.consumeable.ability.set == \"scrap\" and not context.blueprint then\n\t\t\t\t\tcard.ability.extra.mult = card.ability.extra.mult + card.ability.extra.mult_gain\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_cbm_ex\"),\n\t\t\t\t\t\tdelay = 1.3,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 0,
          "mult_gain": 15
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "mult_gain": 15
        }
      },
      "vars": [
        0,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "devilishprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"devilishprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_devilscontract\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"devilishprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card =\n\t\t\t\t\tcreate_card(\"Devil's Contract\", G.consumeables, nil, nil, nil, nil, \"c_crv_devilscontract\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\tcreate_card(\"Devil's Contract\", G.consumeables, nil, nil, nil, nil, \"c_crv_devilscontract\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "odds": 2
        }
      },
      "vars": [
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "head",
      "atlas": "megaprinter",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"head\",\n\tatlas = \"megaprinter\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 25,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult_mod = card.ability.extra.mult,\n\t\t\t\tmessage = localize({\n\t\t\t\t\ttype = \"variable\",\n\t\t\t\t\tkey = \"a_mult\",\n\t\t\t\t\tvars = { card.ability.extra.mult },\n\t\t\t\t}),\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 25
        }
      },
      "ability": {
        "extra": {
          "mult": 25
        }
      },
      "vars": [
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "body",
      "atlas": "megaprinter",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"body\",\n\tatlas = \"megaprinter\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 30,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult_mod = card.ability.extra.mult,\n\t\t\t\tmessage = localize({\n\t\t\t\t\ttype = \"variable\",\n\t\t\t\t\tkey = \"a_mult\",\n\t\t\t\t\tvars = { card.ability.extra.mult },\n\t\t\t\t}),\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tor context.ending_shop\n\t\t\tor context.end_of_round and context.main_eval\n\t\t\tor context.buying_card\n\t\tthen\n\t\t\tif\n\t\t\t\t(#SMODS.find_card(\"j_crv_body\") > 0)\n\t\t\t\tand (#SMODS.find_card(\"j_crv_head\") > 0)\n\t\t\t\tand (#SMODS.find_card(\"j_crv_back\") > 0)\n\t\t\t\tand not context.repetition\n\t\t\t\tand not context.blueprint\n\t\t\t\tand not context.individual\n\t\t\tthen\n\t\t\t\tfor i = 1, #SMODS.find_card(\"j_crv_body\") and #SMODS.find_card(\"j_crv_head\") and #SMODS.find_card(\"j_crv_back\") do\n\t\t\t\t\tSMODS.find_card(\"j_crv_back\")[i]:start_dissolve()\n\t\t\t\t\tSMODS.find_card(\"j_crv_body\")[i]:start_dissolve()\n\t\t\t\t\tSMODS.find_card(\"j_crv_head\")[i]:start_dissolve()\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tkey = \"j_crv_full\",\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 30
        }
      },
      "ability": {
        "extra": {
          "mult": 30
        }
      },
      "vars": [
        30
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "back",
      "atlas": "megaprinter",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"back\",\n\tatlas = \"megaprinter\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 25,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult_mod = card.ability.extra.mult,\n\t\t\t\tmessage = localize({\n\t\t\t\t\ttype = \"variable\",\n\t\t\t\t\tkey = \"a_mult\",\n\t\t\t\t\tvars = { card.ability.extra.mult },\n\t\t\t\t}),\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 25
        }
      },
      "ability": {
        "extra": {
          "mult": 25
        }
      },
      "vars": [
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "full",
      "atlas": "megaprinterc",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"full\",\n\tatlas = \"megaprinterc\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tno_collection = true,\n\tdisplay_size = {\n\t\tw = 172,\n\t\th = 95,\n\t},\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 80,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_megadoc\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Mega\", G.consumeables, nil, nil, nil, nil, \"c_crv_megadoc\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card = create_card(\"Mega\", G.consumeables, nil, nil, nil, nil, \"c_crv_megadoc\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "mult": 80
        }
      },
      "ability": {
        "extra": {
          "mult": 80
        }
      },
      "vars": [
        80
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tierp",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"tierp\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t\ttimer2 = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_t1doc\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_t2doc\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_t3doc\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_boostdoc\n\t\treturn {\n\t\t\tvars = { card.ability.extra.timer, card.ability.extra.timer2 },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and (card.ability.extra.timer == 15) and not (card.ability.extra.timer2 == 5) then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Tier 3 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t3doc\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card = create_card(\"Tier 3 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t3doc\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\telseif context.setting_blind and (card.ability.extra.timer >= 5) and not (card.ability.extra.timer == 15) then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tlocal new_card = create_card(\"Tier 2 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t2doc\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tlocal new_card = create_card(\"Tier 2 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t2doc\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif context.setting_blind and not (card.ability.extra.timer > 4) then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal new_card = create_card(\"Tier 1 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t1doc\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\telse\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\t\tcreate_card(\"Tier 1 Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_t1doc\")\n\t\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not (card.ability.extra.timer == 15)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand (card.ability.extra.timer == 15)\n\t\t\tand not (card.ability.extra.timer2 == 5)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.timer2 = card.ability.extra.timer2 + 1\n\t\tend\n\t\tif context.setting_blind and (card.ability.extra.timer2 == 5) then\n\t\t\tlocal new_card = create_card(\"Boosted Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_boostdoc\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.consumeables:emplace(new_card)\n\t\t\tcard.ability.extra.timer2 = 0\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "timer": 0,
          "timer2": 0
        }
      },
      "ability": {
        "extra": {
          "timer": 0,
          "timer2": 0
        }
      },
      "vars": [
        0,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "luckyprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"luckyprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_luckydocument\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif pseudorandom(\"luckyprinter\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\t\tlocal new_card2 =\n\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\tnew_card2:add_to_deck()\n\t\t\t\t\tnew_card2:set_edition({ negative = true }, true)\n\t\t\t\t\tG.consumeables:emplace(new_card2)\n\t\t\t\telse\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\t\t\tlocal new_card2 =\n\t\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\t\tnew_card2:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(new_card2)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\tnew_card:set_edition({ negative = true }, true)\n\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\telse\n\t\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\t\tlocal new_card =\n\t\t\t\t\t\t\tcreate_card(\"Lucky Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_luckydocument\")\n\t\t\t\t\t\tnew_card:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(new_card)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "odds": 4
        }
      },
      "vars": [
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "celestialprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"celestialprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Planet\",\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Planet\",\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pcp",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 4
      },
      "raw": "key = \"pcp\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_polydoc\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1.5,\n\t\t},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind and #G.consumeables.cards < G.consumeables.config.card_limit\n\t\t\tor self.area == G.consumeables\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Polychrome Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_polydoc\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({\n\t\t\t\tpolychrome = true,\n\t\t\t}, true)\n\t\t\tG.consumeables:emplace(new_card)\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"polychrome\", nil, card.ARGS.send_to_shader)\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.5
        }
      },
      "vars": [
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "fcp",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = \"fcp\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_foildoc\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips },\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind and #G.consumeables.cards < G.consumeables.config.card_limit\n\t\t\tor self.area == G.consumeables\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Foil Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_foildoc\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({\n\t\t\t\tfoil = true,\n\t\t\t}, true)\n\t\t\tG.consumeables:emplace(new_card)\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"foil\", nil, card.ARGS.send_to_shader)\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 50
        }
      },
      "ability": {
        "extra": {
          "chips": 50
        }
      },
      "vars": [
        50
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hcp",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "key = \"hcp\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_holdoc\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 10,\n\t\t},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.setting_blind and #G.consumeables.cards < G.consumeables.config.card_limit\n\t\t\tor self.area == G.consumeables\n\t\tthen\n\t\t\tlocal new_card = create_card(\"Holographic Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_holdoc\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({\n\t\t\t\tholo = true,\n\t\t\t}, true)\n\t\t\tG.consumeables:emplace(new_card)\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"holo\", nil, card.ARGS.send_to_shader)\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 10
        }
      },
      "ability": {
        "extra": {
          "mult": 10
        }
      },
      "vars": [
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ncp",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 4
      },
      "raw": "key = \"ncp\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_negdoc\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tcounter = 1,\n\t\t},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tlocal new_card = create_card(\"Negative Document\", G.consumeables, nil, nil, nil, nil, \"c_crv_negdoc\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tnew_card:set_edition({\n\t\t\t\tnegative = true,\n\t\t\t}, true)\n\t\t\tG.consumeables:emplace(new_card)\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"negative\", nil, card.ARGS.send_to_shader)\n\t\tcard.children.center:draw_shader(\"negative_shine\", nil, card.ARGS.send_to_shader)\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit + 1\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit - 1\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "counter": 1
        }
      },
      "ability": {
        "extra": {
          "counter": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ucp",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 6
      },
      "raw": "key = \"ucp\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_crv_uedoc\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 4,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tkey = \"c_crv_uedoc\",\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tif #G.consumeables.cards < G.consumeables.config.card_limit or self.area == G.consumeables then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\t\tkey = \"c_crv_uedoc\",\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"polychrome\", nil, card.ARGS.send_to_shader)\n\t\tcard.children.center:draw_shader(\"negative_shine\", nil, card.ARGS.send_to_shader)\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "urp",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = \"urp\",\n\tconfig = {\n\t\textra = {\n\t\t\tone = 0,\n\t\t},\n\t},\n\trarity = \"crv_p\",\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 1,\n\t},\n\tcost = 10,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and #G.jokers.cards > 1 and (card.ability.extra.one == 0) then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] ~= nil then\n\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tlocal card2 = copy_card(G.jokers.cards[rr + 1], nil, nil, G.jokers.cards[i] == card)\n\t\t\t\t\t\t\tcard2:add_to_deck()\n\t\t\t\t\t\t\tcard2:set_edition({ negative = true }, true)\n\t\t\t\t\t\t\tG.jokers:emplace(card2)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\telse\n\t\t\t\t\tif #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tlocal card2 = copy_card(G.jokers.cards[rr + 1], nil, nil, G.jokers.cards[i] == card)\n\t\t\t\t\t\t\t\tcard2:add_to_deck()\n\t\t\t\t\t\t\t\tG.jokers:emplace(card2)\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tif rr and G.jokers.cards[rr + 1] then\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "one": 0
        }
      },
      "ability": {
        "extra": {
          "one": 0
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "3dp",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 6
      },
      "raw": "key = \"3dp\",\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 9,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tadd_tag(Tag(pseudorandom_element(tags, pseudoseed(\"3dp\"))))\n\t\t\t\t\tplay_sound(\"generic1\", 0.9 + math.random() * 0.1, 0.8)\n\t\t\t\t\tplay_sound(\"holo1\", 1.2 + math.random() * 0.1, 0.4)\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "printerprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 10
      },
      "raw": "key = \"printerprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 4,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"Joker\",\n\t\t\t\trarity = \"crv_p\",\n\t\t\t})\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 4
        }
      },
      "ability": {
        "extra": {
          "mult": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "cosmicprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 9
      },
      "raw": "key = \"cosmicprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\teternal_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tSMODS.add_card{\n\t\t\t\tset = \"Joker\",\n\t\t\t\trarity = \"crv_p\"\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 4
        }
      },
      "ability": {
        "extra": {
          "mult": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "foodprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 10
      },
      "raw": "key = \"foodprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 4,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Food\",\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"Food\",\n\t\t\t\t})\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 4
        }
      },
      "ability": {
        "extra": {
          "mult": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rprinter",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 11
      },
      "raw": "key = \"rprinter\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tkey = \"c_crv_rdocument\",\n\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tarea = G.consumeables,\n\t\t\t\t\tkey = \"c_crv_rdocument\",\n\t\t\t\t})\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ghostbanana",
      "atlas": "gb",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"ghostbanana\",\n\tatlas = \"gb\",\n\trarity = 2,\n\tcost = 4,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 100,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_ghostslices\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\t\tif context.setting_blind and #G.jokers.cards < G.jokers.config.card_limit or self.area == G.jokers then\n\t\t\tlocal new_card = create_card(\"Ghost Slices\", G.jokers, nil, nil, nil, nil, \"j_crv_ghostslices\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 100
        }
      },
      "ability": {
        "extra": {
          "chips": 100
        }
      },
      "vars": [
        100
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ghostslices",
      "atlas": "gb",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"ghostslices\",\n\tatlas = \"gb\",\n\trarity = 1,\n\tcost = 1,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "chips": 50
        }
      },
      "ability": {
        "extra": {
          "chips": 50
        }
      },
      "vars": [
        50
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "plantain",
      "atlas": "gban",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"plantain\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"pex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t\txmult = 2,\n\t\t\todds = 12,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.timer,\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not (card.ability.extra.timer == 3)\n\t\tthen\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\t\tif context.joker_main and card.ability.extra.timer == 3 then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.individual and not context.blueprint then\n\t\t\tif card.ability.extra.timer == 3 then\n\t\t\t\tif\n\t\t\t\t\tpseudorandom(\"plantin\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\t\tand not context.blueprint\n\t\t\t\tthen\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.GAME.pool_flags.pex = true\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\t\t\tdelay(0.6),\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_safe_ex\"),\n\t\t\t\t\t\tdelay(0.6),\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "timer": 0,
          "xmult": 2,
          "odds": 12
        }
      },
      "ability": {
        "extra": {
          "timer": 0,
          "xmult": 2,
          "odds": 12
        }
      },
      "vars": [
        0,
        2,
        1,
        12
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "reban",
      "atlas": "gban",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"reban\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"rex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 30,\n\t\t\todds = 8,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.individual and not context.blueprint then\n\t\t\tif\n\t\t\t\tpseudorandom(\"reban\") < G.GAME.probabilities.normal / card.ability.extra.odds and not context.blueprint\n\t\t\tthen\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.rex = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_safe_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 30,
          "odds": 8
        }
      },
      "ability": {
        "extra": {
          "mult": 30,
          "odds": 8
        }
      },
      "vars": [
        30,
        1,
        8
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tundan",
      "atlas": "gban",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"tundan\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"lex\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 0,\n\t\t\todds = 8,\n\t\t\tchip_gain = 15,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t\tcard.ability.extra.chip_gain,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_gros_michel\") >= 1)\n\t\tthen\n\t\t\tcard.ability.extra.chips = card.ability.extra.chips + card.ability.extra.chip_gain\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t\tcard = card,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.individual and not context.blueprint then\n\t\t\tif\n\t\t\t\tpseudorandom(\"tundan\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\tand not context.blueprint\n\t\t\tthen\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.lex = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_safe_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 0,
          "odds": 8,
          "chip_gain": 15
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "odds": 8,
          "chip_gain": 15
        }
      },
      "vars": [
        0,
        1,
        8,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bluj",
      "atlas": "gban",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"bluj\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"bex\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 25,\n\t\t\tmult_r = 1,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.mult_r },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tif not (card.ability.extra.mult == 1) then\n\t\t\t\tcard.ability.extra.mult = card.ability.extra.mult - card.ability.extra.mult_r\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_yum\"),\n\t\t\t\t\tcolour = G.C.MULT,\n\t\t\t\t\tcard = card,\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.bex = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_eaten_ex\"),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 25,
          "mult_r": 1
        }
      },
      "ability": {
        "extra": {
          "mult": 25,
          "mult_r": 1
        }
      },
      "vars": [
        25,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bananavine",
      "atlas": "gban",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"bananavine\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"gex\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 1,\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_gros_michel\n\t\treturn {\n\t\t\tvars = { card.ability.extra.timer },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint and not context.repetition and not context.individual then\n\t\t\tif card.ability.extra.timer < 3 then\n\t\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\t\t\tlocal new_card = create_card(\"Gros Michel\", G.jokers, nil, nil, nil, nil, \"j_gros_michel\")\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\tend\n\t\t\tif context.setting_blind and (card.ability.extra.timer == 3) then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.gex = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_ofb_ex\"),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "timer": 0
        }
      },
      "ability": {
        "extra": {
          "timer": 0
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "plainb",
      "atlas": "gban",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"plainb\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"pex2\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 1,\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\textra_value = 3,\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.extra_value, (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tif\n\t\t\t\tpseudorandom(\"plainb\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\t\tand not context.blueprint\n\t\t\tthen\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tG.GAME.pool_flags.pex2 = true\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tcard.ability.extra_value = card.ability.extra_value + 15\n\t\t\t\tcard:set_cost()\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_val_up\"),\n\t\t\t\t\tdelay(0.6),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "extra_value": 3,
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "extra_value": 3,
          "odds": 2
        }
      },
      "vars": [
        3,
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tickingb",
      "atlas": "gban",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"tickingb\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"tex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 15,\n\t\t\ttimer = 0,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.timer },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not (card.ability.extra.timer == 3)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\t\tif context.joker_main then\n\t\t\tif card.ability.extra.timer == 3 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t},\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\t\t\tdelay = 1.5,\n\t\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\tG.GAME.pool_flags.tex = true\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 15,
          "timer": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 15,
          "timer": 0
        }
      },
      "vars": [
        15,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "uneasyb",
      "atlas": "gban",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"uneasyb\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 15,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\trarity = 2,\n\tatlas = \"gban\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\n\tpos = {\n\t\tx = 0,\n\t\ty = 2,\n\t},\n\tcost = 4,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal random_key = rkeys[math.random(#rkeys)]\n\t\t\tif (random_key == \"5\") and not context.repetition and not context.individual then\n\t\t\t\tG.STATE = G.STATES.GAME_OVER\n\t\t\t\tG.STATE_COMPLETE = false\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 15
        }
      },
      "ability": {
        "extra": {
          "xmult": 15
        }
      },
      "vars": [
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bananatemp",
      "atlas": "gban",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"bananatemp\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"btex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t\todds = 8,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.timer },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not (card.ability.extra.timer == 3)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\t\tif context.setting_blind and not context.blueprint and not context.repetition then\n\t\t\tif card.ability.extra.timer == 3 then\n\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 0.1)\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tset = \"BananaPool\",\n\t\t\t\t})\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "timer": 0,
          "odds": 8
        }
      },
      "ability": {
        "extra": {
          "timer": 0,
          "odds": 8
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "doubleban",
      "atlas": "gban",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = \"doubleban\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"dbex\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\trepetitions = 2,\n\t\t\todds = 8,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t\tBananaPool = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.repetitions, card.ability.extra.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.retrigger_joker_check then\n\t\t\treturn {\n\t\t\t\trepetitions = card.ability.extra.repetitions,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand pseudorandom(\"doubleban\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 0.1)\n\t\t\tG.GAME.pool_flags.dbex = true\n\t\t\tfor i = 1, 2 do\n\t\t\t\tSMODS.add_card({\n\t\t\t\t\tkey = \"j_cavendish\",\n\t\t\t\t\tarea = G.jokers,\n\t\t\t\t})\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "repetitions": 2,
          "odds": 8
        }
      },
      "ability": {
        "extra": {
          "repetitions": 2,
          "odds": 8
        }
      },
      "vars": [
        2,
        8,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimban",
      "atlas": "gban",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"jimban\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"jbex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 8,\n\t\t\todds = 6,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t\tBananaPool = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = crv.mult,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.blueprint\n\t\t\tand context.main_eval\n\t\t\tand pseudorandom(\"jimban\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 1.5,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.GAME.pool_flags.jbex = true\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 8,
          "odds": 6
        }
      },
      "ability": {
        "extra": {
          "mult": 8,
          "odds": 6
        }
      },
      "vars": [
        8,
        6,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "divineban",
      "atlas": "gban",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = \"divineban\",\n\tatlas = \"gban\",\n\tno_pool_flag = \"dibex\",\n\trarity = 1,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tdollars = 2,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t\tBananaPool = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.dollars },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\tdollars = crv.dollars,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "dollars": 2
        }
      },
      "ability": {
        "extra": {
          "dollars": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "grosdish",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 11
      },
      "raw": "key = \"grosdish\",\n\tatlas = \"Jokers2\",\n\tno_pool_flag = \"groex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 30,\n\t\t\todds = 6,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t\tBananaPool = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips, (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = crv.chips,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.blueprint\n\t\t\tand context.main_eval\n\t\t\tand pseudorandom(\"grosdish\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 1.5,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.GAME.pool_flags.groex = true\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\tdelay(0.6),\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 30,
          "odds": 6
        }
      },
      "ability": {
        "extra": {
          "chips": 30,
          "odds": 6
        }
      },
      "vars": [
        30,
        1,
        6
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "cavicheal",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 11
      },
      "raw": "key = \"cavicheal\",\n\tatlas = \"Jokers2\",\n\tno_pool_flag = \"cavex\",\n\tyes_pool_flag = \"groex\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txchips = 6,\n\t\t\todds = 1000,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t\tBananaPool = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xchips, (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txchips = crv.xchips,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.blueprint\n\t\t\tand context.main_eval\n\t\t\tand pseudorandom(\"cavicheal\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 1.5,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.GAME.pool_flags.cavex = true\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_extinct_ex\"),\n\t\t\t\tdelay(0.6),\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xchips": 6,
          "odds": 1000
        }
      },
      "ability": {
        "extra": {
          "xchips": 6,
          "odds": 1000
        }
      },
      "vars": [
        6,
        1,
        1000
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bpj",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"bpj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.4,\n\t\t\tbfps(),\n\t\t},\n\t},\n\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_bulletproofglass\n\t\treturn {\n\t\t\tvars = { card.ability.extra.x_gain * bfps() + 1, card.ability.extra.x_gain, bfps() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif bfps() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = bfps() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\tif bfps() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dcj",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"dcj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.3,\n\t\t\tdcs(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_diamondcard\n\t\treturn {\n\t\t\tvars = { card.ability.extra.x_gain * dcs() + 1, card.ability.extra.x_gain, dcs() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif dcs() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = dcs() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\tif dcs() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mgj",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = \"mgj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.2,\n\t\t\tmgc(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 3,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_mugged\n\t\treturn {\n\t\t\tvars = { card.ability.extra.x_gain * mgc() + 1, card.ability.extra.x_gain, mgc() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif mgc() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = mgc() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif mgc() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "amj",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"amj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.2,\n\t\t\tflm(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_aflame\n\t\treturn {\n\t\t\tvars = { card.ability.extra.x_gain * flm() + 1, card.ability.extra.x_gain, flm() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif flm() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = flm() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif flm() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mj",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"mj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.4,\n\t\t\tmg(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 1,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_mega\n\t\treturn {\n\t\t\tvars = { card.ability.extra.x_gain * mg() + 1, card.ability.extra.x_gain, mg() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif mg() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = mg() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif mg() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bj",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = \"bj\",\n\tconfig = {\n\t\textra = {\n\t\t\tx_gain = 0.4,\n\t\t\tbls(),\n\t\t\tmult = 5,\n\t\t\tchips = 10,\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 3,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_blessedcard\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.x_gain * bls() + 1,\n\t\t\t\tcard.ability.extra.x_gain,\n\t\t\t\tbls(),\n\t\t\t\tcard.ability.extra.mult,\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t\tcard.ability.extra.chips * bls(),\n\t\t\t\tcard.ability.extra.mult * bls(),\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif bls() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = bls() * card.ability.extra.chips,\n\t\t\t\t\tmult = bls() * card.ability.extra.mult,\n\t\t\t\t\tx_mult = bls() * card.ability.extra.x_gain + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif bls() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "t1j",
      "atlas": "t",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = \"t1j\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 15,\n\t\t\tt1(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"t\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_tier1card\n\t\treturn {\n\t\t\tvars = { t1(), card.ability.extra.chips, card.ability.extra.chips * t1() },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif t1() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = t1() * card.ability.extra.chips,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif t1() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "t2j",
      "atlas": "t",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = \"t2j\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 30,\n\t\t\tmult = 5,\n\t\t\tt2(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"t\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_tier2card\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tt2(),\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t\tcard.ability.extra.mult,\n\t\t\t\tcard.ability.extra.chips * t2(),\n\t\t\t\tcard.ability.extra.mult * t2(),\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif t2() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = t2() * card.ability.extra.chips,\n\t\t\t\t\tmult = t2() * card.ability.extra.mult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\tif t2() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "t3j",
      "atlas": "t",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"t3j\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t\txmult = 0.2,\n\t\t\tt3(),\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"t\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_tier3card\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tt3(),\n\t\t\t\tcard.ability.extra.chips,\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\tcard.ability.extra.chips * t3(),\n\t\t\t\tcard.ability.extra.xmult * t3() + 1,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif t3() > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = t3() * card.ability.extra.chips,\n\t\t\t\t\tx_mult = t3() * card.ability.extra.xmult + 1,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\tif t3() > 0 then\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bh",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"bh\",\n\tconfig = {\n\t\textra = {\n\t\t\thp = 3,\n\t\t\thavecard = 0,\n\t\t\tneeds = 0,\n\t\t\tmoney = 10,\n\t\t\thand = -1,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 0,\n\t},\n\tcost = 10,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.hp, card.ability.extra.havecard, card.ability.extra.needs, hc() },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, context)\n\t\tcard.ability.extra.hp = 3\n\t\tcard.ability.extra.needs = 0\n\t\tcard.ability.extra.money = 5\n\t\tcard.ability.extra.hand = -1\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint and not context.repetition and hc() == 0 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tlocal card2 = pseudorandom_element(G.playing_cards, pseudoseed(\"bh\"))\n\t\t\t\t\tcard2:set_ability(G.P_CENTERS[\"m_crv_target\"])\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_tset_ex\"),\n\t\t\t}\n\t\tend\n\t\tif context.destroying_card and not context.blueprint then\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif\n\t\t\t\t\tv.config.center == G.P_CENTERS.m_crv_target\n\t\t\t\t\tand not (card.ability.extra.needs == 4)\n\t\t\t\t\tand not context.blueprint\n\t\t\t\tthen\n\t\t\t\t\tcard.ability.extra.needs = card.ability.extra.needs + 1\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdollars = card.ability.extra.money,\n\t\t\t\t\t\tmessage = localize(\"k_crv_telim_ex\"),\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif\n\t\t\t(card.ability.extra.needs == 4)\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tif context.after and not context.repetitive and not context.individual and not context.blueprint then\n\t\t\t\tlocal random_key = leg_keys[math.random(#leg_keys)]\n\t\t\t\tlocal new_card = create_card(random_key, G.jokers, nil, nil, nil, nil, random_key)\n\t\t\t\tnew_card:set_edition({\n\t\t\t\t\tnegative = true,\n\t\t\t\t}, true)\n\t\t\t\tnew_card:add_to_deck()\n\t\t\t\tG.jokers:emplace(new_card)\n\t\t\tend\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.individual then\n\t\t\tfor k, v in pairs(G.playing_cards) do\n\t\t\t\tif v.config.center == G.P_CENTERS.m_crv_target then\n\t\t\t\t\tcard.ability.extra.hp = card.ability.extra.hp - 1\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_failed_ex\"),\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif\n\t\t\t(card.ability.extra.hp == 0)\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tG.hand:change_size(card.ability.extra.hand)\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_post_ex\"),\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "hp": 3,
          "havecard": 0,
          "needs": 0,
          "money": 10,
          "hand": -1
        }
      },
      "ability": {
        "extra": {
          "hp": 3,
          "havecard": 0,
          "needs": 0,
          "money": 10,
          "hand": -1
        }
      },
      "vars": [
        3,
        0,
        0,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "flytrap",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = \"flytrap\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchipg = 10,\n\t\t\tchip = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chipg, card.ability.extra.chip },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.individual\n\t\t\tand context.cardarea == G.play\n\t\t\tand context.other_card:is_suit(\"Clubs\", true)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.chip = card.ability.extra.chip + card.ability.extra.chipg\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chip,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chipg": 10,
          "chip": 0
        }
      },
      "ability": {
        "extra": {
          "chipg": 10,
          "chip": 0
        }
      },
      "vars": [
        10,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "news",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = \"news\",\n\tatlas = \"Jokers2\",\n\trarity = 1,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand pseudorandom(\"couponist\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tadd_tag(Tag(\"tag_coupon\"))\n\t\t\t\t\tplay_sound(\"generic1\", 0.9 + math.random() * 0.1, 0.8)\n\t\t\t\t\tplay_sound(\"holo1\", 1.2 + math.random() * 0.1, 0.4)\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "odds": 4
        }
      },
      "vars": [
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mtm",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 1
      },
      "raw": "key = \"mtm\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3.14,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 4,\n\t\ty = 1,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v:get_id() == 3 then\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 3.14
        }
      },
      "ability": {
        "extra": {
          "xmult": 3.14
        }
      },
      "vars": [
        3.14
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vrev",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "key = \"vrev\",\n\tatlas = \"Jokers2\",\n\tpos = {\n\t\tx = 4,\n\t\ty = 2,\n\t},\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tconfig = {\n\t\textra = {\n\t\t\todds = 6,\n\t\t\tmult = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds, card.ability.extra.mult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.extra.odds == 1 then\n\t\t\tcard.ability.extra.odds = 6\n\t\tend\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tif G.jokers.cards[1] == card or G.jokers.cards[1].ability.eternal then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\tblockable = false,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\tend\n\n\t\t\tif\n\t\t\t\tnot card.getting_sliced\n\t\t\t\tand not G.jokers.cards[1].ability.eternal\n\t\t\t\tand not G.jokers.cards[1].getting_sliced\n\t\t\tthen\n\t\t\t\tif G.jokers.cards[1] ~= card then\n\t\t\t\t\tif pseudorandom(\"vrev\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\t\t\tlocal sliced_card = G.jokers.cards[1]\n\t\t\t\t\t\tsliced_card.getting_sliced = true\n\t\t\t\t\t\tG.GAME.joker_buffer = G.GAME.joker_buffer - 1\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tG.GAME.joker_buffer = 0\n\t\t\t\t\t\t\t\tcard.ability.extra.mult = card.ability.extra.mult + sliced_card.sell_cost * 1.5\n\t\t\t\t\t\t\t\tcard.ability.extra.odds = 6\n\t\t\t\t\t\t\t\tcard:juice_up(0.8, 0.8)\n\t\t\t\t\t\t\t\tsliced_card:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage = localize(\"k_crv_hit\"),\n\t\t\t\t\t\t\tdelay(0.6),\n\t\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal sliced_card = G.jokers.cards[1]\n\t\t\t\t\t\tcard.ability.extra.mult = card.ability.extra.mult + sliced_card.sell_cost * 1.5\n\t\t\t\t\t\tcard.ability.extra.odds = card.ability.extra.odds - 1\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage = localize(\"k_crv_miss\"),\n\t\t\t\t\t\t}\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "odds": 6,
          "mult": 1
        }
      },
      "ability": {
        "extra": {
          "odds": 6,
          "mult": 1
        }
      },
      "vars": [
        1,
        6,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ut",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = \"ut\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 4,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tlocal numbers, all_cards = 0, 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tall_cards = all_cards + 1\n\t\t\t\tif v:get_id() >= 2 and v:get_id() <= 6 then\n\t\t\t\t\tnumbers = numbers + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif numbers == all_cards then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 3
        }
      },
      "vars": [
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "smbj",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = \"smbj\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t\trandomsuit = 2,\n\t\t\tsetsuit = \"Spades\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.randomsuit, card.ability.extra.xmult, card.ability.extra.setsuit },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not context.blueprint then\n\t\t\tcard.ability.extra.randomsuit = (pseudorandom_element(suits, pseudoseed(\"ptm\")))\n\t\t\tif card.ability.extra.randomsuit == 1 then\n\t\t\t\tcard.ability.extra.setsuit = \"Clubs\"\n\t\t\telseif card.ability.extra.randomsuit == 2 then\n\t\t\t\tcard.ability.extra.setsuit = \"Spades\"\n\t\t\telseif card.ability.extra.randomsuit == 3 then\n\t\t\t\tcard.ability.extra.setsuit = \"Diamonds\"\n\t\t\telseif card.ability.extra.randomsuit == 4 then\n\t\t\t\tcard.ability.extra.setsuit = \"Hearts\"\n\t\t\tend\n\t\tend\n\t\t-- all cards calc\n\t\tif context.joker_main then\n\t\t\tlocal all_cards = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tall_cards = all_cards + 1\n\t\t\t\tcard.ability.extra.allcards = all_cards\n\t\t\tend\n\t\tend\n\n\t\t-- checks for clubs\n\t\tif context.joker_main and card.ability.extra.randomsuit == 1 then\n\t\t\tlocal blackc_suits = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tif v:is_suit(\"Clubs\", nil, true) then\n\t\t\t\t\tblackc_suits = blackc_suits + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif blackc_suits == card.ability.extra.allcards then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\t\t-- checks for spades\n\t\telseif context.joker_main and card.ability.extra.randomsuit == 2 then\n\t\t\tlocal blacks_suits = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tif v:is_suit(\"Spades\", nil, true) then\n\t\t\t\t\tblacks_suits = blacks_suits + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif blacks_suits == card.ability.extra.allcards then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\t\t-- checks for diamonds\n\t\telseif context.joker_main and card.ability.extra.randomsuit == 3 then\n\t\t\tlocal redd_suits = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tif v:is_suit(\"Diamonds\", nil, true) then\n\t\t\t\t\tredd_suits = redd_suits + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif redd_suits == card.ability.extra.allcards then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\t\t-- check for hearts\n\t\telseif context.joker_main and card.ability.extra.randomsuit == 4 then\n\t\t\tlocal redh_suits = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tif v:is_suit(\"Hearts\", nil, true) then\n\t\t\t\t\tredh_suits = redh_suits + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif redh_suits == card.ability.extra.allcards then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 3,
          "randomsuit": 2,
          "setsuit": "Spades"
        }
      },
      "ability": {
        "extra": {
          "xmult": 3,
          "randomsuit": 2,
          "setsuit": "Spades"
        }
      },
      "vars": [
        2,
        3,
        "Spades"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "checkpoint",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 1
      },
      "raw": "key = \"checkpoint\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 5,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\n\tcalculate = function(self, card, context)\n\t\tif context.selling_self and not context.blueprint then\n\t\t\tG.GAME.chips = G.GAME.chips / 2\n\t\t\tG.GAME.current_round.hands_left = G.GAME.current_round.hands_left + G.GAME.current_round.hands_played\n\t\t\tG.GAME.current_round.discards_left = G.GAME.current_round.discards_left + G.GAME.current_round.discards_used\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "goldenshark",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 2
      },
      "raw": "key = \"goldenshark\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 5,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t\tstatus = \"Not Ready\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.timer, card.ability.extra.status },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not (card.ability.extra.timer == 3)\n\t\tthen\n\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\tend\n\n\t\tif card.ability.extra.timer == 3 then\n\t\t\tcard.ability.extra.status = \"Ready\"\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif context.other_card.ability.effect == \"Base\" then\n\t\t\t\t\t\tcontext.other_card:set_ability(G.P_CENTERS.m_gold)\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif card.ability.extra.timer == 3 and context.final_scoring_step then\n\t\t\tcard.ability.extra.timer = 0\n\t\t\tcard.ability.extra.status = \"Not Ready\"\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "timer": 0,
          "status": "Not Ready"
        }
      },
      "ability": {
        "extra": {
          "timer": 0,
          "status": "Not Ready"
        }
      },
      "vars": [
        0,
        "Not Ready"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "sfj",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 3
      },
      "raw": "key = \"sfj\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tone = 0,\n\t\t\tchips = 0,\n\t\t\tok = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.one, card.ability.extra.chips, card.ability.extra.ok },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.joker_main\n\t\t\tand G.GAME.talisman == 1\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\tthen\n\t\t\tcard.ability.extra.ok = card.ability.extra.ok + 1\n\t\t\tlocal chips = hand_chips * mult\n\t\t\tcard.ability.extra.chips = chips\n\t\t\tcard.ability.extra.one = to_number(card.ability.extra.chips / 2)\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_stored\"),\n\t\t\t}\n\t\telseif\n\t\t\tcontext.joker_main\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand card.ability.extra.one == 0\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\tthen\n\t\t\tcard.ability.extra.ok = card.ability.extra.ok + 1\n\t\t\tlocal chips = hand_chips * mult\n\t\t\tcard.ability.extra.chips = chips\n\t\t\tcard.ability.extra.one = card.ability.extra.chips / 2\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_stored\"),\n\t\t\t}\n\t\tend\n\t\tif context.joker_main and G.GAME.talisman == 1 and card.ability.extra.ok > 0 then\n\t\t\tif #SMODS.find_card(\"j_crv_upgr\") == 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = to_number(card.ability.extra.one),\n\t\t\t\t}\n\t\t\telseif #SMODS.find_card(\"j_crv_upgr\") > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tmult = card.ability.extra.one,\n\t\t\t\t}\n\t\t\tend\n\t\telseif context.joker_main and card.ability.extra.ok > 0 then\n\t\t\tif #SMODS.find_card(\"j_crv_upgr\") == 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = card.ability.extra.one,\n\t\t\t\t}\n\t\t\telseif #SMODS.find_card(\"j_crv_upgr\") > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tmult = card.ability.extra.one,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.ok = 0\n\t\t\tcard.ability.extra.one = 0\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_cleaning\"),\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "one": 0,
          "chips": 0,
          "ok": 0
        }
      },
      "ability": {
        "extra": {
          "one": 0,
          "chips": 0,
          "ok": 0
        }
      },
      "vars": [
        0,
        0,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "upgr",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 4
      },
      "raw": "key = \"upgr\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 6,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.j_crv_sfj\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "btls",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = \"btls\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 6,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and G.GAME.talisman == 1 and not context.blueprint and not context.repetition then\n\t\t\tlocal cc = (pseudorandom_element(chances, pseudoseed(\"btls\")))\n\t\t\tif cc == 1 then\n\t\t\t\treturn {\n\t\t\t\t\tchip_mod = to_number(G.GAME.blind.chips * 4),\n\t\t\t\t\tmessage = localize(\"k_crv_overscore\"),\n\t\t\t\t\tcolour = G.C.MULT,\n\t\t\t\t}\n\t\t\tend\n\t\telseif context.joker_main and not context.blueprint and not context.repetition then\n\t\t\tlocal cc = (pseudorandom_element(chances, pseudoseed(\"btls\")))\n\t\t\tif cc == 1 then\n\t\t\t\treturn {\n\t\t\t\t\tchip_mod = G.GAME.blind.chips * 4,\n\t\t\t\t\tmessage = localize(\"k_crv_overscore\"),\n\t\t\t\t\tcolour = G.C.MULT,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "psy",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 1
      },
      "raw": "key = \"psy\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 6,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 22,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.cardarea == G.jokers\n\t\t\tand context.joker_main\n\t\t\tand G.GAME.current_round.hands_left == 2\n\t\t\tand G.GAME.current_round.discards_left == 2\n\t\tthen\n\t\t\tif #context.full_hand == 2 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 22
        }
      },
      "ability": {
        "extra": {
          "xmult": 22
        }
      },
      "vars": [
        22
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mj4",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 2
      },
      "raw": "key = \"mj4\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 6,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4.4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and next(context.poker_hands[\"Four of a Kind\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 4.4
        }
      },
      "ability": {
        "extra": {
          "xmult": 4.4
        }
      },
      "vars": [
        4.4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tp3",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 3
      },
      "raw": "key = \"tp3\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 6,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3.3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and next(context.poker_hands[\"Three of a Kind\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 3.3
        }
      },
      "ability": {
        "extra": {
          "xmult": 3.3
        }
      },
      "vars": [
        3.3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ml",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 5
      },
      "raw": "key = \"ml\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 5,\n\t\t\tdcard = \"N/A\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.dcard },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.repetition and not context.blueprint then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= self then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #jokers > 1 then\n\t\t\t\tif not context.blueprint then\n\t\t\t\t\tlocal chosen_joker = pseudorandom_element(jokers, pseudoseed(\"ml\"))\n\t\t\t\t\tchosen_joker:set_debuff(true)\n\t\t\t\t\tif context.end_of_round and context.main_eval then\n\t\t\t\t\t\tchosen_joker:set_debuff(false)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 5,
          "dcard": "N/A"
        }
      },
      "ability": {
        "extra": {
          "xmult": 5,
          "dcard": "N/A"
        }
      },
      "vars": [
        5,
        "N/A"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vji",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 5
      },
      "raw": "key = \"vji\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\tmgain = 0.1,\n\t\t\tlimit = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.mgain, card.ability.extra.limit },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.discard and not context.blueprint and not (card.ability.extra.limit >= 10) then\n\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.mgain\n\t\t\tcard.ability.extra.limit = card.ability.extra.limit + 1\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\tcolour = G.C.MULT,\n\t\t\t}\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.main_eval then\n\t\t\tcard.ability.extra.limit = 0\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "mgain": 0.1,
          "limit": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "mgain": 0.1,
          "limit": 0
        }
      },
      "vars": [
        1,
        0.1,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dont",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 5
      },
      "raw": "key = \"dont\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and not context.blueprint and not context.repetition and not context.individual then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif\n\t\t\t\tG.jokers.cards[rr + 1] == nil\n\t\t\t\tand G.GAME.talisman == 1\n\t\t\t\tand pseudorandom(\"dont\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\tthen\n\t\t\t\treturn {\n\t\t\t\t\tchip_mod = to_number(G.GAME.blind.chips * 2),\n\t\t\t\t\tmessage = localize(\"k_crv_double\"),\n\t\t\t\t}\n\t\t\telseif G.jokers.cards[rr + 1] == nil and G.GAME.talisman == 1 then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = to_number(G.GAME.blind.chips * 0),\n\t\t\t\t\tmessage = localize(\"k_crv_nothing\"),\n\t\t\t\t}\n\t\t\telseif\n\t\t\t\tG.jokers.cards[rr + 1] == nil\n\t\t\t\tand pseudorandom(\"dont\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\t\tthen\n\t\t\t\treturn {\n\t\t\t\t\tchip_mod = G.GAME.blind.chips * 2,\n\t\t\t\t\tmessage = localize(\"k_crv_double\"),\n\t\t\t\t}\n\t\t\telseif G.jokers.cards[rr + 1] == nil then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = G.GAME.blind.chips * 0,\n\t\t\t\t\tmessage = localize(\"k_crv_nothing\"),\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "odds": 2
        }
      },
      "vars": [
        2,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "inga",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 5
      },
      "raw": "key = \"inga\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 4,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tone = \"Not Active Yet\",\n\t\t\ttwo = \"Not Active Yet\",\n\t\t\tthree = \"Not Active Yet\",\n\t\t\tfour = \"Not Active Yet\",\n\t\t\tfive = \"Not Active Yet\",\n\t\t\tquest = 0,\n\t\t\tquesta = 0,\n\t\t\tquestb = \"Not set yet\",\n\t\t\txmult = 2,\n\t\t\txchips = 4,\n\t\t\todds = 4,\n\t\t\tcounter = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.one,\n\t\t\t\tcard.ability.extra.two,\n\t\t\t\tcard.ability.extra.three,\n\t\t\t\tcard.ability.extra.four,\n\t\t\t\tcard.ability.extra.five,\n\t\t\t\tcard.ability.extra.quest,\n\t\t\t\tcard.ability.extra.questa,\n\t\t\t\tcard.ability.extra.questb,\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\tcard.ability.extra.xchips,\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.counter,\n\t\t\t},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and card.ability.extra.questa == 0 then\n\t\t\tcard.ability.extra.counter = card.ability.extra.counter + 1\n\t\t\tif card.ability.extra.counter == 1 then\n\t\t\t\tcard.ability.extra.questa = 1\n\t\t\t\tcard.ability.extra.questb = \"Play a Full House\"\n\t\t\telseif card.ability.extra.counter == 2 then\n\t\t\t\tcard.ability.extra.questa = 2\n\t\t\t\tcard.ability.extra.questb = \"Use an uranus card\"\n\t\t\telseif card.ability.extra.counter == 3 then\n\t\t\t\tcard.ability.extra.questa = 3\n\t\t\t\tcard.ability.extra.questb = \"Use a strength tarot card\"\n\t\t\telseif card.ability.extra.counter == 4 then\n\t\t\t\tcard.ability.extra.questa = 4\n\t\t\t\tcard.ability.extra.questb = \"Score a stone card\"\n\t\t\telseif card.ability.extra.counter == 5 then\n\t\t\t\tcard.ability.extra.questa = 5\n\t\t\t\tcard.ability.extra.questb = \"Use blueprint or brainstorm to copy this joker once\"\n\t\t\tend\n\t\tend\n\t\tif context.joker_main and next(context.poker_hands[\"Full House\"]) then\n\t\t\tif card.ability.extra.questa == 1 then\n\t\t\t\tcard.ability.extra.quest = card.ability.extra.quest + 1\n\t\t\t\tcard.ability.extra.one = \"Active\"\n\t\t\t\tcard.ability.extra.questa = 0\n\t\t\tend\n\t\tend\n\t\tif context.joker_main and context.blueprint then\n\t\t\tif card.ability.extra.questa == 5 then\n\t\t\t\tcard.ability.extra.questb = \"No more quests.\"\n\t\t\t\tcard.ability.extra.five = \"Applied\"\n\t\t\t\tcard.ability.extra.questa = 999\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult * 2\n\t\t\t\tcard.ability.extra.xchips = card.ability.extra.xchips * 2\n\t\t\tend\n\t\tend\n\t\tif context.using_consumeable and context.consumeable.config.center.key == \"c_strength\" then\n\t\t\tif card.ability.extra.questa == 3 then\n\t\t\t\tcard.ability.extra.quest = card.ability.extra.quest + 1\n\t\t\t\tcard.ability.extra.three = \"Active\"\n\t\t\t\tcard.ability.extra.questa = 0\n\t\t\tend\n\t\tend\n\n\t\tif context.individual and card.ability.extra.questa == 4 then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif context.other_card.ability.effect == \"Stone Card\" then\n\t\t\t\t\t\tcard.ability.extra.quest = card.ability.extra.quest + 1\n\t\t\t\t\t\tcard.ability.extra.four = \"Active\"\n\t\t\t\t\t\tcard.ability.extra.questa = 0\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.using_consumeable and context.consumeable.config.center.key == \"c_uranus\" then\n\t\t\tif card.ability.extra.questa == 2 then\n\t\t\t\tcard.ability.extra.quest = card.ability.extra.quest + 1\n\t\t\t\tcard.ability.extra.two = \"Active\"\n\t\t\t\tcard.ability.extra.questa = 0\n\t\t\tend\n\t\tend\n\t\tif context.joker_main and card.ability.extra.quest == 1 then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\telseif context.joker_main and card.ability.extra.quest >= 2 then\n\t\t\treturn {\n\t\t\t\txchips = card.ability.extra.xchips,\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.individual and card.ability.extra.quest >= 3 then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif context.other_card.ability.effect == \"Base\" then\n\t\t\t\t\t\tcontext.other_card:set_ability(\n\t\t\t\t\t\t\tG.P_CENTERS[SMODS.poll_enhancement({\n\t\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t\t})],\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t)\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.individual and card.ability.extra.quest >= 4 then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus or 0\n\t\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus + 30\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "one": "Not Active Yet",
          "two": "Not Active Yet",
          "three": "Not Active Yet",
          "four": "Not Active Yet",
          "five": "Not Active Yet",
          "quest": 0,
          "questa": 0,
          "questb": "Not set yet",
          "xmult": 2,
          "xchips": 4,
          "odds": 4,
          "counter": 0
        }
      },
      "ability": {
        "extra": {
          "one": "Not Active Yet",
          "two": "Not Active Yet",
          "three": "Not Active Yet",
          "four": "Not Active Yet",
          "five": "Not Active Yet",
          "quest": 0,
          "questa": 0,
          "questb": "Not set yet",
          "xmult": 2,
          "xchips": 4,
          "odds": 4,
          "counter": 0
        }
      },
      "vars": [
        "Not Active Yet",
        "Not Active Yet",
        "Not Active Yet",
        "Not Active Yet",
        "Not Active Yet",
        0,
        0,
        "Not set yet",
        2,
        4,
        4,
        1,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tgm",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 5
      },
      "raw": "key = \"tgm\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tcounter = 0,\n\t\t\txmult = 1.5,\n\t\t\txmultlg = 0.5,\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.xmult,\n\t\t\t\tcard.ability.extra.xmultlg,\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand card.ability.extra.xmult < 5\n\t\tthen\n\t\t\tif pseudorandom(\"tgm\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultlg\n\t\t\telse\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult - card.ability.extra.xmultlg\n\t\t\tend\n\t\tend\n\t\tif card.ability.extra.xmult <= 0 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tplay_sound(\"tarot1\")\n\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_crv_dept\"),\n\t\t\t\tdelay(0.6),\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "counter": 0,
          "xmult": 1.5,
          "xmultlg": 0.5,
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "counter": 0,
          "xmult": 1.5,
          "xmultlg": 0.5,
          "odds": 2
        }
      },
      "vars": [
        1.5,
        0.5,
        2,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hteg",
      "atlas": "mm",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"hteg\",\n\tconfig = {\n\t\textra = {\n\t\t\tstages = 0,\n\t\t},\n\t},\n\n\trarity = 3,\n\tatlas = \"mm\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stages },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_crv_jhv\") >= 1)\n\t\tthen\n\t\t\tcard.ability.extra.stages = card.ability.extra.stages + 1\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand card.ability.extra.stages >= 3\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.3,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal new_card = create_card(\"Jhorah,Hatchling\", G.jokers, nil, nil, nil, nil, \"j_crv_jhv\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\n\t\tif context.joker_main and not context.blueprint then\n\t\t\treturn {\n\t\t\t\tmessage = \"!\",\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "stages": 0
        }
      },
      "ability": {
        "extra": {
          "stages": 0
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jhv",
      "atlas": "mm",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"jhv\",\n\tconfig = {\n\t\textra = {\n\t\t\tstages = 0,\n\t\t\tstg1b = 30,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"mm\",\n\tno_collection = true,\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stages, card.ability.extra.stg1b },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.stages = card.ability.extra.stages + 1\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand card.ability.extra.stages >= 3\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_crv_jbe\") >= 1)\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.3,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal new_card = create_card(\"Jhorah,Beasty\", G.jokers, nil, nil, nil, nil, \"j_crv_jbe\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.stg1b,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "stages": 0,
          "stg1b": 30
        }
      },
      "ability": {
        "extra": {
          "stages": 0,
          "stg1b": 30
        }
      },
      "vars": [
        0,
        30
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jbe",
      "atlas": "mm",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"jbe\",\n\tconfig = {\n\t\textra = {\n\t\t\tstages = 0,\n\t\t\tstg2b = 60,\n\t\t\tstg2b2 = 1.5,\n\t\t},\n\t},\n\n\trarity = 3,\n\tatlas = \"mm\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stages, card.ability.extra.stg2b, card.ability.extra.stg2b2 },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.stages = card.ability.extra.stages + 1\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand card.ability.extra.stages >= 3\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_crv_jma\") >= 1)\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.3,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal new_card = create_card(\"Jhorah,Matured\", G.jokers, nil, nil, nil, nil, \"j_crv_jma\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.stg2b,\n\t\t\t\tx_mult = card.ability.extra.stg2b2,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "stages": 0,
          "stg2b": 60,
          "stg2b2": 1.5
        }
      },
      "ability": {
        "extra": {
          "stages": 0,
          "stg2b": 60,
          "stg2b2": 1.5
        }
      },
      "vars": [
        0,
        60,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jma",
      "atlas": "mm",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"jma\",\n\tconfig = {\n\t\textra = {\n\t\t\tstages = 0,\n\t\t\tstg3b = 90,\n\t\t\tstg3b2 = 2,\n\t\t},\n\t},\n\n\trarity = 3,\n\tatlas = \"mm\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stages, card.ability.extra.stg3b, card.ability.extra.stg3b2 },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.stages = card.ability.extra.stages + 1\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand card.ability.extra.stages >= 3\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_crv_jad\") >= 1)\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.3,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal new_card = create_card(\"Jhorah,Adult\", G.jokers, nil, nil, nil, nil, \"j_crv_jad\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.stg3b,\n\t\t\t\tx_mult = card.ability.extra.stg3b2,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "stages": 0,
          "stg3b": 90,
          "stg3b2": 2
        }
      },
      "ability": {
        "extra": {
          "stages": 0,
          "stg3b": 90,
          "stg3b2": 2
        }
      },
      "vars": [
        0,
        90,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jad",
      "atlas": "mm",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = \"jad\",\n\tconfig = {\n\t\textra = {\n\t\t\tstages = 0,\n\t\t\tstg4b = 2,\n\t\t\tstg4b2 = 2.5,\n\t\t},\n\t},\n\n\trarity = 3,\n\tatlas = \"mm\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 4,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stages, card.ability.extra.stg4b, card.ability.extra.stg4b2 },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not context.repetition and not context.blueprint and not context.individual then\n\t\t\tcard.ability.extra.stages = card.ability.extra.stages + 1\n\t\tend\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand card.ability.extra.stages >= 3\n\t\t\tand not context.repetition\n\t\t\tand not context.blueprint\n\t\t\tand not context.individual\n\t\t\tand not (#SMODS.find_card(\"j_crv_jcbt\") >= 1)\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.3,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal new_card = create_card(\"Jhorah,Chained Beast\", G.jokers, nil, nil, nil, nil, \"j_crv_jcbt\")\n\t\t\tnew_card:add_to_deck()\n\t\t\tG.jokers:emplace(new_card)\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txchips = card.ability.extra.stg4b,\n\t\t\t\tx_mult = card.ability.extra.stg4b2,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "stages": 0,
          "stg4b": 2,
          "stg4b2": 2.5
        }
      },
      "ability": {
        "extra": {
          "stages": 0,
          "stg4b": 2,
          "stg4b2": 2.5
        }
      },
      "vars": [
        0,
        2,
        2.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jcbt",
      "atlas": "mm",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = \"jcbt\",\n\tconfig = {\n\t\textra = {\n\t\t\tstg5b = 4,\n\t\t\tstg5b2 = 3,\n\t\t\todds = 4,\n\t\t},\n\t},\n\n\trarity = 3,\n\tatlas = \"mm\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 0,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.stages,\n\t\t\t\tcard.ability.extra.stg5b,\n\t\t\t\tcard.ability.extra.stg5b2,\n\t\t\t\t(G.GAME.probabilities.normal or 1),\n\t\t\t\tcard.ability.extra.odds,\n\t\t\t},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif pseudorandom(\"jcbt\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tif context.individual then\n\t\t\t\tif context.cardarea == G.play then\n\t\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\t\tif context.other_card.ability.effect == \"Base\" then\n\t\t\t\t\t\t\tcontext.other_card:set_ability(\n\t\t\t\t\t\t\t\tG.P_CENTERS[SMODS.poll_enhancement({\n\t\t\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t\t\t})],\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txchips = card.ability.extra.stg5b,\n\t\t\t\tx_mult = card.ability.extra.stg5b2,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "stg5b": 4,
          "stg5b2": 3,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "stg5b": 4,
          "stg5b2": 3,
          "odds": 4
        }
      },
      "vars": [
        null,
        4,
        3,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimp",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 5
      },
      "raw": "key = \"jimp\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 6,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t\txmult2 = 1.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmult2 },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] == nil or G.jokers.cards[rr - 1] == nil then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmult2,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 3,
          "xmult2": 1.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 3,
          "xmult2": 1.5
        }
      },
      "vars": [
        3,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jarden",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = \"jarden\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 7,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmult2 = 0.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmult2 },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.selling_card and not context.repetition and not context.blueprint then\n\t\t\tcard.ability.extra.xmult = 1\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_reset\"),\n\t\t\t\tcolour = G.C.MULT,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmult2\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\tcolour = G.C.MULT,\n\t\t\t}\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmult2": 0.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmult2": 0.5
        }
      },
      "vars": [
        1,
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kit",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 1
      },
      "raw": "key = \"kit\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 7,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step then\n\t\t\tif context.cardarea then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"before\",\n\t\t\t\t\t\tdelay = 0.5,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tif v.base.id > 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\t\tassert(SMODS.modify_rank(v, -1))\n\t\t\t\t\t\t\telseif v.base.id < 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\t\tassert(SMODS.modify_rank(v, 1))\n\t\t\t\t\t\t\telseif v.base.id == 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 1,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kon",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "key = \"kon\",\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 25,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 2,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.individual\n\t\t\tand context.cardarea == G.play\n\t\t\tand context.other_card:get_id() >= 7\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus or 0\n\t\t\tcontext.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus + card.ability.extra.chips\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t}\n\t\telseif\n\t\t\tcontext.destroy_card\n\t\t\tand context.cardarea == G.play\n\t\t\tand context.destroy_card:get_id() < 7\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\treturn {\n\t\t\t\tremove = true,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 25
        }
      },
      "ability": {
        "extra": {
          "chips": 25
        }
      },
      "vars": [
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "onj",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 3
      },
      "raw": "key = \"onj\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\tmultg = 0.25,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 3,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_stone\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.multg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.before\n\t\t\tand context.cardarea\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\tthen\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v.ability.effect == \"Base\" then\n\t\t\t\t\tv:set_ability(\"m_stone\")\n\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\telseif v.ability.effect == \"Stone Card\" then\n\t\t\t\t\tv:set_ability(\"c_base\")\n\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.multg\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "multg": 0.25
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "multg": 0.25
        }
      },
      "vars": [
        1,
        0.25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rab",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 5
      },
      "raw": "key = \"rab\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1.50,\n\t\t\txmultgain = 0.50,\n\t\t\tstage = 0,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 5,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultgain, card.ability.extra.stage },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and G.GAME.blind.boss and context.main_eval and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] == nil or G.jokers.cards[rr - 1] == nil and context.main_eval then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\tdelay = 1,\n\t\t\t\t\tblockable = false,\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\t\tcard = nil\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_rain\"),\n\t\t\t\t\tmessage_card = card,\n\t\t\t\t}\n\t\t\telseif\n\t\t\t\tG.jokers.cards[rr + 1] ~= nil\n\t\t\t\tand G.jokers.cards[rr - 1] ~= nil\n\t\t\t\tand G.GAME.blind.boss\n\t\t\t\tand context.main_eval\n\t\t\tthen\n\t\t\t\tcard.ability.extra.stage = card.ability.extra.stage + 1\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultgain\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_crv_rain2\"),\n\t\t\t\t\tmessage_card = card,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif\n\t\t\tcard.ability.extra.stage >= 5\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 1,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tlocal rabs = pseudorandom_element(rabbits, pseudoseed(\"rab\"))\n\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\tcard:set_ability(rabs)\n\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = localize(\"k_evolve_crv\") })\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1.5,
          "xmultgain": 0.5,
          "stage": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.5,
          "xmultgain": 0.5,
          "stage": 0
        }
      },
      "vars": [
        1.5,
        0.5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rabf",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 6
      },
      "raw": "key = \"rabf\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4,\n\t\t\txmultf = 2,\n\t\t},\n\t},\n\trarity = \"crv_titan\",\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 6,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultf },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:is_face() then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.xmultf,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "xmult": 4,
          "xmultf": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 4,
          "xmultf": 2
        }
      },
      "vars": [
        4,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rabflush",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 6
      },
      "raw": "key = \"rabflush\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4,\n\t\t\txmultex = 6,\n\t\t},\n\t},\n\trarity = \"crv_titan\",\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 6,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultex },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and next(context.poker_hands[\"Flush\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmultex,\n\t\t\t}\n\t\telseif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "xmult": 4,
          "xmultex": 6
        }
      },
      "ability": {
        "extra": {
          "xmult": 4,
          "xmultex": 6
        }
      },
      "vars": [
        4,
        6
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rabhigh",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 6
      },
      "raw": "key = \"rabhigh\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4,\n\t\t\txmultex = 6,\n\t\t},\n\t},\n\trarity = \"crv_titan\",\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tno_collection = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 6,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultex },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and next(context.poker_hands[\"Full House\"]) then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmultex,\n\t\t\t}\n\t\telseif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "xmult": 4,
          "xmultex": 6
        }
      },
      "ability": {
        "extra": {
          "xmult": 4,
          "xmultex": 6
        }
      },
      "vars": [
        4,
        6
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "brj",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 6
      },
      "raw": "key = \"brj\",\n\tconfig = {\n\t\textra = {\n\t\t\tcardhp = 3,\n\t\t\tplayerhp = 3,\n\t\t\tmode = \"Joker\",\n\t\t\tturn = \"Player\",\n\t\t\todds2 = 3,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tno_collection = false,\n\tpos = {\n\t\tx = 5,\n\t\ty = 6,\n\t},\n\tcost = 10,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.cardhp, crv.playerhp, crv.mode, crv.turn, crv.odds2 },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\t\tand crv.turn == \"Player\"\n\t\tthen\n\t\t\tif crv.mode == \"Self\" and pseudorandom(\"brj\") >= 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, Go again!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Self\" and pseudorandom(\"brj\") < 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = 3\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\tcrv.playerhp = crv.playerhp - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Ouch!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" and pseudorandom(\"brj\") < 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = 3\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\tcrv.cardhp = crv.cardhp - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Hit!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" and pseudorandom(\"brj\") >= 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, Changing turns!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Self\" then\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, Go again!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" then\n\t\t\t\tcrv.turn = \"Enemy\"\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, Changing turns!\",\n\t\t\t\t}\n\t\t\tend\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\t\tand crv.turn == \"Joker\"\n\t\t\tand crv.odds2 > 1\n\t\tthen\n\t\t\tcrv.mode = pseudorandom_element(brjk2, pseudoseed(\"brj\"))\n\t\t\tif crv.mode == \"Self\" and pseudorandom(\"brj\") > 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Safe, your turn!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Self\" and pseudorandom(\"brj\") < 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = 3\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\tcrv.playerhp = crv.playerhp - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Ouch!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" and pseudorandom(\"brj\") < 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = 3\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\tcrv.cardhp = crv.cardhp - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Hit!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" and pseudorandom(\"brj\") > 1 / crv.odds2 then\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, waiting!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Self\" then\n\t\t\t\tcrv.turn = \"Player\"\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, your turn!\",\n\t\t\t\t}\n\t\t\telseif crv.mode == \"Joker\" then\n\t\t\t\tcrv.turn = \"Enemy\"\n\t\t\t\tcrv.odds2 = crv.odds2 - 1\n\t\t\t\tcrv.turn = \"Joker\"\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Miss, waiting!\",\n\t\t\t\t}\n\t\t\tend\n\t\telseif\n\t\t\tcontext.setting_blind\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\t\tand crv.turn == \"Joker\"\n\t\t\tand crv.odds2 == 1\n\t\tthen\n\t\t\tcrv.odds2 = 3\n\t\t\tcrv.turn = \"Player\"\n\t\t\tcrv.playerhp = crv.playerhp - 1\n\t\t\treturn {\n\t\t\t\tmessage = \"Hit!\",\n\t\t\t}\n\t\tend\n\t\tif crv.playerhp == 0 then\n\t\t\tG.STATE = G.STATES.GAME_OVER\n\t\t\tG.STATE_COMPLETE = false\n\t\tend\n\t\tif\n\t\t\tcrv.cardhp == 0\n\t\t\tand not context.blueprint\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand context.first_hand_drawn\n\t\tthen\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"immediate\",\n\t\t\t\tdelay = 1,\n\t\t\t\tblockable = false,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.jokers:remove_card(card)\n\t\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tcard = nil\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tlegendary = true,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tlegendary = true,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "cardhp": 3,
          "playerhp": 3,
          "mode": "Joker",
          "turn": "Player",
          "odds2": 3
        }
      },
      "ability": {
        "extra": {
          "cardhp": 3,
          "playerhp": 3,
          "mode": "Joker",
          "turn": "Player",
          "odds2": 3
        }
      },
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimshow",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 6
      },
      "raw": "key = \"jimshow\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 6,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 0.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\tcrv.xmult = crv.xmult + crv.xmultg\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.5
        }
      },
      "vars": [
        1,
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rein",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 6
      },
      "raw": "key = \"rein\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 7,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 2,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult * G.GAME.reincarnation, G.GAME.reincarnation, crv.odds, G.GAME.probabilities.normal },\n\t\t}\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tG.GAME.reincarnation = G.GAME.reincarnation + 1\n\t\tif pseudorandom(\"rein\") < G.GAME.probabilities.normal / crv.odds then\n\t\t\tadd_tag(Tag(\"tag_crv_reintag\"))\n\t\tend\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = crv.xmult * G.GAME.reincarnation,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 2,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "xmult": 2,
          "odds": 4
        }
      },
      "vars": [
        null,
        null,
        null,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "clicker",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 7
      },
      "raw": "key = \"clicker\",\n\tconfig = {\n\t\textra = {\n\t\t\tclicks = 0,\n\t\t\tchips = 0,\n\t\t\tchipgain = 0.1,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tno_collection = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 7,\n\t},\n\tcost = 10,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.clicks, crv.chips, crv.chipgain },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = crv.chips,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "clicks": 0,
          "chips": 0,
          "chipgain": 0.1
        }
      },
      "ability": {
        "extra": {
          "clicks": 0,
          "chips": 0,
          "chipgain": 0.1
        }
      },
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hand",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 7
      },
      "raw": "key = \"hand\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.setting_blind then\n\t\t\tlocal my_pos = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\tmy_pos = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif my_pos and G.jokers.cards[my_pos + 1] and not G.jokers.cards[my_pos + 1].getting_sliced then\n\t\t\t\tlocal sliced_card = G.jokers.cards[my_pos + 1]\n\t\t\t\tsliced_card.getting_sliced = true\n\t\t\t\tG.GAME.joker_buffer = G.GAME.joker_buffer - 1\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tG.GAME.joker_buffer = 0\n\t\t\t\t\t\tcard:juice_up(0.8, 0.8)\n\t\t\t\t\t\tsliced_card:start_dissolve({ HEX(\"57ecab\") }, nil, 0.1)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "giftbox",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 7
      },
      "raw": "key = \"giftbox\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ttimer = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.timer },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tcrv.timer = crv.timer + 1\n\t\tend\n\t\tif context.selling_self then\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"Joker\",\n\t\t\t\tarea = G.jokers,\n\t\t\t\trarity = 0,\n\t\t\t\tstickers = { \"eternal\" },\n\t\t\t})\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"Joker\",\n\t\t\t\tarea = G.jokers,\n\t\t\t\tlegendary = true,\n\t\t\t\tstickers = { \"eternal\" },\n\t\t\t})\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "timer": 0
        }
      },
      "ability": {
        "extra": {
          "timer": 0
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "henchman",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 7
      },
      "raw": "key = \"henchman\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 6,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.mult },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.GAME.henchmans = G.GAME.henchmans + 1\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.GAME.henchmans = G.GAME.henchmans - 1\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = crv.mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 6
        }
      },
      "ability": {
        "extra": {
          "mult": 6
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jjoker",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 7
      },
      "raw": "key = \"jjoker\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\trarity = 2,\n\tpos = {\n\t\tx = 4,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.mult, G.GAME.henchmans },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main and G.GAME.henchmans > 0 then\n\t\t\treturn {\n\t\t\t\txmult = crv.mult * G.GAME.henchmans,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 2
        }
      },
      "ability": {
        "extra": {
          "mult": 2
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimbojam",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 7
      },
      "raw": "key = \"jimbojam\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\trarity = 3,\n\tpos = {\n\t\tx = 5,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 1,\n\t\t\tchipsg = 0.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips, card.ability.extra.chipsg },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\tcrv.chips = crv.chips + crv.chipsg\n\t\t\treturn {\n\t\t\t\tx_chips = card.ability.extra.chips,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 1,
          "chipsg": 0.5
        }
      },
      "ability": {
        "extra": {
          "chips": 1,
          "chipsg": 0.5
        }
      },
      "vars": [
        1,
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stockmarket",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 7
      },
      "raw": "key = \"stockmarket\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\trarity = 2,\n\tpos = {\n\t\tx = 6,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmoneymult = 2,\n\t\t\tmoney = 1,\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.moneymult, crv.money, G.GAME.probabilities.normal, crv.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tif pseudorandom(\"stockmarket\") < G.GAME.probabilities.normal / crv.odds then\n\t\t\t\tcrv.money = 1\n\t\t\telse\n\t\t\t\tcrv.money = crv.money * crv.moneymult\n\t\t\tend\n\t\tend\n\tend,\n\tcalc_dollar_bonus = function(self, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn crv.money\n\tend,",
      "config": {
        "extra": {
          "moneymult": 2,
          "money": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "moneymult": 2,
          "money": 1,
          "odds": 4
        }
      },
      "vars": [
        null,
        null,
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rekoj",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = \"rekoj\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\trarity = 1,\n\tpos = {\n\t\tx = 8,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 40,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = crv.chips,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 40
        }
      },
      "ability": {
        "extra": {
          "chips": 40
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "collector",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 1
      },
      "raw": "key = \"collector\",\n\tatlas = \"Jokers2\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\trarity = 1,\n\tpos = {\n\t\tx = 8,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 0,\n\t\t\tmultg = 0.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.mult, crv.multg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.buying_card and not context.blueprint and not context.blueprint then\n\t\t\tcrv.mult = crv.mult + crv.multg\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = crv.mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 0,
          "multg": 0.5
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "multg": 0.5
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "loveletter",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 2
      },
      "raw": "key = \"loveletter\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 8,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmultg = 1,\n\t\t\tmult = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.multg, card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.individual\n\t\t\tand context.cardarea == G.play\n\t\t\tand context.other_card:is_suit(\"Hearts\", true)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.mult = card.ability.extra.mult + card.ability.extra.multg\n\t\tend\n\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "multg": 1,
          "mult": 0
        }
      },
      "ability": {
        "extra": {
          "multg": 1,
          "mult": 0
        }
      },
      "vars": [
        1,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kq",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 3
      },
      "raw": "key = \"kq\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 8,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1.5,\n\t\t\todds = 100,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult * stickercheck() + 1, card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] ~= nil then\n\t\t\t\tSMODS.Stickers[\"perishable\"]:apply(G.jokers.cards[rr + 1], true)\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult * stickercheck() + 1,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tif pseudorandom(\"kq\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\tcard:set_ability(\"j_crv_kqb\")\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1.5,
          "odds": 100
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.5,
          "odds": 100
        }
      },
      "vars": [
        null,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ccat",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 4
      },
      "raw": "key = \"ccat\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 8,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tammount = 3,\n\t\t\trankdis = \"N/A\",\n\t\t\tsuitdis = \"N/A\",\n\t\t\trank = \"N/A\",\n\t\t\tsuit = \"N/A\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.ammount, card.ability.extra.rankdis, card.ability.extra.suitdis },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif\n\t\t\tcontext.before\n\t\t\tand context.cardarea\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tif card.ability.extra.rank == \"N/A\" then\n\t\t\t\tcard.ability.extra.rank = G.play.cards[1].base.id\n\t\t\t\tlocal _rank_suffix = card.ability.extra.rank\n\t\t\t\tif _rank_suffix < 10 then\n\t\t\t\t\t_rank_suffix = tostring(_rank_suffix)\n\t\t\t\telseif _rank_suffix == 10 then\n\t\t\t\t\t_rank_suffix = \"10\"\n\t\t\t\telseif _rank_suffix == 11 then\n\t\t\t\t\t_rank_suffix = \"Jack\"\n\t\t\t\telseif _rank_suffix == 12 then\n\t\t\t\t\t_rank_suffix = \"Queen\"\n\t\t\t\telseif _rank_suffix == 13 then\n\t\t\t\t\t_rank_suffix = \"King\"\n\t\t\t\telseif _rank_suffix == 14 then\n\t\t\t\t\t_rank_suffix = \"Ace\"\n\t\t\t\tend\n\t\t\t\tcrv.rankdis = _rank_suffix\n\t\t\telseif card.ability.extra.suit == \"N/A\" then\n\t\t\t\tcard.ability.extra.suit = G.play.cards[1].base.suit\n\t\t\t\tlocal _suit_suffix = tostring(card.ability.extra.suit)\n\t\t\t\tcrv.suitdis = _suit_suffix\n\t\t\telseif card.ability.extra.rank ~= \"N/A\" and card.ability.extra.suit ~= \"N/A\" then\n\t\t\t\tlocal rank_suffix = card.ability.extra.rank\n\t\t\t\tif rank_suffix < 10 then\n\t\t\t\t\trank_suffix = tostring(rank_suffix)\n\t\t\t\telseif rank_suffix == 10 then\n\t\t\t\t\trank_suffix = \"10\"\n\t\t\t\telseif rank_suffix == 11 then\n\t\t\t\t\trank_suffix = \"Jack\"\n\t\t\t\telseif rank_suffix == 12 then\n\t\t\t\t\trank_suffix = \"Queen\"\n\t\t\t\telseif rank_suffix == 13 then\n\t\t\t\t\trank_suffix = \"King\"\n\t\t\t\telseif rank_suffix == 14 then\n\t\t\t\t\trank_suffix = \"Ace\"\n\t\t\t\tend\n\t\t\t\tlocal suit_suffix = tostring(card.ability.extra.suit)\n\t\t\t\tfor i = 1, 3 do\n\t\t\t\t\tlocal acard = create_playing_card({\n\t\t\t\t\t\tfront = G.P_CARDS[card.ability.extra.suit .. \"_\" .. card.ability.extra.rank],\n\t\t\t\t\t\tcenter = G.P_CENTERS.c_base,\n\t\t\t\t\t}, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n\t\t\t\t\tSMODS.change_base(acard, suit_suffix, rank_suffix)\n\t\t\t\tend\n\t\t\t\tcard.ability.extra.rank = \"N/A\"\n\t\t\t\tcard.ability.extra.suit = \"N/A\"\n\t\t\t\tcrv.rankdis = \"N/A\"\n\t\t\t\tcrv.suitdis = \"N/A\"\n\t\t\tend\n\t\tend\n\t\tif card.ability.extra.rank ~= \"N/A\" and card.ability.extra.suit ~= \"N/A\" then\n\t\t\tlocal eval = function()\n\t\t\t\treturn card.ability.extra.rank ~= \"N/A\" and card.ability.extra.suit ~= \"N/A\"\n\t\t\tend\n\t\t\tjuice_card_until(card, eval, true)\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "ammount": 3,
          "rankdis": "N/A",
          "suitdis": "N/A",
          "rank": "N/A",
          "suit": "N/A"
        }
      },
      "ability": {
        "extra": {
          "ammount": 3,
          "rankdis": "N/A",
          "suitdis": "N/A",
          "rank": "N/A",
          "suit": "N/A"
        }
      },
      "vars": [
        3,
        "N/A",
        "N/A"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mcycle",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 5
      },
      "raw": "key = \"mcycle\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 8,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tplus = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.plus },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.individual and not context.blueprint then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tcontext.other_card.ability.perma_mult = context.other_card.ability.perma_mult or 0\n\t\t\t\tcontext.other_card.ability.perma_mult = context.other_card.ability.perma_mult + crv.plus\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\t\tcolour = G.C.MULT,\n\t\t\t\t\tmessage_card = context.other_card,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "plus": 1
        }
      },
      "ability": {
        "extra": {
          "plus": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "safe",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 6
      },
      "raw": "key = \"safe\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 8,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tunlocked = false,\n\t\t\tuu = \"Locked\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.uu, crv.d1, crv.d2, crv.d3, crv.d4, crv.unlocked },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tlocal digitone = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\tlocal digittwo = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\tlocal digitthree = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\tlocal digitfour = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\tcrv.d1 = digitone\n\t\tcrv.d2 = digittwo\n\t\tcrv.d3 = digitthree\n\t\tcrv.d4 = digitfour\n\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = \"Password Set!\" })\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint and G.GAME.blind.boss then\n\t\t\tlocal digitone = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\t\tlocal digittwo = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\t\tlocal digitthree = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\t\tlocal digitfour = pseudorandom_element(numbers, pseudoseed(\"safe\"))\n\t\t\tcrv.d1 = digitone\n\t\t\tcrv.d2 = digittwo\n\t\t\tcrv.d3 = digitthree\n\t\t\tcrv.d4 = digitfour\n\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = \"Reset!\" })\n\t\tend\n\t\tif\n\t\t\tcontext.cardarea == G.play\n\t\t\tand #context.full_hand >= 4\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\t\tand crv.unlocked == false\n\t\tthen\n\t\t\tif\n\t\t\t\tG.play.cards[1].base.id == crv.d1\n\t\t\t\tand G.play.cards[2].base.id == crv.d2\n\t\t\t\tand G.play.cards[3].base.id == crv.d3\n\t\t\t\tand G.play.cards[4].base.id == crv.d4\n\t\t\tthen\n\t\t\t\tcrv.unlocked = true\n\t\t\t\tcrv.uu = \"Unlocked\"\n\t\t\tend\n\t\tend\n\tend,\n\tcalc_dollar_bonus = function(self, card)\n\t\tlocal crv = card.ability.extra\n\t\tif crv.unlocked == true then\n\t\t\treturn 25\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "unlocked": false,
          "uu": "Locked"
        }
      },
      "ability": {
        "extra": {
          "unlocked": false,
          "uu": "Locked"
        }
      },
      "vars": [
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "banker",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 7
      },
      "raw": "key = \"banker\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 0,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 8,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\towe = 5,\n\t\t\towe_limit = 100,\n\t\t\tcurrent_dept = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.owe_limit, crv.owe, crv.current_dept },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tcard.ability.extra_value = -100 - card.sell_cost\n\t\tcard:set_cost()\n\t\tease_dollars(crv.owe_limit)\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.game_over == false and context.main_eval and not context.blueprint then\n\t\t\tcard.ability.extra_value = card.ability.extra_value + crv.owe\n\t\t\tcrv.current_dept = crv.current_dept + crv.owe\n\t\t\tcard:set_cost()\n\t\t\tease_dollars(-crv.owe)\n\t\t\tcard_eval_status_text(card, \"dollars\", -crv.owe)\n\t\t\tif crv.current_dept >= crv.owe_limit then\n\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "owe": 5,
          "owe_limit": 100,
          "current_dept": 0
        }
      },
      "ability": {
        "extra": {
          "owe": 5,
          "owe_limit": 100,
          "current_dept": 0
        }
      },
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "crem",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 8
      },
      "raw": "key = \"crem\",\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t\txmultadd = 0.5,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 8,\n\t},\n\tcost = 7,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmultadd + 1, (G.GAME.probabilities.normal or 1), card.ability.extra.odds },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play and not context.repetition and not context.blueprint then\n\t\t\tcontext.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult or 0\n\t\t\tcontext.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult\n\t\t\t\t+ card.ability.extra.xmultadd\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t\tcolour = G.C.MULT,\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.destroy_card\n\t\t\tand context.cardarea == G.play\n\t\t\tand pseudorandom(\"crem\") < G.GAME.probabilities.normal / card.ability.extra.odds\n\t\tthen\n\t\t\treturn {\n\t\t\t\tremove = true,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4,
          "xmultadd": 0.5
        }
      },
      "ability": {
        "extra": {
          "odds": 4,
          "xmultadd": 0.5
        }
      },
      "vars": [
        null,
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bee",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 8
      },
      "raw": "key = \"bee\",\n\tatlas = \"Jokers2\",\n\trarity = 1,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\ta = 1,\n\t\t\tdollars = 5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_crv_honey\n\t\treturn {\n\t\t\tvars = { card.ability.extra.dollars },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif SMODS.has_enhancement(v, \"m_crv_honey\") then\n\t\t\t\t\t\tif context.other_card.ability.effect == \"Base\" and card.ability.extra.a == 1 then\n\t\t\t\t\t\t\tcontext.other_card:set_ability(G.P_CENTERS[\"m_crv_honey\"])\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tdollars = card.ability.extra.dollars,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "a": 1,
          "dollars": 5
        }
      },
      "ability": {
        "extra": {
          "a": 1,
          "dollars": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "oldjimbo",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 8
      },
      "raw": "key = \"oldjimbo\",\n\tatlas = \"Jokers2\",\n\trarity = 4,\n\tcost = 20,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 8,\n\t},\n\tsoul_pos = {\n\t\tx = 4,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.dollars },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif card.area then\n\t\t\tSMODS.Stickers[\"eternal\"]:apply(card, true)\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tSMODS.add_card({\n\t\t\tset = \"Joker\",\n\t\t\tarea = G.jokers,\n\t\t\tkey = \"j_crv_adamap\",\n\t\t})\n\t\tSMODS.Stickers[\"eternal\"]:apply(card, true)\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "adamap",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 8
      },
      "raw": "key = \"adamap\",\n\tatlas = \"Jokers2\",\n\trarity = 4,\n\tcost = 0,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 5,\n\t\ty = 8,\n\t},\n\tsoul_pos = {\n\t\tx = 6,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn false\n\tend,",
      "config": {
        "extra": {
          "xmult": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 3
        }
      },
      "vars": [
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "fuj",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 8
      },
      "raw": "key = \"fuj\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 8.01,\n\t\t\tcheck = 0,\n\t\t\tcheck1 = 0,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 8,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v:get_id() == 13 then\n\t\t\t\t\tcrv.check = 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v:get_id() == 11 then\n\t\t\t\t\tcrv.check1 = 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif crv.check >= 1 and crv.check1 >= 1 then\n\t\t\t\treturn {\n\t\t\t\t\txmult = crv.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.final_scoring_step then\n\t\t\tcrv.check = 0\n\t\t\tcrv.check1 = 0\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 8.01,
          "check": 0,
          "check1": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 8.01,
          "check": 0,
          "check1": 0
        }
      },
      "vars": [
        8.01
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tab",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 8
      },
      "raw": "key = \"tab\",\n\tconfig = {\n\t\textra = {\n\t\t\tstored = 0,\n\t\t},\n\t},\n\trarity = 2,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 8,\n\t},\n\tcost = 6,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.stored },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + 1\n\t\tcalculate_reroll_cost(true)\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tease_dollars(-crv.stored)\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.reroll_shop and not context.blueprint and not context.repetition then\n\t\t\tG.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + 1\n\t\t\tcalculate_reroll_cost(true)\n\t\t\tcrv.stored = crv.stored + 5\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "stored": 0
        }
      },
      "ability": {
        "extra": {
          "stored": 0
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rkn",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 9
      },
      "raw": "key = \"rkn\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 5,\n\t\t\tdiscard = 4,\n\t\t\tcheck = \"NXD\",\n\t\t\txmult2 = 5,\n\t\t\txmultg = 2,\n\t\t\tcardc = 3,\n\t\t},\n\t},\n\trarity = 4,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = true,\n\tdiscovered = false,\n\tpos = {\n\t\tx = 0,\n\t\ty = 9,\n\t},\n\tsoul_pos = {\n\t\tx = 1,\n\t\ty = 9,\n\t},\n\tcost = 20,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult, crv.discard, crv.xmult2, crv.xmultg, crv.cardc },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main and (#SMODS.find_card(\"j_chicot\") > 0) and G.GAME.blind.boss then\n\t\t\treturn {\n\t\t\t\tx_mult = crv.xmult,\n\t\t\t}\n\t\telseif context.joker_main then\n\t\t\tif\n\t\t\t\t(#SMODS.find_card(\"j_chicot\") > 0)\n\t\t\t\tor (#SMODS.find_card(\"j_perkeo\") > 0)\n\t\t\t\tor (#SMODS.find_card(\"j_triboulet\") > 0)\n\t\t\t\tor (#SMODS.find_card(\"j_yorick\") > 0)\n\t\t\t\tor (#SMODS.find_card(\"j_caino\") > 0)\n\t\t\tthen\n\t\t\t\treturn\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = crv.xmult2,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.destroy_card and context.cardarea == G.play then\n\t\t\tif #SMODS.find_card(\"j_caino\") > 0 then\n\t\t\t\tif context.destroy_card:is_face() then\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = \"For Canio!\",\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.ending_shop and (#SMODS.find_card(\"j_perkeo\") > 0) then\n\t\t\tif G.consumeables.cards[1] then\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tlocal card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed(\"rkn\")), nil)\n\t\t\t\t\t\tcard:set_edition({ negative = true }, true)\n\t\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = \"For Perkeo!\" })\n\t\t\tend\n\t\t\treturn\n\t\tend\n\t\tif context.setting_blind and (#SMODS.find_card(\"j_triboulet\") > 0) then\n\t\t\tlocal faces = { \"Queen\", \"King\" }\n\t\t\tlocal suits = pseudorandom_element(SMODS.Suits, pseudoseed(\"rkn\"))\n\t\t\tlocal suit = tostring(suits)\n\t\t\tlocal rank = pseudorandom_element(faces, pseudoseed(\"rkn\"))\n\t\t\tfor i = 1, crv.cardc do\n\t\t\t\tlocal acard = create_playing_card({\n\t\t\t\t\tfront = G.P_CARDS[suit .. \"_\" .. rank],\n\t\t\t\t\tcenter = G.P_CENTERS.c_base,\n\t\t\t\t}, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n\t\t\t\tSMODS.change_base(acard, nil, rank)\n\t\t\tend\n\t\tend\n\t\tif context.setting_blind and (#SMODS.find_card(\"j_yorick\") > 0) then\n\t\t\tease_discard(card.ability.extra.discard)\n\t\t\tcrv.check = \"EXD\"\n\t\tend\n\t\tif context.end_of_round and G.GAME.blind.boss and context.main_eval and (#SMODS.find_card(\"j_chicot\") > 0) then\n\t\t\tcrv.xmult = crv.xmult + crv.xmultg\n\t\t\tif crv.check == \"EXD\" then\n\t\t\t\tcrv.check = \"NXD\"\n\t\t\t\tG.GAME.round_resets.discards = G.GAME.round_resets.discards\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Upgrade!\",\n\t\t\t\t}\n\t\t\tend\n\t\telseif context.end_of_round and context.main_eval then\n\t\t\tif crv.check == \"EXD\" then\n\t\t\t\tcrv.check = \"NXD\"\n\t\t\t\tG.GAME.round_resets.discards = G.GAME.round_resets.discards\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\tif\n\t\t\t(#SMODS.find_card(\"j_chicot\") > 0)\n\t\t\tor (#SMODS.find_card(\"j_perkeo\") > 0)\n\t\t\tor (#SMODS.find_card(\"j_triboulet\") > 0)\n\t\t\tor (#SMODS.find_card(\"j_yorick\") > 0)\n\t\t\tor (#SMODS.find_card(\"j_caino\") > 0)\n\t\tthen\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 5,
          "discard": 4,
          "check": "NXD",
          "xmult2": 5,
          "xmultg": 2,
          "cardc": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 5,
          "discard": 4,
          "check": "NXD",
          "xmult2": 5,
          "xmultg": 2,
          "cardc": 3
        }
      },
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "themoon",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 9
      },
      "raw": "key = \"themoon\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 2,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step and not context.blueprint then\n\t\t\tif context.cardarea then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif v:is_suit(\"Hearts\", true) then\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\tSMODS.change_base(v, \"Spades\", nil)\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\tend\n\t\t\t\t\tif v:is_suit(\"Diamonds\", true) then\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\tSMODS.change_base(v, \"Clubs\", nil)\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spin",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 9
      },
      "raw": "key = \"spin\",\n\tatlas = \"Jokers2\",\n\trarity = 1,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 3,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit + 1\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit - 1\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tcontext.other_card:flip()\n\t\t\tcontext.other_card:flip()\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "thenightrose",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 9
      },
      "raw": "key = \"thenightrose\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 4,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step and not context.blueprint then\n\t\t\tif context.cardarea then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif v:is_suit(\"Spades\", true) then\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\tSMODS.change_base(v, \"Hearts\", nil)\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\tend\n\t\t\t\t\tif v:is_suit(\"Clubs\", true) then\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\tSMODS.change_base(v, \"Diamonds\", nil)\n\t\t\t\t\t\tv:flip()\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "invest",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 9
      },
      "raw": "key = \"invest\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 5,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tcard = 1,\n\t\t\tcheck = false,\n\t\t\ttimer = 0,\n\t\t\tinvested = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.card, crv.check, crv.timer, crv.invested },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif crv.check == true then\n\t\t\tif context.end_of_round and context.main_eval and not context.blueprint and crv.timer < 3 then\n\t\t\t\tcrv.timer = crv.timer + 1\n\t\t\telseif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\t\tcrv.check = false\n\t\t\t\tcrv.timer = 0\n\n\t\t\t\tif crv.invested <= 5 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\trarity = 0,\n\t\t\t\t\t})\n\t\t\t\t\tcrv.invested = 0\n\t\t\t\telseif crv.invested > 5 and crv.invested <= 10 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\trarity = 0.95,\n\t\t\t\t\t})\n\t\t\t\t\tcrv.invested = 0\n\t\t\t\telseif crv.invested > 10 and crv.invested <= 15 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\trarity = 3,\n\t\t\t\t\t})\n\t\t\t\t\tcrv.invested = 0\n\t\t\t\telseif crv.invested > 15 and crv.invested <= 20 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tlegendary = true,\n\t\t\t\t\t})\n\t\t\t\t\tcrv.invested = 0\n\t\t\t\telseif crv.invested > 20 then\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tarea = G.jokers,\n\t\t\t\t\t\tlegendary = true,\n\t\t\t\t\t\tedition = \"e_negative\",\n\t\t\t\t\t})\n\t\t\t\t\tcrv.invested = 0\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif card.ability.extra.timer >= 3 then\n\t\t\tlocal eval = function()\n\t\t\t\treturn card.ability.extra.timer >= 3\n\t\t\tend\n\t\t\tjuice_card_until(card, eval, true)\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "card": 1,
          "check": false,
          "timer": 0,
          "invested": 0
        }
      },
      "ability": {
        "extra": {
          "card": 1,
          "check": false,
          "timer": 0,
          "invested": 0
        }
      },
      "vars": [
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ihavenoidea",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 9
      },
      "raw": "key = \"ihavenoidea\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 6,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\trequirement = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.requirement },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.setting_blind and G.GAME.blind.boss and not context.blueprint then\n\t\t\tG.GAME.blind.chips = G.GAME.blind.chips * 2\n\t\t\tG.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\treturn {\n\t\t\t\tmessage = \"Blind Doubled\",\n\t\t\t}\n\t\tend\n\t\tif\n\t\t\tcontext.end_of_round\n\t\t\tand context.main_eval\n\t\t\tand G.GAME.blind.boss\n\t\t\tand not context.blueprint\n\t\t\tand crv.requirement < 3\n\t\tthen\n\t\t\tcrv.requirement = crv.requirement + 1\n\t\telseif context.end_of_round and context.main_eval and not context.blueprint and crv.requirement >= 3 then\n\t\t\tSMODS.add_card({\n\t\t\t\tset = \"Joker\",\n\t\t\t\tarea = G.jokers,\n\t\t\t\tlegendary = true,\n\t\t\t})\n\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\tend\n\t\tif crv.requirement >= 3 then\n\t\t\tlocal eval = function()\n\t\t\t\treturn crv.requirement >= 3\n\t\t\tend\n\t\t\tjuice_card_until(card, eval, true)\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "requirement": 0
        }
      },
      "ability": {
        "extra": {
          "requirement": 0
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ycard",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 9
      },
      "raw": "key = \"ycard\",\n\tatlas = \"Jokers2\",\n\trarity = 1,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 8,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 0,\n\t\t\tchipg = 5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.chips, crv.chipg },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.open_booster then\n\t\t\tif not context.blueprint then\n\t\t\t\tcrv.chips = crv.chips + crv.chipg\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, {\n\t\t\t\t\t\t\tmessage = localize({ type = \"variable\", key = \"a_mult\", vars = { crv.chipg } }),\n\t\t\t\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t\t\t\t\tdelay = 0.45,\n\t\t\t\t\t\t\tcard = self,\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tchips = crv.chips,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 0,
          "chipg": 5
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "chipg": 5
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stamp",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "key = \"stamp\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and not context.blueprint then\n\t\t\tif context.cardarea == G.play then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif context.other_card.ability.seal == nil then\n\t\t\t\t\t\tcontext.other_card:juice_up(0.3, 0.4)\n\t\t\t\t\t\tcontext.other_card:set_seal(\n\t\t\t\t\t\t\tSMODS.poll_seal({\n\t\t\t\t\t\t\t\tguaranteed = true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "cotn",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 1
      },
      "raw": "key = \"cotn\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 9,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 0.1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmultg, card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] ~= nil and not G.jokers.cards[rr + 1].ability.crv_vamp then\n\t\t\t\tSMODS.Stickers[\"crv_vamp\"]:apply(G.jokers.cards[rr + 1], true)\n\t\t\t\tcard.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmultg\n\t\t\tend\n\t\tend\n\t\tif not card.getting_sliced and context.joker_main then\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v:is_suit(\"Hearts\", true) then\n\t\t\t\t\tcard.ability.extra.xmultg = card.ability.extra.xmultg + 0.1\n\t\t\t\tend\n\t\t\t\treturn {\n\t\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t\t}\n\t\t\tend\n\t\t\treturn {\n\t\t\t\txmult = card.ability.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.1
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 0.1
        }
      },
      "vars": [
        0.1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mon",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 2
      },
      "raw": "key = \"mon\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tstored = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.stored },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.starting_shop and not context.blueprint and not context.repetition then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.GAME.discount_percent = card.ability.extra.stored\n\t\t\t\t\tfor k, v in pairs(G.I.CARD) do\n\t\t\t\t\t\tif v.set_cost then\n\t\t\t\t\t\t\tv:set_cost()\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\tend\n\t\tif\n\t\t\tG.GAME.current_round.hands_played >= 0\n\t\t\tand G.GAME.current_round.hands_played <= 1\n\t\t\tand context.end_of_round\n\t\t\tand context.main_eval\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tcard.ability.extra.stored = card.ability.extra.stored + 5\n\t\t\treturn {\n\t\t\t\tmessage = localize(\"k_upgrade_ex\"),\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "stored": 0
        }
      },
      "ability": {
        "extra": {
          "stored": 0
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kqb",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 9
      },
      "raw": "key = \"kqb\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_secret\",\n\tcost = 30,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 9,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult * stickercheck() + 1, card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] ~= nil then\n\t\t\t\tSMODS.Stickers[\"perishable\"]:apply(G.jokers.cards[rr + 1], true)\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult * stickercheck() + 1,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.game_over then\n\t\t\treturn {\n\t\t\t\tsaved = true,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 4
        }
      },
      "ability": {
        "extra": {
          "xmult": 4
        }
      },
      "vars": [
        null,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "maz",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 3
      },
      "raw": "key = \"maz\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 9,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultg = 1.5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.xmultg },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.setting_blind and not context.repetition and not context.blueprint then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card and G.jokers.cards[i].debuff == false then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #jokers > 0 then\n\t\t\t\tif not context.blueprint then\n\t\t\t\t\tlocal chosen_joker = pseudorandom_element(jokers, pseudoseed(\"ml\"))\n\t\t\t\t\tSMODS.debuff_card(chosen_joker, true, card.config.center.key)\n\t\t\t\t\tcrv.xmult = crv.xmult + crv.xmultg\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = \"Painful!\",\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultg": 1.5
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultg": 1.5
        }
      },
      "vars": [
        1,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bocchi",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 4
      },
      "raw": "key = \"bocchi\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 9,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\tallcards = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.allcards, card.ability.extra.xmult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tlocal all_cards = 0\n\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\tall_cards = all_cards + 1\n\t\t\t\tcard.ability.extra.allcards = all_cards\n\t\t\tend\n\t\t\tif all_cards > 1 then\n\t\t\t\treturn {\n\t\t\t\t\txmult = card.ability.extra.xmult * card.ability.extra.allcards,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "allcards": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "allcards": 0
        }
      },
      "vars": [
        0,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jhaunted",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 5
      },
      "raw": "key = \"jhaunted\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tcards = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.cards },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #jokers > 0 then\n\t\t\t\tif #G.jokers.cards <= G.jokers.config.card_limit then\n\t\t\t\t\tcard_eval_status_text(\n\t\t\t\t\t\tcontext.blueprint_card or card,\n\t\t\t\t\t\t\"extra\",\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\t{ message = localize(\"k_duplicated_ex\") }\n\t\t\t\t\t)\n\t\t\t\t\tlocal chosen_joker = pseudorandom_element(jokers, pseudoseed(\"haunted\"))\n\t\t\t\t\tlocal card2 =\n\t\t\t\t\t\tcopy_card(chosen_joker, nil, nil, nil, chosen_joker.edition and chosen_joker.edition.negative)\n\t\t\t\t\tSMODS.Stickers[\"crv_haunted\"]:apply(card2, true)\n\t\t\t\t\tcard2:add_to_deck()\n\t\t\t\t\tG.jokers:emplace(card2)\n\t\t\t\telse\n\t\t\t\t\tcard_eval_status_text(\n\t\t\t\t\t\tcontext.blueprint_card or card,\n\t\t\t\t\t\t\"extra\",\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\tnil,\n\t\t\t\t\t\t{ message = localize(\"k_no_room_ex\") }\n\t\t\t\t\t)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tcard_eval_status_text(\n\t\t\t\t\tcontext.blueprint_card or card,\n\t\t\t\t\t\"extra\",\n\t\t\t\t\tnil,\n\t\t\t\t\tnil,\n\t\t\t\t\tnil,\n\t\t\t\t\t{ message = localize(\"k_no_other_jokers\") }\n\t\t\t\t)\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "roulj",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 7
      },
      "raw": "key = \"roulj\",\n\tconfig = {\n\t\textra = {\n\t\t\tbet = \"Black\",\n\t\t\tmax = 20,\n\t\t\todds = 100,\n\t\t\tgreen = 500,\n\t\t},\n\t},\n\trarity = 3,\n\tatlas = \"Jokers2\",\n\tblueprint_compat = false,\n\tdiscovered = false,\n\tno_collection = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 7,\n\t},\n\tcost = 10,\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.bet, G.GAME.probabilities.normal, crv.odds, crv.green, crv.max },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tif crv.bet == \"Green\" then\n\t\t\t\tif pseudorandom(\"roulj\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\t\tease_dollars(crv.green)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_jackpot\"),\n\t\t\t\t\t}, delay(0.6)\n\t\t\t\telse\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\t\tease_dollars(-(math.max(0, math.min(G.GAME.dollars, crv.max))), true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_lost\"),\n\t\t\t\t\t}, delay(0.6)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif crv.bet ~= \"Green\" then\n\t\t\t\tlocal chosenbet = pseudorandom_element(bets, pseudoseed(\"roulj\"))\n\t\t\t\tif crv.bet == chosenbet then\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\t\tease_dollars(math.max(0, math.min(G.GAME.dollars, crv.max)), true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_won\"),\n\t\t\t\t\t}, delay(0.6)\n\t\t\t\telse\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 0.4,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound(\"timpani\")\n\t\t\t\t\t\t\tease_dollars(-(math.max(0, math.min(G.GAME.dollars, crv.max))), true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize(\"k_crv_lost\"),\n\t\t\t\t\t}, delay(0.6)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "bet": "Black",
          "max": 20,
          "odds": 100,
          "green": 500
        }
      },
      "ability": {
        "extra": {
          "bet": "Black",
          "max": 20,
          "odds": 100,
          "green": 500
        }
      },
      "vars": [
        null,
        1,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "nyancat",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 8
      },
      "raw": "key = \"nyancat\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 9,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step and not context.blueprint then\n\t\t\tif context.cardarea then\n\t\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\t\tif not v.edition and not v.ability.polychrome then\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tif not v.edition and not v.ability.polychrome then\n\t\t\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\t\t\tv:set_edition({ polychrome = true }, true)\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mathness",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 0
      },
      "raw": "key = \"mathness\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { G.GAME.probabilities.normal, crv.odds, crv.xmultg, crv.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card and not G.jokers.cards[i].ability.crv_absolute then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #jokers > 0 then\n\t\t\t\tif not context.blueprint then\n\t\t\t\t\tlocal chosen_joker = pseudorandom_element(jokers, pseudoseed(\"mathness\"))\n\t\t\t\t\tif pseudorandom(\"mathness\") < G.GAME.probabilities.normal / crv.odds then\n\t\t\t\t\t\tSMODS.Stickers[\"crv_absolute\"]:apply(chosen_joker, true)\n\t\t\t\t\telse\n\t\t\t\t\t\tchosen_joker:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "odds": 2
        }
      },
      "vars": [
        1,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "radtank",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 1
      },
      "raw": "key = \"radtank\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 1,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tgain = 15,\n\t\t\tstored = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.gain, card.ability.extra.stored },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal lc = { \"Left\", \"Right\" }\n\t\t\tlocal choosencard = pseudorandom_element(lc, pseudoseed(\"radtank\"))\n\t\t\tif\n\t\t\t\tchoosencard == \"Left\"\n\t\t\t\tand G.jokers.cards[rr - 1] ~= nil\n\t\t\t\tand not G.jokers.cards[rr - 1].ability.crv_radioactive\n\t\t\tthen\n\t\t\t\tSMODS.Stickers[\"crv_radioactive\"]:apply(G.jokers.cards[rr - 1], true)\n\t\t\t\tcrv.stored = crv.stored + crv.gain\n\t\t\telseif\n\t\t\t\tchoosencard == \"Right\"\n\t\t\t\tand G.jokers.cards[rr + 1] ~= nil\n\t\t\t\tand not G.jokers.cards[rr + 1].ability.crv_radioactive\n\t\t\tthen\n\t\t\t\tSMODS.Stickers[\"crv_radioactive\"]:apply(G.jokers.cards[rr + 1], true)\n\t\t\t\tcrv.stored = crv.stored + crv.gain\n\t\t\tend\n\t\tend\n\t\tif context.selling_self then\n\t\t\treturn {\n\t\t\t\tdollars = crv.stored,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "gain": 15,
          "stored": 0
        }
      },
      "ability": {
        "extra": {
          "gain": 15,
          "stored": 0
        }
      },
      "vars": [
        15,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "again",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 4
      },
      "raw": "key = \"again\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\trepet = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.repet },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal random_key = rkeys[math.random(#rkeyshalf)]\n\t\t\tif (random_key == \"5\") and not context.repetition and not context.individual then\n\t\t\t\tSMODS.restart_game()\n\t\t\tend\n\t\tend\n\t\tif context.repetition and context.cardarea == G.play then\n\t\t\treturn {\n\t\t\t\trepetitions = card.ability.extra.repet,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "repet": 2
        }
      },
      "ability": {
        "extra": {
          "repet": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "disorder",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 5
      },
      "raw": "key = \"disorder\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 10,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal random_key = rkeys[math.random(#aeae)]\n\t\t\tif (random_key == \"4\") and not context.repetition and not context.individual then\n\t\t\t\tSMODS.restart_game()\n\t\t\t\tSMODS.restart_game()\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ketchup",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 8
      },
      "raw": "key = \"ketchup\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 25,\n\t\t\txmult = 2,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and (#SMODS.find_card(\"j_crv_mayo\") == 0) then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\telseif context.joker_main and (#SMODS.find_card(\"j_crv_mayo\") > 0) then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 25,
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "mult": 25,
          "xmult": 2
        }
      },
      "vars": [
        25,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mayo",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 7
      },
      "raw": "key = \"mayo\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t\txchips = 2,\n\t\t},\n\t},\n\tpools = {\n\t\tFood = true,\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.chips, card.ability.extra.xchips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and (#SMODS.find_card(\"j_crv_ketchup\") == 0) then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t}\n\t\telseif context.joker_main and (#SMODS.find_card(\"j_crv_ketchup\") > 0) then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.chips,\n\t\t\t\txchips = card.ability.extra.xchips,\n\t\t\t}\n\t\tend\n\tend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "chips": 50,
          "xchips": 2
        }
      },
      "ability": {
        "extra": {
          "chips": 50,
          "xchips": 2
        }
      },
      "vars": [
        50,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "shjoker",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 9
      },
      "raw": "key = \"shjoker\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,\n\tdraw = function(self, card, layer)\n\t\tcard.children.center:draw_shader(\"negative_shine\", nil, card.ARGS.send_to_shader)\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit + 1\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit - 1\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 4
        }
      },
      "ability": {
        "extra": {
          "mult": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kitf",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 10
      },
      "raw": "key = \"kitf\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step then\n\t\t\tif context.cardarea then\n\t\t\t\tfor k, v in ipairs(G.hand.cards) do\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"before\",\n\t\t\t\t\t\tdelay = 0.5,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tif v.base.id > 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\t\tassert(SMODS.modify_rank(v, -1))\n\t\t\t\t\t\t\telseif v.base.id < 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\t\tassert(SMODS.modify_rank(v, 1))\n\t\t\t\t\t\t\telseif v.base.id == 13 then\n\t\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\t\tplay_sound(\"card1\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\ttrigger = \"after\",\n\t\t\t\t\t\tdelay = 1,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tv:flip()\n\t\t\t\t\t\t\tv:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mycard",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 10
      },
      "raw": "key = \"mycard\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 3,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 60,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "mult": 60
        }
      },
      "ability": {
        "extra": {
          "mult": 60
        }
      },
      "vars": [
        60
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "those",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 10
      },
      "raw": "key = \"those\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 5,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and pseudorandom(\"those\") < card.ability.extra.odds / G.GAME.probabilities.normal then\n\t\t\tSMODS.add_card({\n\t\t\t\tkey = \"j_mr_bones\",\n\t\t\t\tarea = G.jokers,\n\t\t\t})\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "odds": 4
        }
      },
      "vars": [
        4,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "acee",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 10
      },
      "raw": "key = \"acee\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 7,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\trep = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.rep },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.repetition and context.cardarea == G.play and context.other_card:get_id() == 14 then\n\t\t\treturn {\n\t\t\t\trepetitions = card.ability.extra.rep,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "rep": 2
        }
      },
      "ability": {
        "extra": {
          "rep": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "eyes",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 10
      },
      "raw": "key = \"eyes\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 8,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif\n\t\t\t\tG.jokers.cards[rr - 1] ~= nil\n\t\t\t\t\tand G.jokers.cards[rr + 1] ~= nil\n\t\t\t\t\tand #G.jokers.cards < G.jokers.config.card_limit\n\t\t\t\tor self.area == G.jokers\n\t\t\tthen\n\t\t\t\tG.jokers.cards[rr - 1]:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\tlocal copied = copy_card(G.jokers.cards[rr + 1], nil)\n\t\t\t\tcopied:add_to_deck()\n\t\t\t\tG.jokers:emplace(copied)\n\t\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = \"Copied!\" })\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "asc",
      "atlas": "Jokers2",
      "pos": {
        "x": 9,
        "y": 10
      },
      "raw": "key = \"asc\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\n\tpos = {\n\t\tx = 9,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmultg = 5,\n\t\t\tmult = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tif G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.spectral > 0 then\n\t\t\treturn {\n\t\t\t\tvars = {\n\t\t\t\t\tcard.ability.extra.multg,\n\t\t\t\t\t(card.ability.extra.mult + (G.GAME.consumeable_usage_total.spectral * card.ability.extra.multg)),\n\t\t\t\t},\n\t\t\t}\n\t\telse\n\t\t\treturn {\n\t\t\t\tvars = { card.ability.extra.multg, card.ability.extra.mult },\n\t\t\t}\n\t\tend\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.spectral > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tmult = (G.GAME.consumeable_usage_total.spectral * card.ability.extra.multg),\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tmult = card.ability.extra.mult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "multg": 5,
          "mult": 0
        }
      },
      "ability": {
        "extra": {
          "multg": 5,
          "mult": 0
        }
      },
      "vars": [
        5,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "addiction",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 11
      },
      "raw": "key = \"addiction\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 4,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 3,\n\t\t\todds = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.mult, card.ability.extra.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and pseudorandom(\"addiction\") < G.GAME.probabilities.normal / card.ability.extra.odds then\n\t\t\tcard.ability.extra.odds = card.ability.extra.odds + 1\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.mult,\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and G.GAME.blind.boss then\n\t\t\tcard.ability.extra.odds = 1\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 3,
          "odds": 1
        }
      },
      "ability": {
        "extra": {
          "mult": 3,
          "odds": 1
        }
      },
      "vars": [
        3,
        1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "shm",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 10
      },
      "raw": "key = \"shm\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 8,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 10,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tinterest = 3,\n\t\t\tssize = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.interest, crv.ssize },\n\t\t}\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tchange_shop_size(crv.ssize)\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tlocal crv = card.ability.extra\n\t\tchange_shop_size(-crv.ssize)\n\tend,",
      "config": {
        "extra": {
          "interest": 3,
          "ssize": 1
        }
      },
      "ability": {
        "extra": {
          "interest": 3,
          "ssize": 1
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ec",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 11
      },
      "raw": "key = \"ec\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tdollars = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.dollars },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif not context.other_card:is_face() then\n\t\t\t\treturn {\n\t\t\t\t\tdollars = crv.dollars,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "dollars": 3
        }
      },
      "ability": {
        "extra": {
          "dollars": 3
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ev",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 11
      },
      "raw": "key = \"ev\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 4,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 3,\n\t\t\tchips = 6,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.mult, crv.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card:is_face() then\n\t\t\t\treturn {\n\t\t\t\t\tmult = crv.mult,\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn {\n\t\t\t\t\tchips = crv.chips,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 3,
          "chips": 6
        }
      },
      "ability": {
        "extra": {
          "mult": 3,
          "chips": 6
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "teen",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 11
      },
      "raw": "key = \"teen\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 4,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\trep = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.rep },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.repetition and context.cardarea == G.play then\n\t\t\tif context.other_card:get_id() == 11 then\n\t\t\t\treturn {\n\t\t\t\t\trepetitions = crv.rep,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "rep": 1
        }
      },
      "ability": {
        "extra": {
          "rep": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "evt",
      "atlas": "Jokers2",
      "pos": {
        "x": 2,
        "y": 11
      },
      "raw": "key = \"evt\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 4,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 2,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 2,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.full_hand[1]:get_id() == 10 then\n\t\t\t\tif context.individual then\n\t\t\t\t\treturn {\n\t\t\t\t\t\txmult = crv.xmult,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 2
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "aon",
      "atlas": "Jokers2",
      "pos": {
        "x": 1,
        "y": 12
      },
      "raw": "key = \"aon\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 1,\n\t\ty = 12,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 50,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.chips },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\tlocal fc = 0\n\t\t\tfor k, v in ipairs(G.play.cards) do\n\t\t\t\tif v:is_face() then\n\t\t\t\t\tfc = fc + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif fc > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tchips = crv.chips * fc,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chips": 50
        }
      },
      "ability": {
        "extra": {
          "chips": 50
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mature",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 12
      },
      "raw": "key = \"mature\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 12,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 0,\n\t\t\tmultg = 5,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.mult, crv.multg },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.remove_playing_cards then\n\t\t\tcrv.mult = crv.mult + crv.multg\n\t\tend\n\t\tif context.end_of_round and context.main_eval and G.GAME.blind.boss then\n\t\t\tcrv.mult = 0\n\t\t\treturn {\n\t\t\t\tmessage = \"Reset!\",\n\t\t\t}\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tmult = crv.mult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 0,
          "multg": 5
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "multg": 5
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dealb",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 11
      },
      "raw": "key = \"dealb\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 7,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 6,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tuses = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.uses },\n\t\t}\n\tend,\n\tupdate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif crv.uses == 0 then\n\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\tcrv.uses = crv.uses + 1\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "uses": 3
        }
      },
      "ability": {
        "extra": {
          "uses": 3
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rebel",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 11
      },
      "raw": "key = \"rebel\",\n\tatlas = \"Jokers2\",\n\trarity = 3,\n\tcost = 7,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 8,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.destroy_card and context.cardarea then\n\t\t\tif context.destroy_card:is_face() then\n\t\t\t\treturn {\n\t\t\t\t\tremove = true,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = crv.xmult,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 3
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "embutton",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 11
      },
      "raw": "key = \"embutton\",\n\tatlas = \"Jokers2\",\n\trarity = 1,\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 11,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\thands = 1,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.selling_self and not context.blueprint then\n\t\t\tease_discard(card.ability.extra.hands)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "hands": 1
        }
      },
      "ability": {
        "extra": {
          "hands": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "icece",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 12
      },
      "raw": "key = \"icece\",\n\tatlas = \"Jokers2\",\n\trarity = 2,\n\tcost = 1,\n\tunlocked = true,\n\tdiscovered = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 12,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tchipx = 3,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.chipx },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal atp = card.ability.extra\n\t\tlocal hearts = 0\n\t\tif\n\t\t\tcontext.individual\n\t\t\tand context.cardarea == G.play\n\t\t\tand context.other_card:is_suit(\"Hearts\", true)\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\thearts = hearts + 1\n\t\tend\n\t\tif context.joker_main and hearts == 0 then\n\t\t\treturn {\n\t\t\t\txchips = atp.chipx,\n\t\t\t}\n\t\tend\n\t\tif context.after then\n\t\t\thearts = 0\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "chipx": 3
        }
      },
      "ability": {
        "extra": {
          "chipx": 3
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "glassgun",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 12
      },
      "raw": "key = \"glassgun\",\n\trarity = 2,\n\tcost = 4,\n\tatlas = \"Jokers2\",\n\tconfig = {\n\t\textra = {\n\t\t\tmult = 1,\n\t\t},\n\t},\n\tpos = { x = 4, y = 12 },\n\tsoul_pos = { x = 4, y = 13 },\n\tdiscovered = true,\n\tblueprint_compat = true,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.GAME.glassodds = G.GAME.glassodds / 2\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.GAME.glassodds = G.GAME.glassodds / 2\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif\n\t\t\tcontext.individual\n\t\t\tand context.cardarea == G.play\n\t\t\tand SMODS.has_enhancement(context.other_card, \"m_glass\")\n\t\tthen\n\t\t\tcontext.other_card:set_edition({ polychrome = true }, true)\n\t\tend\n\t\tif context.remove_playing_cards then\n\t\t\tfor _, pcard in ipairs(context.removed) do\n\t\t\t\tif SMODS.has_enhancement(pcard, \"m_glass\") then\n\t\t\t\t\tlocal acard = copy_card(pcard, nil, nil, G.playing_card)\n\t\t\t\t\tG.deck.config.card_limit = G.deck.config.card_limit + 1\n\t\t\t\t\ttable.insert(G.playing_cards, acard)\n\t\t\t\t\tacard:set_ability(G.P_CENTERS[\"m_crv_shattered\"])\n\t\t\t\t\tacard:add_to_deck()\n\t\t\t\t\tG.hand:emplace(acard)\n\t\t\t\t\tacard.states.visible = nil\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tacard:start_materialize()\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend,\n\t\t\t\t\t}))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "mult": 1
        }
      },
      "ability": {
        "extra": {
          "mult": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chalk",
      "atlas": "Jokers2",
      "pos": {
        "x": 5,
        "y": 12
      },
      "raw": "key = \"chalk\",\n\trarity = 2,\n\tcost = 4,\n\tatlas = \"Jokers2\",\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 3,\n\t\t},\n\t},\n\tpos = { x = 5, y = 12 },\n\tdiscovered = true,\n\tblueprint_compat = true,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tchalk = false\n\tend,\n\tcalculate = function(self, card, context)\t\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tSMODS.Stickers[\"crv_marked\"]:apply(context.other_card, true)\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tupdate = function(self, card, context)\n\t\tif chalk == false then\n\t\t\tif context.destroy_card and context.cardarea then\n\t\t\t\tif context.destroy_card.ability.crv_chalk then\n\t\t\t\t\tchalk = true\n\t\t\t\t\treturn {\n\t\t\t\t\t\tremove = true,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "xmult": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 3
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Seal",
      "key": "ps",
      "atlas": "enh",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"ps\",\n\tatlas = \"enh\",\n\tpos = { x = 2, y = 1 },\n\tdiscovered = true,\n\tbadge_colour = HEX(\"A020F0\"),\n\trarity = 3,\n\tsound = { sound = \"gold_seal\", per = 1.2, vol = 0.4 },\n\n\tcalculate = function(self, card, context)\n\t\tif context.main_scoring and context.cardarea == G.play then\n\t\t\tlocal card = copy_card(card, nil, nil, G.playing_card)\n\t\t\tG.deck.config.card_limit = G.deck.config.card_limit + 1\n\t\t\ttable.insert(G.playing_cards, card)\n\t\t\tcard:set_seal()\n\t\t\tcard:add_to_deck()\n\t\t\tG.hand:emplace(card)\n\t\t\tcard.states.visible = nil\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tcard:start_materialize()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\tmessage = \"Printed!\",\n\t\t\t}\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "brush",
      "atlas": "spec",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"brush\",\n\tset = \"Spectral\",\n\tconfig = { extra = { cards = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tpos = { x = 0, y = 0 },\n\tatlas = \"spec\",\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = true,\n\tcan_use = function(self, card)\n\t\tif G and G.hand then\n\t\t\tif #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then --if cards in hand highlighted are above 0 but below the configurable value then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card)\n\t\tfor i, card in pairs(G.hand.highlighted) do\n\t\t\tcard:set_seal(\"crv_ps\")\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\ttrigger = \"after\",\n\t\t\t\tdelay = 0.2,\n\t\t\t\tfunc = function()\n\t\t\t\t\tG.hand:unhighlight_all()\n\t\t\t\t\treturn true\n\t\t\t\tend,\n\t\t\t}))\n\t\t\tdelay(0.5)\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "cards": 1
        }
      },
      "ability": {
        "extra": {
          "cards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Seal",
      "key": "themoon",
      "atlas": "enh",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"themoon\",\n\tatlas = \"enh\",\n\tpos = { x = 2, y = 1 },\n\tdiscovered = true,\n\tbadge_colour = HEX(\"A020F0\"),\n\trarity = 3,\n\tsound = { sound = \"gold_seal\", per = 1.2, vol = 0.4 },\n\tcalculate = function(self, card, context)\n\t\tif context.final_scoring_step and context.cardarea == G.play then\n                local suit = card.base.suit\n                local suit_suffix = tostring(suit)\n                local rank = card.base.id\n            if rank == 11 then\n                rank = \"Jack\"\n            elseif rank == 12 then\n                rank = \"Queen\"\n            elseif rank == 13 then\n                rank = \"King\"\n            elseif rank == 14 then\n                rank = \"Ace\"\n            else\n                rank = tostring(rank)\n            end\n\t\t\t\tlocal _rank_suffix = tostring(rank)\n                card:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n            for i = 1, 2 do\n                local acard = create_playing_card({\n                    front = G.P_CARDS[suit_suffix .. \"_\" .. rank],\n                    center = G.P_CENTERS.c_base,\n                }, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n                assert(SMODS.change_base(acard, suit_suffix, rank))\n            end\n\t\t\treturn {\n\t\t\t\tmessage = \"The Moon Haunts you!\",\n\t\t\t}\n\t\tend\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "vamp",
      "atlas": "enh",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = \"vamp\",\n\tbadge_colour = HEX(\"830000\"),\n\tatlas = \"enh\",\n\tpos = {\n\t\tx = 2,\n\t\ty = 2,\n\t},\n\tsets = {\n\t\tJoker = true,\n\t},\n\trate = 0.3,\n\tneeds_enable_flag = true,\n\tcalculate = function(self, card, context)\n\t\tif context.setting_blind then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif G.jokers.cards[rr + 1] == nil or G.jokers.cards[rr - 1] == nil and not context.blueprint then\n\t\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "haunted",
      "atlas": "enh",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = \"haunted\",\n\tbadge_colour = HEX(\"232323\"),\n\tatlas = \"enh\",\n\tpos = {\n\t\tx = 3,\n\t\ty = 2,\n\t},\n\tsets = {\n\t\tJoker = true,\n\t},\n\trate = 0.2,\n\tneeds_enable_flag = true,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tcard:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "radioactive",
      "atlas": "enh",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "key = \"radioactive\",\n\tbadge_colour = HEX(\"008c24\"),\n\tatlas = \"enh\",\n\tpos = {\n\t\tx = 4,\n\t\ty = 2,\n\t},\n\tsets = {\n\t\tJoker = true,\n\t},\n\trate = 0.1,\n\tneeds_enable_flag = true,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tlocal rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal lc = { \"Left\", \"Right\" }\n\t\t\tlocal choosencard = pseudorandom_element(lc, pseudoseed(\"radioactive\"))\n\t\t\tif choosencard == \"Left\" and G.jokers.cards[rr - 1] ~= nil then\n\t\t\t\tG.jokers.cards[rr - 1]:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\telseif choosencard == \"Right\" and G.jokers.cards[rr + 1] ~= nil then\n\t\t\t\tG.jokers.cards[rr + 1]:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\tend\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "absolute",
      "atlas": "enh",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = \"absolute\",\n\tbadge_colour = HEX(\"ffe9b5\"),\n\tatlas = \"enh\",\n\tpos = {\n\t\tx = 2,\n\t\ty = 3,\n\t},\n\tsets = {\n\t\tJoker = true,\n\t},\n\trate = 0.2,\n\tneeds_enable_flag = true,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {G.GAME.probabilities.normal},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n            if pseudorandom(\"absolute\") < G.GAME.probabilities.normal / 4 then\n                local rr = nil\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\trr = i\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n                local card2 = G.jokers.cards[rr].config.center_key\n                SMODS.add_card({\n                    area = G.jokers,\n                    key = card2,\n                })\n\t\tend\n\tend\nend",
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "marked",
      "atlas": "enh",
      "pos": {
        "x": 3,
        "y": 3
      },
      "raw": "key = \"marked\",\n\tbadge_colour = HEX(\"000000\"),\n\tatlas = \"enh\",\n\tpos = {\n\t\tx = 3,\n\t\ty = 3,\n\t},\n\tsets = {\n\t\tJoker = true,\n\t},\n\trate = 0.1,\n\tneeds_enable_flag = true,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "pst",
      "atlas": "tags",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'pst',\n\n    atlas = 'tags',\n    pos = { x = 0, y = 0},\n    apply = function(self, tag, context)\n        if context.type == \"store_joker_create\" then\n            local prs_in_posession = { 0 }\n            for k, v in ipairs(G.jokers.cards) do\n                if v.config.center.rarity == \"crv_p\" and not prs_in_posession[v.config.center.key] then\n                    prs_in_posession[1] = prs_in_posession[1] + 1\n                    prs_in_posession[v.config.center.key] = true\n                end\n            end\n            local card\n            if #G.P_JOKER_RARITY_POOLS.crv_p > prs_in_posession[1] then\n                card = create_card(\"Joker\", context.area, nil, 'crv_p', nil, nil, nil, \"crv_pst\")\n                create_shop_card_ui(card, \"Joker\", context.area)\n                card.states.visible = false\n                tag:yep(\"+\", G.C.RARITY.crv_p, function()\n                    card:start_materialize()\n                    card.ability.couponed = true\n                    card:set_cost()\n                    return true\n                end)\n            else\n                tag:nope()\n            end\n            tag.triggered = true\n            return card\n        end\n    end,",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "reintag",
      "atlas": "tags",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'reintag',\n    atlas = 'tags',\n    pos = { x = 1, y = 0},\n    apply = function(self, tag, context)\n        if context.type == \"store_joker_create\" then\n            local prs_in_posession = { 0 }\n            local card\n            if #G.P_JOKER_RARITY_POOLS.crv_p > prs_in_posession[1] then\n                card = create_card(\"Joker\", context.area, nil, nil, nil, nil, \"j_crv_rein\")\n                create_shop_card_ui(card, \"Joker\", context.area)\n                card.states.visible = false\n                tag:yep(\"+\", G.C.RARITY.crv_p, function()\n                    card:start_materialize()\n                    card.ability.couponed = true\n                    card:set_cost()\n                    return true\n                end)\n            else\n                tag:nope()\n            end\n            tag.triggered = true\n            return card\n        end\n    end,\n        in_pool = function(self,wawa,wawa2)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "packtag",
      "atlas": "tags",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'packtag',\n    atlas = 'tags',\n    pos = { x = 2, y = 0},\n    apply = function(self, tag, context)\n        if context.type == \"new_blind_choice\" then\n            tag:yep('+', G.C.SECONDARY_SET.Spectral,function() \n                local key = 'p_crv_cbst3'\n                local card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n                G.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n                card.cost = 0\n                card.from_tag = true\n                G.FUNCS.use_card({config = {ref_table = card}})\n                card:start_materialize()\n                return true\n            end)\n            tag.triggered = true\n            return true\n        end\n    end,\n        in_pool = function(self,wawa,wawa2)\n            return true\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Rarity",
      "key": "va",
      "atlas": null,
      "pos": null,
      "raw": "key = \"va\",\n\tbadge_colour = G.C.PURPLE,\n\tpools = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "VaultKey",
      "atlas": "spec",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"VaultKey\",\n\tset = \"Spectral\",\n\tdiscovered = true,\n\tatlas = \"spec\",\n\thidden = true,\n\tsoul_set = \"Spectral\",\n\tsoul_rate = 0.01,\n\tcan_repeat_soul = false,\n\tpos = {\n\t\tx = 1,\n\t\ty = 0,\n\t},\n\tsoul_pos = {\n\t\tx = 2,\n\t\ty = 0,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {},\n\t\t}\n\tend,\n\tcan_use = function(self, card)\n\t\treturn true\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tSMODS.add_card({\n\t\t\tset = \"Joker\",\n\t\t\tarea = G.jokers,\n\t\t\trarity = \"crv_va\",\n\t\t})\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vjim",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 3
      },
      "raw": "key = \"vjim\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\todds = 4,\n\t\t\txmult = 6,\n\t\t\tdiscards = \"N/A\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.xmult, card.ability.extra.odds, card.ability.extra.discards },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif G.GAME.current_round.discards_left > 0 then\n\t\t\tcard.ability.extra.discards = G.GAME.current_round.discards_left\n\t\tend\n\t\tif G.GAME.current_round.discards_left == 0 then\n\t\t\tcard.ability.extra.discards = 1\n\t\tend\n\t\tif context.joker_main and pseudorandom(\"vjim\") < card.ability.extra.discards / card.ability.extra.odds then\n\t\t\treturn {\n\t\t\t\tx_mult = -card.ability.extra.xmult,\n\t\t\t}\n\t\telseif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "odds": 4,
          "xmult": 6,
          "discards": "N/A"
        }
      },
      "ability": {
        "extra": {
          "odds": 4,
          "xmult": 6,
          "discards": "N/A"
        }
      },
      "vars": [
        6,
        4,
        "N/A"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vsix",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 3
      },
      "raw": "key = \"vsix\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 4,\n\t\ty = 3,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tmultip2 = \"N/A\",\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = { card.ability.extra.multip2 },\n\t\t}\n\tend,\n\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tlocal random2_key = (pseudorandom_element(multi, pseudoseed(\"vsix\")))\n\t\tcard.ability.extra.multip2 = random2_key\n\t\tfor k, v in pairs(G.GAME.probabilities) do\n\t\t\tG.GAME.probabilities[k] = v * card.ability.extra.multip2\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tfor k, v in pairs(G.GAME.probabilities) do\n\t\t\tG.GAME.probabilities[k] = v / card.ability.extra.multip2\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "multip2": "N/A"
        }
      },
      "ability": {
        "extra": {
          "multip2": "N/A"
        }
      },
      "vars": [
        "N/A"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vdna",
      "atlas": "Jokers2",
      "pos": {
        "x": 4,
        "y": 4
      },
      "raw": "key = \"vdna\",\n\tatlas = \"Jokers2\",\n\tpos = {\n\t\tx = 4,\n\t\ty = 4,\n\t},\n\trarity = \"crv_va\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tconfig = {\n\t\textra = {},\n\t},\n\tcalculate = function(self, card, context)\n\t\tif context.first_hand_drawn and not context.blueprint then\n\t\t\tlocal eval = function()\n\t\t\t\treturn G.GAME.current_round.hands_played == 0\n\t\t\tend\n\t\t\tjuice_card_until(card, eval, true)\n\t\tend\n\n\t\tif context.cardarea == G.jokers and context.before and G.GAME.current_round.hands_played == 0 then\n\t\t\tif #context.full_hand == 1 then\n\t\t\t\tG.playing_card = (G.playing_card and G.playing_card + 1) or 1\n\t\t\t\tlocal _card = copy_card(context.full_hand[1], nil, nil, G.playing_card)\n\t\t\t\t_card:add_to_deck()\n\t\t\t\tif context.full_hand[1].ability.effect == \"Base\" then\n\t\t\t\t\t_card:set_ability(G.P_CENTERS[SMODS.poll_enhancement({ guaranteed = true })], true, false)\n\t\t\t\tend\n\t\t\t\tG.deck.config.card_limit = G.deck.config.card_limit + 1\n\t\t\t\ttable.insert(G.playing_cards, _card)\n\t\t\t\tG.hand:emplace(_card)\n\t\t\t\t_card.states.visible = nil\n\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t_card:start_materialize()\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend,\n\t\t\t\t}))\n\t\t\t\treturn {\n\t\t\t\t\tmessage = \"Mutated!\",\n\t\t\t\t\tcolour = G.C.PURPLE,\n\t\t\t\t\tplaying_cards_created = { true },\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vface",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 5
      },
      "raw": "key = \"vface\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 5,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\tpmult = 20,\n\t\t\tmmult = -15,\n\t\t\tmxmult = -2,\n\t\t\ttimer = 0,\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.pmult,\n\t\t\t\tcard.ability.extra.mmult,\n\t\t\t\tcard.ability.extra.mxmult,\n\t\t\t\tcard.ability.extra.timer,\n\t\t\t},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and (card.ability.extra.timer >= 15) then\n\t\t\tcard.ability.extra.timer = 0\n\t\t\treturn {\n\t\t\t\txmult = card.ability.extra.mxmult,\n\t\t\t}\n\t\tend\n\t\tif context.individual and context.cardarea == G.play and (card.ability.extra.timer < 15) then\n\t\t\tif context.other_card:is_face() then\n\t\t\t\tcard.ability.extra.timer = card.ability.extra.timer + 1\n\t\t\t\treturn {\n\t\t\t\t\tmult = card.ability.extra.pmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\n\t\tif context.individual and context.cardarea == G.play and (card.ability.extra.timer < 15) then\n\t\t\tif context.other_card:get_id() >= 2 and context.other_card:get_id() <= 10 then\n\t\t\t\tcard.ability.extra.timer = 0\n\t\t\t\treturn {\n\t\t\t\t\tmult = card.ability.extra.mmult,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "pmult": 20,
          "mmult": -15,
          "mxmult": -2,
          "timer": 0
        }
      },
      "ability": {
        "extra": {
          "pmult": 20,
          "mmult": -15,
          "mxmult": -2,
          "timer": 0
        }
      },
      "vars": [
        20,
        -15,
        -2,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vprint",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 4
      },
      "raw": "key = \"vprint\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 7,\n\t\ty = 4,\n\t},\n\tconfig = {\n\t\textra = {},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tcard.ability.extra.pmult,\n\t\t\t\tcard.ability.extra.mmult,\n\t\t\t\tcard.ability.extra.mxmult,\n\t\t\t\tcard.ability.extra.timer,\n\t\t\t},\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\t--select the joker\n\t\t\tlocal other_joker = pseudorandom_element(jokers, pseudoseed(\"vprint\"))\n\t\t\t--copy it\n\t\t\tif other_joker and other_joker ~= card then\n\t\t\t\tcontext.blueprint = (context.blueprint and (context.blueprint + 1)) or 1\n\t\t\t\tcontext.blueprint_card = context.blueprint_card or card\n\t\t\t\tif context.blueprint > #G.jokers.cards + 1 then\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\t\tlocal other_joker_ret = other_joker:calculate_joker(context)\n\t\t\t\tif other_joker_ret then\n\t\t\t\t\tother_joker_ret.card = other_joker_ret.card or card\n\t\t\t\t\tother_joker_ret.colour = G.C.PURPLE\n\t\t\t\t\treturn other_joker_ret\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vmichel",
      "atlas": "Jokers2",
      "pos": {
        "x": 3,
        "y": 6
      },
      "raw": "key = \"vmichel\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 3,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = { xmult = 30, odds = 12\n },\n\t},\n\tpools = {\n\t\tFood = true\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.xmult, crv.odds, (G.GAME.probabilities.normal or 1) },\n\t\t}\n\tend,\n\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif\n\t\t\tcontext.setting_blind\n\t\t\tand pseudorandom(\"vmichel\") < G.GAME.probabilities.normal / crv.odds\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tlocal _first_dissolve = nil\n\t\t\tfor k, v in pairs(G.jokers.cards) do\n\t\t\t\tif not v.ability.eternal then\n\t\t\t\t\tv:start_dissolve(nil, _first_dissolve)\n\t\t\t\t\t_first_dissolve = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = crv.xmult,\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 30,
          "odds": 12
        }
      },
      "ability": {
        "extra": {
          "xmult": 30,
          "odds": 12
        }
      },
      "vars": [
        null,
        null,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vriffraff",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 7
      },
      "raw": "key = \"vriffraff\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 7,\n\t\ty = 7,\n\t},\n\tconfig = {\n\t\textra = { ammount = 2 },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.ammount },\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.setting_blind and not context.blueprint then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #jokers >= crv.ammount then\n\t\t\t\tlocal chosen_joker = pseudorandom_element(jokers, pseudoseed(\"ml\"))\n\t\t\t\tlocal jokers2 = {}\n\t\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\t\tif G.jokers.cards[i] ~= card and G.jokers.cards[i] ~= chosen_joker then\n\t\t\t\t\t\tjokers2[#jokers2 + 1] = G.jokers.cards[i]\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tlocal chosen_joker2 = pseudorandom_element(jokers2, pseudoseed(\"ml\"))\n\t\t\t\tchosen_joker:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\tchosen_joker = nil\n\t\t\t\tchosen_joker2:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\t\tchosen_joker2 = nil\n\t\t\t\tfor i = 1, crv.ammount do\n\t\t\t\t\tSMODS.add_card({\n\t\t\t\t\t\tset = \"Joker\",\n\t\t\t\t\t\tlegendary = true,\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "ammount": 2
        }
      },
      "ability": {
        "extra": {
          "ammount": 2
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vmrbones",
      "atlas": "Jokers2",
      "pos": {
        "x": 8,
        "y": 8
      },
      "raw": "key = \"vmrbones\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = false,\n\tpos = {\n\t\tx = 8,\n\t\ty = 8,\n\t},\n\tconfig = {\n\t\textra = { \n            dollars = 25,\n            chances = 3,\n            used = 0,\n            stone = 10\n            \n        },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = { crv.dollars,crv.chances,crv.used,crv.stone},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.end_of_round and context.game_over then\n            for i = 1, crv.stone do\n                local acard = create_playing_card({\n                    front = G.P_CARDS[\"Spade\" .. \"_\" .. \"King\"],\n                    center = G.P_CENTERS.c_base,\n                }, G.hand, nil, nil, { G.C.SECONDARY_SET.Enhanced })\n                SMODS.change_base(acard, \"Spade\", \"2\")\n                acard:set_ability(G.P_CENTERS[\"m_stone\"])\n            end\n            crv.used = crv.used + 1\n            ease_ante(-G.GAME.round_resets.ante)\n            ease_dollars(-crv.dollars)\n            G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante or G.GAME.round_resets.ante\n            return {\n                saved = true\n            }\n        end\n        if crv.used >= crv.chances then\n            card:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n        end\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "dollars": 25,
          "chances": 3,
          "used": 0,
          "stone": 10
        }
      },
      "ability": {
        "extra": {
          "dollars": 25,
          "chances": 3,
          "used": 0,
          "stone": 10
        }
      },
      "vars": [
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vsplash",
      "atlas": "Jokers2",
      "pos": {
        "x": 7,
        "y": 9
      },
      "raw": "key = \"vsplash\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 7,\n\t\ty = 9,\n\t},\n\tconfig = {\n\t\textra = { \n\t\t\txmult = 2,   \n\t\t\tcards = 0  \n        },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = {crv.xmult},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif\tcontext.before and\n\t\t\tcontext.cardarea\n\t\t\tand not context.repetition\n\t\t\tand not context.individual\n\t\t\tand not context.blueprint\n\t\tthen\n\t\t\tfor i = 1, #context.scoring_hand do\n\t\t\t\tG.play.cards[i]:set_debuff(true)\n\t\t\t\tG.play.cards[1]:set_debuff(false)\n\t\t\tif i ~= 1 then\n\t\t\t\tcrv.cards = i-1\n\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif context.joker_main and #context.full_hand > 1 then\n\t\t\tprint(crv.cards)\n\t\t\treturn {\n\t\t\t\tx_mult = crv.cards*crv.xmult+1\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 2,
          "cards": 0
        }
      },
      "ability": {
        "extra": {
          "xmult": 2,
          "cards": 0
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vacrobat",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 2
      },
      "raw": "key = \"vacrobat\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 2,\n\t},\n\tconfig = {\n\t\textra = { \n\t\t\txmult = 6,\n\t\t\txmult2 = 3   \n        },\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = {crv.xmult,crv.xmult2},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main and G.GAME.current_round.hands_left == 0 then\n\t\t\treturn {\n\t\t\t\tx_mult = card.ability.extra.xmult\n\t\t\t}\n\t\telseif context.joker_main and G.GAME.current_round.hands_played == 0 then\n\t\t\treturn {\n\t\t\t\tx_mult = -(card.ability.extra.xmult2)\n\t\t\t}\n\tend\nend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 6,
          "xmult2": 3
        }
      },
      "ability": {
        "extra": {
          "xmult": 6,
          "xmult2": 3
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vstencil",
      "atlas": "Jokers2",
      "pos": {
        "x": 10,
        "y": 6
      },
      "raw": "key = \"vstencil\",\n\tatlas = \"Jokers2\",\n\trarity = \"crv_va\",\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tpos = {\n\t\tx = 10,\n\t\ty = 6,\n\t},\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 2\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tif G and G.jokers and G.jokers.cards then\n\t\treturn {\n\t\t\tvars = {#G.jokers.cards*card.ability.extra.xmult, card.ability.extra.xmult},\n\t\t}\n\telse\n\t\treturn {\n\t\t\tvars = {card.ability.extra.xmult*0, card.ability.extra.xmult},\n\t\t}\n\tend\nend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tif context.joker_main then\n\t\t\treturn {\n\t\t\t\tx_mult = crv.xmult*#G.jokers.cards\n\t\t\t}\n\t\tend\n\t\tif context.end_of_round and context.main_eval and not context.blueprint then\n\t\t\tlocal yesno = pseudorandom_element(yesno, pseudoseed(\"rrp\"))\n\t\t\tif yesno == 1 then\n\t\t\tlocal jokers = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] ~= card and G.jokers.cards[i].config.center.key ~= \"j_crv_vstencil\" then\n\t\t\t\t\tjokers[#jokers + 1] = G.jokers.cards[i]\n\t\t\t\tend\n\t\t\tend\n\t\tif #jokers > 0 then\n\t\t\tlocal _card = pseudorandom_element(jokers, pseudoseed(\"rrp\"))\n\t\t\tif _card then\n\t\t\t\t_card:start_dissolve({ HEX(\"57ecab\") }, nil, 1.6)\n\t\t\tend\n\t\tend\n\tend\nend\nend,\n\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 2
        }
      },
      "ability": {
        "extra": {
          "xmult": 2
        }
      },
      "vars": [
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vredcard",
      "atlas": "Jokers2",
      "pos": {
        "x": 0,
        "y": 10
      },
      "raw": "key = \"vredcard\",\n\tatlas = \"Jokers2\",\n\tpos = {\n\t\tx = 0,\n\t\ty = 10,\n\t},\n\trarity = \"crv_va\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 1,\n\t\t\txmultp = 5,\n\t\t\txmultm = -3\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = {crv.xmult,crv.xmultp,crv.xmultm},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tlocal c = context\n\t\tif c.skipping_booster and not c.blueprint then\n\t\t\tcrv.xmult = crv.xmult + crv.xmultp\n\t\t\treturn {\n\t\t\t\tmessage = \"Upgrade!\"\n\t\t\t}\n\t\tend\n\t\tif c.open_booster and not c.blueprint then\n\t\t\tcrv.xmult = crv.xmult + crv.xmultm\n\t\t\treturn{\n\t\t\t\tmessage = \"Downgrade!\"\n\t\t\t}\n\t\tend\n\t\tif c.joker_main then\n\t\t\treturn{\n\t\t\txmult = crv.xmult\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 1,
          "xmultp": 5,
          "xmultm": -3
        }
      },
      "ability": {
        "extra": {
          "xmult": 1,
          "xmultp": 5,
          "xmultm": -3
        }
      },
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vhalfjoker",
      "atlas": "Jokers2",
      "pos": {
        "x": 6,
        "y": 10
      },
      "raw": "key = \"vhalfjoker\",\n\tatlas = \"Jokers2\",\n\tpos = {\n\t\tx = 6,\n\t\ty = 10,\n\t},\n\trarity = \"crv_va\",\n\tcost = 5,\n\tunlocked = true,\n\tdiscovered = false,\n\tblueprint_compat = true,\n\tconfig = {\n\t\textra = {\n\t\t\txmult = 5\n\t\t},\n\t},\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal crv = card.ability.extra\n\t\treturn {\n\t\t\tvars = {crv.xmult},\n\t\t}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal crv = card.ability.extra\n\t\tlocal c = context\n\t\tif c.joker_main and #c.full_hand > 3 then\n\t\t\treturn{\n\t\t\t\txmult = crv.xmult\n\t\t\t}\n\t\telseif c.joker_main then\n\t\t\treturn{\n\t\t\t\txmult = -crv.xmult\n\t\t\t}\n\t\tend\n\tend,\n\tin_pool = function(self, wawa, wawa2)\n\t\treturn true\n\tend,",
      "config": {
        "extra": {
          "xmult": 5
        }
      },
      "ability": {
        "extra": {
          "xmult": 5
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "printerup",
      "atlas": "vouch",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'printerup',\n    atlas = \"vouch\",\n    pos = {\n        x = 0,\n        y = 0\n    },\n    cost = 10,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "modicon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"modicon\",\n\tpath = \"modicon.png\",\n\tpx = 34,\n\tpy = 34,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "booster",
      "atlas": null,
      "pos": null,
      "raw": "key = \"booster\",\n\tpath = \"boosters.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "holybanana",
      "atlas": null,
      "pos": null,
      "raw": "key = \"holybanana\",\n\tpath = \"holybanana.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "pedro",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pedro\",\n\tpath = \"pedro.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "rev",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rev\",\n\tpath = \"rev.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "wip",
      "atlas": null,
      "pos": null,
      "raw": "key = \"wip\",\n\tpath = \"wip.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "megaprinter",
      "atlas": null,
      "pos": null,
      "raw": "key = \"megaprinter\",\n\tpath = \"mega.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "megaprinterc",
      "atlas": null,
      "pos": null,
      "raw": "key = \"megaprinterc\",\n\tpath = \"megac.png\",\n\tpx = 174,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "megaenh",
      "atlas": null,
      "pos": null,
      "raw": "key = \"megaenh\",\n\tpath = \"megaenh.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "ghost",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ghost\",\n\tpath = \"Ghost.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Decks",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Decks\",\n\tpath = \"Decks.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Decks2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Decks2\",\n\tpath = \"Decks2.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Jokers",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Jokers\",\n\tpath = \"Jokers.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Jokers2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Jokers2\",\n\tpath = \"Jokers2.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "tarots",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tarots\",\n\tpath = \"tarots.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "documents",
      "atlas": null,
      "pos": null,
      "raw": "key = \"documents\",\n\tpath = \"documents.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "documents_u",
      "atlas": null,
      "pos": null,
      "raw": "key = \"documents_u\",\n\tpath = \"documents2.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "enh",
      "atlas": null,
      "pos": null,
      "raw": "key = \"enh\",\n\tpath = \"enh.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "scrapss",
      "atlas": null,
      "pos": null,
      "raw": "key = \"scrapss\",\n\tpath = \"Scraps.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "t",
      "atlas": null,
      "pos": null,
      "raw": "key = \"t\",\n\tpath = \"tiers.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "gb",
      "atlas": null,
      "pos": null,
      "raw": "key = \"gb\",\n\tpath = \"gb.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "gban",
      "atlas": null,
      "pos": null,
      "raw": "key = \"gban\",\n\tpath = \"gban.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "spec",
      "atlas": null,
      "pos": null,
      "raw": "key = \"spec\",\n\tpath = \"spectrals.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "vouch",
      "atlas": null,
      "pos": null,
      "raw": "key = \"vouch\",\n\tpath = \"voucher.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "tags",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tags\",\n\tpath = \"tags.png\",\n\tpx = 34,\n\tpy = 34,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "blinds",
      "atlas": null,
      "pos": null,
      "raw": "key = \"blinds\",\n\tpath = \"blinds.png\",\n\tatlas_table = \"ANIMATION_ATLAS\",\n\tpx = 34,\n\tpy = 34,\n\tframes = 21,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "mm",
      "atlas": null,
      "pos": null,
      "raw": "key = \"mm\",\n\tpath = \"mm.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "sleeves",
      "atlas": null,
      "pos": null,
      "raw": "key = \"sleeves\",\n\tpath = \"sleeves.png\",\n\tpx = 73,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "stakes",
      "atlas": null,
      "pos": null,
      "raw": "key = \"stakes\",\n\tpath = \"stakes.png\",\n\tpx = 29,\n\tpy = 29,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "cryp",
      "atlas": null,
      "pos": null,
      "raw": "key = \"cryp\",\n\tpath = \"cryp.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "riftr",
      "atlas": null,
      "pos": null,
      "raw": "key = \"riftr\",\n\tpath = \"rift.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "rtarot",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rtarot\",\n\tpath = \"reversetarot.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "togap",
      "atlas": null,
      "pos": null,
      "raw": "key = \"togap\",\n\tpath = \"togabpack.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "togaw",
      "atlas": null,
      "pos": null,
      "raw": "key = \"togaw\",\n\tpath = \"togaprint.png\",\n\tpx = 72,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "bakerycharms",
      "atlas": null,
      "pos": null,
      "raw": "key = \"bakerycharms\",\n\tpath = \"charms.png\",\n\tpx = 68,\n\tpy = 68,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "maximusc",
      "atlas": null,
      "pos": null,
      "raw": "key = \"maximusc\",\n\tpath = \"maximus.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "morefluff45",
      "atlas": null,
      "pos": null,
      "raw": "key = \"morefluff45\",\n\tpath = \"morefluff45.png\",\n\tpx = 114,\n\tpy = 114,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "prismc",
      "atlas": null,
      "pos": null,
      "raw": "key = \"prismc\",\n\tpath = \"prism.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "sdm0",
      "atlas": null,
      "pos": null,
      "raw": "key = \"sdm0\",\n\tpath = \"sdm0.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "aiko",
      "atlas": null,
      "pos": null,
      "raw": "key = \"aiko\",\n\tpath = \"aiko.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "garb",
      "atlas": null,
      "pos": null,
      "raw": "key = \"garb\",\n\tpath = \"garb.png\",\n\tpx = 71,\n\tpy = 95,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "partners",
      "atlas": null,
      "pos": null,
      "raw": "key = \"partners\",\n    px = 46,\n    py = 58,\n    path = \"part.png\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ObjectType",
      "key": "Food",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Food\",\n\tcards = {},\n\tinject = function(self)\n\t\tSMODS.ObjectType.inject(self)\n\t\tself:inject_card(G.P_CENTERS.j_gros_michel)\n\t\tself:inject_card(G.P_CENTERS.j_egg)\n\t\tself:inject_card(G.P_CENTERS.j_ice_cream)\n\t\tself:inject_card(G.P_CENTERS.j_cavendish)\n\t\tself:inject_card(G.P_CENTERS.j_turtle_bean)\n\t\tself:inject_card(G.P_CENTERS.j_diet_cola)\n\t\tself:inject_card(G.P_CENTERS.j_popcorn)\n\t\tself:inject_card(G.P_CENTERS.j_ramen)\n\t\tself:inject_card(G.P_CENTERS.j_selzer)\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ObjectType",
      "key": "BananaPool",
      "atlas": null,
      "pos": null,
      "raw": "key = \"BananaPool\",\n\tcards = {\n\t\t[\"j_crv_ghostbanana\"] = true,\n\t\t[\"j_crv_plantain\"] = true,\n\t\t[\"j_crv_reban\"] = true,\n\t\t[\"j_crv_tundan\"] = true,\n\t\t[\"j_crv_bluj\"] = true,\n\t\t[\"j_crv_bananavine\"] = true,\n\t\t[\"j_crv_plainb\"] = true,\n\t\t[\"j_crv_tickingb\"] = true,\n\t\t[\"j_crv_uneasyb\"] = true,\n\t},\n\tinject = function(self)\n\t\tSMODS.ObjectType.inject(self)\n\t\tself:inject_card(G.P_CENTERS.j_gros_michel)\n\t\tself:inject_card(G.P_CENTERS.j_cavendish)\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "printertitle",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "--used for the title screen\n\tkey = \"printertitle\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = true,\n\tno_collection = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 0,\n\t},\n\tin_pool = function(self)\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "grossprintertitle",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "--used for the title screen\n\tkey = \"grossprintertitle\",\n\tatlas = \"Jokers\",\n\trarity = \"crv_p\",\n\tcost = 10,\n\tunlocked = true,\n\tdiscovered = true,\n\tno_collection = true,\n\tpos = {\n\t\tx = 0,\n\t\ty = 1,\n\t},\n\tin_pool = function(self)\n\t\treturn false\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    }
  ],
  "version": "4.2.2c"
}