{
  "locMap": {
    "TOGAPack": {
      "name": "TOGA's Stuff",
      "text": [
        "Personal timewaster project",
        "with a few {C:dark_edition}references{}",
        "here and there.",
        " ",
        "{C:inactive,s:0.8,E:1}Another what-if that became an actual thing...{}"
      ],
      "type": "Mod"
    },
    "b_toga_frogdeck": {
      "name": "Frog Deck",
      "text": [
        "{C:attention}+#3#{} {C:attention}Joker{} slot",
        "{C:attention}+#4#{} Consumable slot",
        "{C:attention}+#6#{} hand size, +{C:money}$6{} on start",
        "{C:red}#1#{} hand, {C:red}#2#{} discard",
        "{C:red}X#5#{} base Blind size",
        "Start with {C:money}$6{} more",
        "{C:inactive,s:0.8}What {C:spectral,s:0.8}secrets{C:inactive,s:0.8} does the frog hold?{}"
      ],
      "type": "Back"
    },
    "b_toga_spacedeck": {
      "name": "Spaceman Deck",
      "text": [
        "Start the run",
        "with a {C:planet,T:j_space}Space Joker{}",
        "{C:planet,T:v_planet_merchant}Planet Merchant{},",
        "{C:planet,T:v_planet_tycoon}Planet Tycoon{}",
        "{C:spectral,s:0.8}Spectral{s:0.8} cards",
        "{s:0.8}may appear in shop"
      ],
      "type": "Back"
    },
    "b_toga_srb2kartdeck": {
      "name": "Karting Deck",
      "text": [
        "Start run with",
        "a special {C:attention,T:j_toga_jokersrb2kart}Karting Joker{}",
        "{C:red}#2#{} {C:attention}Joker{} slots",
        "{C:spectral,s:0.8}Spectral{s:0.8} cards",
        "{s:0.8}may appear in shop"
      ],
      "type": "Back"
    },
    "b_toga_againdeck": {
      "name": "Deck! Deck! Deck!",
      "text": [
        "{C:attention}Retrigger{} scoring cards",
        "once for every {C:attention}Joker{} held.",
        "{C:red}#2#{} {C:attention}Joker{} slots",
        "{C:red}X#1#{} base Blind size"
      ],
      "type": "Back"
    },
    "b_toga_311deck": {
      "name": "WinDeck 3.11",
      "text": [
        "{C:attention}+#2#{} hand size, +{C:money}$#1#{} on start",
        "{C:planet}+#5#{} level to all {C:attention}poker hands{}",
        "{C:red}#3#{} card selection limit",
        "{C:attention}+#4#{} Ante to win"
      ],
      "type": "Back"
    },
    "b_toga_screamingdeck": {
      "name": "AAAAAAAAAAA",
      "text": [
        "Start run with only",
        "{C:attention}Aces{} left in the deck",
        "and a {C:attention,T:tag_coupon}Coupon{} Tag.",
        "{C:red}X#1#{} base Blind size"
      ],
      "type": "Back"
    },
    "b_toga_drunkdeck": {
      "name": "Drunk",
      "text": [
        "Scoring is triggered",
        "in reverse order."
      ],
      "type": "Back"
    },
    "b_toga_waitthatsillegaldeck": {
      "name": "Wait. That's Illegal.",
      "text": [
        "Scoring is triggered",
        "in random order."
      ],
      "type": "Back"
    },
    "b_toga_blissful": {
      "name": "Blissful Deck",
      "text": [
        "{C:attention}Enhancements{} are {C:dark_edition}shared{}",
        "between {C:attention}playing cards{}",
        "{C:red}X#5#{} base Blind size",
        "{C:red,s:0.8}#1# {s:0.8}hand, {C:red,s:0.8}#2# {s:0.8}discard, {C:attention,s:0.8}+#6#{s:0.8} Ante to win",
        "{C:red,s:0.8}#3# {s:0.8}Joker slot, {C:red,s:0.8}#4# {s:0.8}Consumable slot",
        "{C:inactive,s:0.9}Can get quite laggy, be warned!{}",
        "{C:inactive,s:0.8}Animation skipping mods recommended.{}"
      ],
      "type": "Back"
    },
    "b_toga_prairie": {
      "name": "Prairie Deck",
      "text": [
        "{C:attention}Vanilla{} scoring of",
        "{C:attention}played{} cards",
        "does not occur."
      ],
      "type": "Back"
    },
    "b_toga_betafish": {
      "name": "Betafish Deck",
      "text": [
        "{C:attention}Vanilla{} scoring of",
        "{C:attention}held in hand{} cards",
        "does not occur."
      ],
      "type": "Back"
    },
    "bl_toga_dialupmodem": {
      "name": "The Dial-Up",
      "text": [
        "#1# card selection limit"
      ],
      "type": "Blind"
    },
    "bl_toga_worldwideweb": {
      "name": "The World Wide Web",
      "text": [
        "+#1# card selection limit",
        "and hand size"
      ],
      "type": "Blind"
    },
    "bl_toga_worldwideweb_collection": {
      "name": "The World Wide Web",
      "text": [
        "The world is at your fingertips",
        "{s:0.8}(Appears if The Dial-Up is cleared){}"
      ],
      "type": "Blind"
    },
    "bl_toga_joystick": {
      "name": "The Joystick",
      "text": [
        "First hand drawn is",
        "automatically played"
      ],
      "type": "Blind"
    },
    "bl_toga_xpboss": {
      "name": "The Experience",
      "text": [
        "The Experience"
      ],
      "type": "Blind"
    },
    "j_toga_y2kbug": {
      "name": "Y2K Bug",
      "text": [
        "If the played hand contains a",
        "{C:attention}2{} and a {C:attention}King{}, scoring cards",
        "give {C:chips}+#1#{} Chips and {C:red}+#2#{} Mult",
        "{C:inactive,s:0.8}Have you updated your system yet?{}"
      ],
      "type": "Joker"
    },
    "j_toga_controlpanel": {
      "name": "Control Panel",
      "text": [
        "Gives {C:money}$#1#{} for every Joker and",
        "Consumable slots at end of round.",
        "Defeating {C:attention}Boss Blinds{} upgrades",
        "individual slot payout by {C:money}$#2#{}.",
        "{C:inactive,s:0.8}(Currently {}{C:money,s:0.8}$#3#{}{C:inactive,s:0.8}){}",
        "{C:inactive,s:0.8}Look at all them settings!{}"
      ],
      "type": "Joker"
    },
    "j_toga_mcanvil": {
      "name": "Anvil",
      "text": [
        "Retrigger a scoring card",
        "#1# time(s) per {C:attention}4 Steel Cards{}",
        "in your {C:important}full deck{}.",
        "{C:inactive,s:0.8}(Currently #2#){}"
      ],
      "type": "Joker"
    },
    "j_toga_taskmgr": {
      "name": "Task Manager",
      "text": [
        "On {C:attention}last discard{}, {C:red}destroy{}",
        "{C:attention}all{} discarded cards."
      ],
      "type": "Joker"
    },
    "j_toga_useraccounts": {
      "name": "User Accounts",
      "text": [
        "{C:green}#2# in #3#{} chance for scoring cards to",
        "give {X:mult,C:white}XMult{} based on calculated average of",
        "current {C:attention}Joker{} & {C:attention}Consumable{} slots and",
        "{C:chips}hands{} & {C:red}discards{} left.",
        "{C:inactive,s:0.8}(Currently {}{X:mult,C:white,s:0.8}X#1#{}{C:inactive,s:0.8}){}"
      ],
      "type": "Joker"
    },
    "j_toga_jimbo95": {
      "name": "Start Menu",
      "text": [
        "{C:attention}+#1#{} hand size",
        "Retrigger all Jokers #2# time(s).",
        "{X:chips,C:white} X#3# {} Chips, {X:mult,C:white} X#4# {} Mult",
        "{C:inactive,s:0.8}Start Me Up.{}"
      ],
      "type": "Joker"
    },
    "j_toga_solitairejoker": {
      "name": "Solitaire Joker",
      "text": [
        "{C:attention}+#1#{} hand size",
        "{C:chips}+#2#{} Chips",
        "{C:chips}-#3#{} hand per round",
        "{C:inactive,s:0.8}An Office regular.{}"
      ],
      "type": "Joker"
    },
    "j_toga_drivespace": {
      "name": "DriveSpace",
      "text": [
        "{X:attention,C:white}X#1#{} Blind requirement",
        "when a card {C:attention}scores{}."
      ],
      "type": "Joker"
    },
    "j_toga_win95": {
      "name": "Windows 95",
      "text": [
        "{C:chips}+#1#{} hand(s) & {C:red}+#2#{} discard(s)",
        "upon selecting a {C:attention}Blind{}.",
        "Earn {C:money}$#3#{} at end of round.",
        "If there are {C:attention}#5#{} or fewer",
        "Jokers, get {X:money,C:white}X#4#{} the amount."
      ],
      "type": "Joker"
    },
    "j_toga_win98": {
      "name": "Windows 98",
      "text": [
        "When a card {C:attention}scores{}, {C:attention}#3#%{} of total sell value",
        "of all current Jokers is given as {C:red}Mult{}. {C:inactive,s:0.8}(Currently {C:money,s:0.8}$#4#{C:inactive,s:0.8}){}",
        "Held {C:attention}Consumables{} increase given {C:red}Mult{} by {C:attention}#1#%{} each.",
        "{C:inactive,s:0.8}(Currently #2#%){}"
      ],
      "type": "Joker"
    },
    "j_toga_winmillenium": {
      "name": "Windows ME",
      "text": [
        "Each {C:attention}Joker{} held gives {C:chips}+#1#{} Chips.",
        "Increase {C:attention}individual{} Joker bonus by {C:chips}+#2#{} Chips",
        "for every {C:attention}unique Voucher{} redeemed.",
        "{C:inactive,s:0.8}(Currently {}{C:chips,s:0.8}+#3#{}{C:inactive,s:0.8} per Joker){}"
      ],
      "type": "Joker"
    },
    "j_toga_winnt4": {
      "name": "Windows NT4",
      "text": [
        "Retrigger all",
        "played {C:attention}non-face{} cards",
        "#1# time(s).",
        "{C:inactive,s:0.6}Hang on, this is just a{}",
        "{C:inactive,s:0.6}backwards Sock and Buskin!{}"
      ],
      "type": "Joker"
    },
    "j_toga_win2000": {
      "name": "Windows 2000",
      "text": [
        "Generates a random {C:attention}Tag{}",
        "when completing {C:attention}Blinds{}"
      ],
      "type": "Joker"
    },
    "j_toga_winxp": {
      "name": "Windows XP",
      "text": [
        "Retrigger {C:attention}scored{} cards,",
        "{C:attention}held in hand{} card abilities",
        "and {C:attention}Jokers{} #1# time."
      ],
      "type": "Joker"
    },
    "j_toga_jokersrb2kart": {
      "name": "Karting Joker",
      "text": [
        "Gains {X:mult,C:white}XMult{} when",
        "performing {C:attention}actions{}.",
        "{C:red,s:0.8}Self debuffs if {X:mult,C:white,s:0.8}XMult{C:red,s:0.8} goes below {X:mult,C:white,s:0.8}X1{}{C:red,s:0.8}.{}",
        "{C:inactive}(Currently {}{X:mult,C:white}X#1#{}{C:inactive}){}",
        "{C:inactive,s:0.7}I am literally a racer, what's your excuse?{}"
      ],
      "type": "Joker"
    },
    "j_toga_whatisthis": {
      "name": "65 52 72 6F 52",
      "text": [
        "Held {C:attention}Consumables{} give",
        "{X:dark_edition,C:white}^^#1#{} Mult each.",
        "{C:inactive,s:0.8}What is this?!{}"
      ],
      "type": "Joker"
    },
    "j_toga_quacksoft": {
      "name": "Duck?",
      "text": [
        "{X:dark_edition,C:white}^#1#{} Chips for each",
        "remaining card in the {C:attention}deck{}",
        "{C:inactive,s:0.8}(Currently {}{X:dark_edition,C:white,s:0.8}^#2#{} {C:inactive,s:0.8}Chips){}"
      ],
      "type": "Joker"
    },
    "j_toga_winupdate": {
      "name": "Joker Update",
      "text": [
        "{C:attention}Numerical{} values of a {C:attention}random{} Joker are",
        "increased by {C:attention}#1#%{} when defeating {C:attention}Blinds{}.",
        "{C:inactive,s:0.8}Cannot affect self or copies of self.{}"
      ],
      "type": "Joker"
    },
    "j_toga_virtualmemory": {
      "name": "Virtual Memory",
      "text": [
        "{C:green}#1# in #2#{} chance for each ",
        "scored card to swap currently",
        "scored {C:chips}Chips{} and {C:mult}Mult{}",
        "{C:inactive,s:0.8}Download more RAM, they said...{}"
      ],
      "type": "Joker"
    },
    "j_toga_recyclebin": {
      "name": "Recycle Bin",
      "text": [
        "Right most {C:attention}scoring{} card gives {X:chips,C:white}X#2#{} Chips.",
        "Destroying {C:attention}playing cards{} increases {X:chips,C:white}XChips{}",
        "by {X:chips,C:white}X#1#{} or {X:chips,C:white}X#3#{} if destroyed",
        "card is {C:attention}enhanced{}."
      ],
      "type": "Joker"
    },
    "j_toga_clippit": {
      "name": "Clippit",
      "text": [
        "Rescore all {C:attention}held in hand{}",
        "card abilities {C:attention}#1#{} time(s)."
      ],
      "type": "Joker"
    },
    "j_toga_asterism": {
      "name": "Asterism",
      "text": [
        "{C:mult}+#2#{} Mult per",
        "{C:planet}Planet{} card",
        "used this run",
        "{C:inactive}(Currently {}{C:mult}+#1#{}{C:inactive}){}"
      ],
      "type": "Joker"
    },
    "j_toga_theinternet": {
      "name": "The Internet",
      "text": [
        "{C:chips}+#2#{} Chips per",
        "any {C:dark_edition}Consumable{}",
        "used this run",
        "{C:inactive}(Currently {}{C:chips}+#1#{}{C:inactive}){}"
      ],
      "type": "Joker"
    },
    "j_toga_computerlock": {
      "name": "Computer Lock",
      "text": [
        "When sold, adjacent",
        "{C:attention}Jokers{} become {C:dark_edition}Eternal{}.",
        "If {C:attention}already{} {C:dark_edition}Eternal{},",
        "remove instead."
      ],
      "type": "Joker"
    },
    "j_toga_bonusducks": {
      "name": "Bonus Ducks",
      "text": [
        "All played {C:attention}face{}",
        "cards become",
        "{C:chips}Bonus{} cards",
        "when scored"
      ],
      "type": "Joker"
    },
    "j_toga_pso2ironwill": {
      "name": "Skill: Iron Will",
      "text": [
        "When ready and if you have at least {C:money}$1{},",
        "lose all held {C:money}money{}, prevents death and",
        "becomes {C:attention}inactive{}. Recharges after",
        "defeating a {C:attention}Boss Blind{}.",
        "{C:inactive,s:0.8}Currently: #2#{}"
      ],
      "type": "Joker"
    },
    "j_toga_systemrestore": {
      "name": "System Restore",
      "text": [
        "When {C:attention}playing cards{} are {C:red}destroyed{}, copy the",
        "{C:attention}first{} destroyed card into the deck with",
        "additional duplicates of it for",
        "{C:attention}each{} other destroyed card."
      ],
      "type": "Joker"
    },
    "j_toga_spacecadetpinball": {
      "name": "Space Cadet",
      "text": [
        "{C:green}#3# in 3{} chance to {C:attention}rescore{} a",
        "random scoring card by this",
        "{C:attention}Joker{}. For every {C:money}$#1#{} held,",
        "try to {C:attention}rescore{} again.",
        "{C:inactive,s:0.8}Currently #2# attempts.{}",
        "After the played cards are {C:attention}scored{},",
        "{C:green}#3# in 3{} chance to perform {C:attention}additional scoring{}",
        "of a {C:attention}random{} card in the scoring hand.",
        "{s:0.9}For every {C:money,s:0.9}$20{s:0.9} held, this is done {C:attention,s:0.9}once{s:0.9} more.",
        "{C:inactive,s:0.8}Currently #2# attempts.{}"
      ],
      "type": "Joker"
    },
    "j_toga_heartyspades": {
      "name": "Hearty Spades",
      "text": [
        "{C:hearts}Hearts{} and {C:spades}Spades{}",
        "count as the same suit"
      ],
      "type": "Joker"
    },
    "j_toga_rover": {
      "name": "Rover",
      "text": [
        "After scoring of {C:attention}played{} cards,",
        "each card in the {C:attention}deck{} has a",
        "{C:green}#1# in #2#{} chance to be {C:attention}scored{}",
        "as well"
      ],
      "type": "Joker"
    },
    "j_toga_binaryjkr": {
      "name": "Binary Joker",
      "text": [
        "{C:attention}10s{} are",
        "considered as {C:attention}2s{}"
      ],
      "type": "Joker"
    },
    "j_toga_hexadecimaljkr": {
      "name": "Hexadecimal Joker",
      "text": [
        "{C:attention}Aces{} are",
        "considered as {C:attention}10s{}"
      ],
      "type": "Joker"
    },
    "j_toga_y2ksticker": {
      "name": "Y2K Sticker",
      "text": [
        "{C:attention}2s{} are",
        "considered as",
        "{C:attention}face cards{}"
      ],
      "type": "Joker"
    },
    "j_toga_michaelrosen": {
      "name": "Michael Rosen",
      "text": [
        "{C:attention}Each effect{} has a {C:green}#1# in #2#{} chance",
        "to be given by cards {C:attention}held in hand{}.",
        "{C:inactive,s:0.8}*click* Nice.{}"
      ],
      "type": "Joker"
    },
    "j_toga_jimboplus": {
      "name": "JimboPlus!",
      "text": [
        "Scoring cards give {X:mult,C:white}XMult{}",
        "depending on {C:attention}Jokers{} currently held.",
        "{C:attention}Jimbos{} give {X:mult,C:white}X#1#{} Mult instead of",
        "{X:mult,C:white}X#2#{} Mult for every other Joker.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#3#{} {C:inactive}Mult){}",
        "{C:inactive,s:0.8}Copies of this Joker{}",
        "{C:inactive,s:0.8}do not contribute to XMult.{}"
      ],
      "type": "Joker"
    },
    "j_toga_speedsneakers": {
      "name": "Speed Shoes",
      "text": [
        "{X:mult,C:white}X#1#{} Mult for every {C:money}$#2#{} you have",
        "{C:inactive}(Currently {}{X:mult,C:white}X#3#{} {C:inactive}Mult){}"
      ],
      "type": "Joker"
    },
    "j_toga_tomscott": {
      "name": "Tom Scott",
      "text": [
        "Gives {X:mult,C:white}X#1#{} Mult for every",
        "{C:attention}copy{} of itself held",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{} {C:inactive}Mult){}",
        "{C:inactive,s:0.8}Stacks multiplicatively.{}"
      ],
      "type": "Joker"
    },
    "j_toga_megasxlr": {
      "name": "Megas XLR",
      "text": [
        "{C:attention}8s{} are",
        "considered",
        "as {C:attention}Kings{}"
      ],
      "type": "Joker"
    },
    "j_toga_jarate": {
      "name": "Jarate",
      "text": [
        "{C:attention}#1#% Blind{} requirements",
        "when selecting a {C:attention}Boss Blind{}.",
        "Scored cards {C:attention}lose{} their",
        "enhancements, editions and seals.",
        "Recharges when {C:attention}entering{} shop.",
        "{C:inactive,s:0.8}#2#"
      ],
      "type": "Joker"
    },
    "j_toga_goldenwrench": {
      "name": "Golden Wrench",
      "text": [
        "Does nothing...",
        "{C:inactive,s:0.8}Wonder what happens if this{}",
        "{C:inactive,s:0.8}happened to be destroyed...{}"
      ],
      "type": "Joker"
    },
    "j_toga_virtualpc": {
      "name": "Virtual PC",
      "text": [
        "{C:green}#1# in #2#{} chance to copy",
        "an ability of {C:attention}any{}",
        "compatible {C:attention}Joker{} held"
      ],
      "type": "Joker"
    },
    "j_toga_ie": {
      "name": "Internet Explorer",
      "text": [
        "When {C:attention}leaving{} shop, {C:attention}upgrade per-level{} {C:blue}Chips{} and {C:red}Mult{}",
        "of a {C:attention}random{} poker hand by {C:blue}#1#%{} and {C:red}#2#%{} of {C:attention}base{}",
        "{C:blue}Chips{} and {C:red}Mult{} of said poker hand respectively."
      ],
      "type": "Joker"
    },
    "j_toga_winvista": {
      "name": "Windows Vista",
      "text": [
        "If the played hand contains",
        "a single {C:attention}6{}, {C:red}destroy{} it and",
        "convert the existing {C:attention}Edition{} of",
        "a {C:attention}random{} Joker to {C:dark_edition}Negative{}",
        "{C:inactive,s:0.8}(Cannot target already {C:dark_edition,s:0.8}Negative{C:inactive,s:0.8} Jokers.){}"
      ],
      "type": "Joker"
    },
    "j_toga_win7": {
      "name": "Windows 7",
      "text": [
        "Cards {C:attention}held in hand{}",
        "give {X:mult,C:white}X#1#{} Mult for",
        "every {C:blue}Common{} Joker held"
      ],
      "type": "Joker"
    },
    "j_toga_win8": {
      "name": "Windows 8",
      "text": [
        "Each {C:attention}8{} {C:red}discarded{} this round",
        "or in the remaining {C:attention}deck{}",
        "gives {X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_toga_penwheel": {
      "name": "Pen Wheel",
      "text": [
        "Each {C:colourcard}Colour{} card held",
        "gives {C:money}$#1#{} at end of round"
      ],
      "type": "Joker"
    },
    "j_toga_displayproperties": {
      "name": "Display Properties",
      "text": [
        "At end of round, {C:attention}round increase{} of",
        "held {C:colourcard}Colour{} cards is triggered again"
      ],
      "type": "Joker"
    },
    "j_toga_colourfulprinter": {
      "name": "Colourful Printer",
      "text": [
        "When {C:attention}Blind{} is selected,",
        "print a {C:colourcard}Colour{} card"
      ],
      "type": "Joker"
    },
    "j_toga_internetspades": {
      "name": "Internet Spades",
      "text": [
        "If {C:attention}played hand{} contains",
        "only {C:spades}Spades{}, each held",
        "{C:attention}Consumeable{} gives {X:chips,C:white}X#1#{} Chips",
        "per {C:attention}Ahead Joker{} held."
      ],
      "type": "Joker"
    },
    "j_toga_spiceoflife": {
      "name": "Spice of Life",
      "text": [
        "For every {C:attention}unique{} {C:bakery}Bakery{} good",
        "held, retrigger each one {C:attention}once{}."
      ],
      "type": "Joker"
    },
    "j_toga_spiceoflife_rtrg": {
      "name": "Spice of Life",
      "text": [
        "For every {C:attention}unique{} {C:bakery}Bakery{} good",
        "held, retrigger each one {C:attention}once{}.",
        "{C:inactive}(Retriggers: {C:attention}#1#{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_toga_skype": {
      "name": "Skype",
      "text": [
        "{X:mult,C:white}X#1#{} Mult per {C:attention}each mod{} among",
        "held {C:attention}Jokers{} and {C:attention}Consumeables{}.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{}{C:inactive}, #3# mod.){}",
        "{C:inactive,s:0.7}RIP Skype (2003 - 2025){}"
      ],
      "type": "Joker"
    },
    "j_toga_skype_moremod": {
      "name": "Skype",
      "text": [
        "{X:mult,C:white}X#1#{} Mult per {C:attention}each mod{} among",
        "held {C:attention}Jokers{} and {C:attention}Consumeables{}.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{}{C:inactive}, #3# mods.){}",
        "{C:inactive,s:0.7}RIP Skype (2003 - 2025){}"
      ],
      "type": "Joker"
    },
    "j_toga_msn": {
      "name": "MSN",
      "text": [
        "This Joker gives",
        "{C:attention}stacking{} {X:mult,C:white}X#1#{} Mult",
        "per {C:attention}unique{} enhancement",
        "in the {C:attention}full{} deck.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{}{C:inactive}){}"
      ],
      "type": "Joker"
    },
    "j_toga_albanianvirus": {
      "name": "Albanian Virus",
      "text": [
        "{s:0.9}Hi, I am an Albanian virus but because of poor technology in",
        "{s:0.9}my country unfortunately I am not able to harm your run.",
        "{s:0.9}Please be so kind to destroy one of your important",
        "{s:0.9}cards yourself and then forward me to other users. Many thanks",
        "{s:0.9}for your cooperation! Best regards,Albanian virus"
      ],
      "type": "Joker"
    },
    "j_toga_mac_os_9": {
      "name": "Mac OS 9",
      "text": [
        "Held in hand {C:clubs}Clubs{}",
        "give {X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_toga_mac_os_x": {
      "name": "Mac OS X",
      "text": [
        "Held in hand {C:attention}10s{}",
        "give {X:chips,C:white}X#1#{} Chips"
      ],
      "type": "Joker"
    },
    "j_toga_linux_ubuntu": {
      "name": "Ubuntu",
      "text": [
        "{C:attention}Jokers{} and {C:attention}Consumeables{} give {C:attention}#1#%{}",
        "of their {C:money}sell value{} as {X:mult,C:white}XMult{}."
      ],
      "type": "Joker"
    },
    "j_toga_linux_debian": {
      "name": "Debian",
      "text": [
        "Halves all {C:attention}listed",
        "{C:green,E:1,s:1.1}probabilities",
        "{C:inactive}(ex: {C:green}1 in 3{C:inactive} -> {C:green}0.5 in 3{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_toga_linux_slackware": {
      "name": "Slackware Linux",
      "text": [
        "If more than 2 suits are {C:attention}played{},",
        "scoring cards give {X:mult,C:white}X#1#{} Mult per",
        "{C:attention}additional{} base suit in played hand.",
        "{C:inactive,s:0.8}(Ignores Wild Card, Smeared Joker, etc.){}"
      ],
      "type": "Joker"
    },
    "j_toga_linux_slackware_cardsel": {
      "name": "Slackware Linux",
      "text": [
        "If more than 2 suits are {C:attention}played{},",
        "scoring cards give {X:mult,C:white}X#1#{} Mult per",
        "{C:attention}additional{} suit in played hand.",
        "{C:inactive,s:0.9}(Current card selection gives {}{X:mult,C:white,s:0.9}X#2#{}{C:inactive,s:0.9}){}",
        "{C:inactive,s:0.8}(Ignores Wild Card, Hearty Spades, etc.){}"
      ],
      "type": "Joker"
    },
    "j_toga_linux_redhat": {
      "name": "Red Hat Linux",
      "text": [
        "For every {C:attention}poker hand{} in",
        "played hand, gain {X:mult,C:white}X#1#{} Mult.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{}{C:inactive}){}",
        "{C:inactive,s:0.8}(High Card excluded.){}"
      ],
      "type": "Joker"
    },
    "j_toga_linux_redhat_cardsel": {
      "name": "Red Hat Linux",
      "text": [
        "For every {C:attention}poker hand{} in",
        "played hand, gain {X:mult,C:white}X#1#{} Mult.",
        "{C:inactive}(Currently {}{X:mult,C:white}X#2#{}{C:inactive}){}",
        "{C:inactive,s:0.8}(Poker hands: #3#, High Card excluded.){}"
      ],
      "type": "Joker"
    },
    "j_toga_horseconch": {
      "name": "The Horse Conch",
      "text": [
        "Held cards with {C:attention}Horse Seals{}",
        "give {X:mult,C:white}X#1#{} Mult and {C:money}$#2#{}"
      ],
      "type": "Joker"
    },
    "j_toga_gatosorrindo": {
      "name": "Gato Sorrindo",
      "text": [
        "Each held {C:attention}Cat Joker{}",
        "gives {X:chips,C:white}X#1#{} Chips",
        "{C:inactive,s:0.75}(Excluding self and copies of self.){}"
      ],
      "type": "Joker"
    },
    "m_toga_notification": {
      "name": "Notification",
      "text": [
        "{s:0.9}Wherever applicable,",
        "{C:attention,s:0.9}always{s:0.9} gets drawn",
        "{s:0.9}to hand.{}"
      ],
      "type": "Enhanced"
    },
    "m_toga_sms": {
      "name": "SMS",
      "text": [
        "{s:0.9}Deprioritized when {C:attention,s:0.9}drawing{s:0.9} cards.",
        "{s:0.9}If in {C:attention,s:0.9}deck{s:0.9} and playing a hand,",
        "{s:0.9}this card is {C:attention,s:0.9}forced{s:0.9} into play."
      ],
      "type": "Enhanced"
    },
    "m_toga_coalcoke": {
      "name": "Coal Coke Card",
      "text": [
        "{C:chips}+#1#{} Chips",
        "while this card",
        "stays in hand",
        "No rank or suit"
      ],
      "type": "Enhanced"
    },
    "m_toga_iron": {
      "name": "Iron Card",
      "text": [
        "{X:mult,C:white}X#1#{} Mult",
        "while this card",
        "stays in hand"
      ],
      "type": "Enhanced"
    },
    "m_toga_silver": {
      "name": "Silver Card",
      "text": [
        "{X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Enhanced"
    },
    "m_toga_electrum": {
      "name": "Electrum Card",
      "text": [
        "Earn {C:money}$#1#{} and",
        "{X:mult,C:white}X#2#{} Mult",
        "when scored"
      ],
      "type": "Enhanced"
    },
    "m_toga_copper": {
      "name": "Copper Card",
      "text": [
        "{X:chips,C:white}X#1#{} Chips",
        "while this card",
        "stays in hand"
      ],
      "type": "Enhanced"
    },
    "m_toga_tin": {
      "name": "Tin Card",
      "text": [
        "Always scores"
      ],
      "type": "Enhanced"
    },
    "m_toga_bronze": {
      "name": "Bronze Card",
      "text": [
        "{X:chips,C:white}X#1#{} Chips",
        "while this card",
        "stays in hand"
      ],
      "type": "Enhanced"
    },
    "m_toga_osmium": {
      "name": "Osmium Card",
      "text": [
        "{X:chips,C:white}X#1#{} Chips"
      ],
      "type": "Enhanced"
    },
    "c_toga_furnace": {
      "name": "Smeltery",
      "text": [
        "Processes specific recipes",
        "depending on cards selected",
        "Cost per use: {C:money}$#2#{}",
        "{C:inactive,s:0.8}If you can pay for another{}",
        "{C:inactive,s:0.8}use, keep on use.{}"
      ],
      "type": "Tarot"
    },
    "c_toga_furnace_ready": {
      "name": "Smeltery",
      "text": [
        "Processes specific recipes",
        "depending on cards selected",
        "Current recipe found:",
        "{C:attention,s:0.9}#1#{}",
        " ",
        "Cost per use: {C:money}$#2#{}",
        "{C:inactive,s:0.8}If you can pay for another{}",
        "{C:inactive,s:0.8}use, keep on use.{}"
      ],
      "type": "Tarot"
    },
    "c_toga_furnace_novalidrecipe": {
      "name": "Smeltery",
      "text": [
        "Processes specific recipes",
        "depending on cards selected",
        "{C:inactive,s:0.9}#1#{}",
        "{C:inactive,s:0.8}If you can pay for another{}",
        "{C:inactive,s:0.8}use, keep on use.{}"
      ],
      "type": "Tarot"
    },
    "c_toga_miningprospect": {
      "name": "Prospect",
      "text": [
        "Destroys {T:m_stone,C:attention}Stone Cards{} in the {C:attention}full deck{}.",
        "{C:green}#1# in #2#{} chance for a {T:m_stone,C:attention}Stone Card{} to",
        "convert into a {C:attention}Mineral{} card instead.",
        "{C:inactive,s:0.8}Hold Left SHIFT before hovering over{}",
        "{C:inactive,s:0.8}this card to show the Mineral pool.{}"
      ],
      "type": "Tarot"
    },
    "c_toga_miningprospect_showminerals": {
      "name": "Prospect",
      "text": [
        "Destroys {T:m_stone,C:attention}Stone Cards{} in the {C:attention}full deck{}.",
        "{C:green}#1# in #2#{} chance for a {T:m_stone,C:attention}Stone Card{} to",
        "convert into a {C:attention}Mineral{} card instead."
      ],
      "type": "Tarot"
    },
    "c_toga_bombshee": {
      "name": "Bomb?",
      "text": [
        "Get him off?"
      ],
      "type": "Tarot"
    },
    "c_toga_bombshee_n": {
      "name": "Bomb?",
      "text": [
        "Hi."
      ],
      "type": "Tarot"
    },
    "c_toga_selfpropelledbomb": {
      "name": "Self-Propelled Bomb",
      "text": [
        "Destroys up to {C:attention}#1#{} cards in the {C:attention}deck{}.",
        "{C:inactive,s:0.8}({C:attention,s:0.8}#4#{C:inactive,s:0.8} cards or {C:attention,s:0.8}#5#%{C:inactive,s:0.8} of the deck, whichever is larger.)",
        "If sold or destroyed, {C:green}#3# in #2#{}",
        "chance to trigger anyway."
      ],
      "type": "Spectral"
    },
    "c_toga_sealingaround": {
      "name": "Sealing Around",
      "text": [
        "Add a {C:attention}Seal^2{}",
        "to {C:attention}#1#{} selected",
        "card in your hand"
      ],
      "type": "Spectral"
    },
    "c_toga_filesource": {
      "name": "File Source",
      "text": [
        "Enhances {C:attention}#1#{} selected cards",
        "to {C:attention}Notification{} cards"
      ],
      "type": "Spectral"
    },
    "c_toga_mobilephone": {
      "name": "Phone",
      "text": [
        "Enhances {C:attention}#1#{} selected cards",
        "to {C:attention}SMS{} cards"
      ],
      "type": "Spectral"
    },
    "c_toga_hyperlink": {
      "name": "Hyperlink",
      "text": [
        "Add a {C:attention}Hyperlink Seal{}",
        "to {C:attention}#1#{} selected",
        "card in your hand"
      ],
      "type": "Spectral"
    },
    "tag_toga_togajokershop": {
      "name": "Spare CD Tag",
      "text": [
        "Shop has a free",
        "{C:attention}TOGA Joker{}"
      ],
      "type": "Tag"
    },
    "tag_toga_togajokerbooster": {
      "name": "Application Tag",
      "text": [
        "Gives a free",
        "{C:attention}ZIP Package{}"
      ],
      "type": "Tag"
    },
    "tag_toga_togajokerziparchive": {
      "name": "Joker.ZIP Tag",
      "text": [
        "Gives a free",
        "{C:attention}Joker.ZIP{}"
      ],
      "type": "Tag"
    },
    "tag_toga_thespbroll": {
      "name": "SPB Tag",
      "text": [
        "Get a",
        "{C:attention}Self-Propelled{}",
        "{C:attention}Bomb{}"
      ],
      "type": "Tag"
    },
    "tag_toga_guaranteedice": {
      "name": "D20 Tag",
      "text": [
        "Shop has an",
        "{C:attention}Oops, all 6s{}"
      ],
      "type": "Tag"
    },
    "tag_toga_thenet": {
      "name": "Globe Tag",
      "text": [
        "Gives a free",
        "{C:spectral}Black Hole{}"
      ],
      "type": "Tag"
    },
    "tag_toga_thenet_cryptid": {
      "name": "Globe Tag",
      "text": [
        "Gives a free {C:spectral}Black Hole{}",
        "{C:green,s:0.75}#1# in #2# {C:inactive,s:0.75}chance for {C:spectral,s:0.75}White Hole{C:inactive,s:0.75} instead"
      ],
      "type": "Tag"
    },
    "tag_toga_controlexe": {
      "name": "Settings Tag",
      "text": [
        "Applies a random {C:dark_edition}edition{}",
        "to a random {C:attention}Joker{}",
        "{C:inactive,s:0.8}May replace current edition{}",
        "{C:inactive,s:0.8}if one is present.{}"
      ],
      "type": "Tag"
    },
    "tag_toga_thelegend": {
      "name": "Dragon Tag",
      "text": [
        "Shop has a",
        "{C:dark_edition}Legendary{} Joker"
      ],
      "type": "Tag"
    },
    "tag_toga_togarararchive": {
      "name": "RAR Tag",
      "text": [
        "Gives a free",
        "{C:attention}CONSUMAB.RAR{}"
      ],
      "type": "Tag"
    },
    "tag_toga_togacardcabarchive": {
      "name": "Solitaire Tag",
      "text": [
        "Gives a free",
        "{C:attention}PLAYCARD.CAB{}"
      ],
      "type": "Tag"
    },
    "tag_toga_togaxcopydnaarchive": {
      "name": "XCOPY Tag",
      "text": [
        "Gives a free",
        "{C:attention}XCOPY.DNA{}"
      ],
      "type": "Tag"
    },
    "v_toga_fat32": {
      "name": "FAT32 Converter",
      "text": [
        "{C:attention}+#1#%{} {C:inactive}(of current){} hand size",
        "{C:inactive,s:0.8}(Rounded up.){}"
      ],
      "type": "Voucher"
    },
    "v_toga_hardwarewizard": {
      "name": "Hardware Wizard",
      "text": [
        "Multiplies all {C:attention}listed{} {E:1,C:green}probabilities{}",
        "for the rest of the run by {X:attention,C:white}X#1#{}",
        "{C:inactive}(ex: {}{C:green}1 in 3{}{C:inactive} -> {}{C:green}#1# in 3{}{C:inactive}){}"
      ],
      "type": "Voucher"
    },
    "v_toga_hardwarewizardxp": {
      "name": "Hardware Wizard (XP)",
      "text": [
        "Multiplies all {C:attention}listed{} {E:1,C:green}probabilities{}",
        "for the rest of the run by {X:attention,C:white}X#1#{}",
        "{C:inactive}(ex: {}{C:green}1 in 3{}{C:inactive} -> {}{C:green}#1# in 3{}{C:inactive}){}"
      ],
      "type": "Voucher"
    },
    "v_toga_diskdefrag": {
      "name": "Disk Defragmenter",
      "text": [
        "{C:red}-#1#{} discard each round.",
        "{C:red}+#1#{} discard after",
        "playing any hand."
      ],
      "type": "Voucher"
    },
    "v_toga_mspaint": {
      "name": "Microsoft Paint",
      "text": [
        "{C:red}#2#{} {C:attention}Joker{} slots",
        "{C:attention}Held in hand{} cards give",
        "{X:dark_edition,C:white}^#1#{} Chips this run"
      ],
      "type": "Voucher"
    },
    "v_toga_dataflush": {
      "name": "ipconfig /flushdns",
      "text": [
        "Discarding hands containing a {C:attention}Flush{}",
        "creates a {C:dark_edition}Negative{} copy of a random",
        "{C:attention}consumable{} card currently held."
      ],
      "type": "Voucher"
    },
    "v_toga_dataflush_multiple": {
      "name": "ipconfig /flushdns",
      "text": [
        "Discarding hands containing a {C:attention}Flush{}",
        "creates #1# {C:dark_edition}Negative{} copies of a random",
        "{C:attention}consumable{} card currently held."
      ],
      "type": "Voucher"
    },
    "v_toga_wormsninjarope": {
      "name": "Ninja Rope",
      "text": [
        "{C:attention}+#1#{} card selection limit",
        "{C:inactive,s:0.8}Hey, this is familiar...{}"
      ],
      "type": "Voucher"
    },
    "v_toga_wormsscalesofjustice": {
      "name": "Scales of Justice",
      "text": [
        "Even the scales.",
        "{C:inactive,s:0.8}Use wisely.{}"
      ],
      "type": "Voucher"
    },
    "v_toga_sealegg": {
      "name": "Sealing Egg",
      "text": [
        "{C:attention,T:j_egg}Eggs{} created by {C:attention,T:toga_sealseal_seal}Seal^2{} have a",
        "{C:green}#1# in #2#{} chance to be {C:dark_edition}Negative{}."
      ],
      "type": "Voucher"
    },
    "v_toga_caniofferyouanegg": {
      "name": "Can I Offer You An Egg In These Times",
      "text": [
        "{C:attention,T:j_egg}Eggs{} created by {C:attention,T:toga_sealseal_seal}Seal^2{} {E:1,C:green}will{} be {C:dark_edition}Negative{}."
      ],
      "type": "Voucher"
    },
    "v_toga_spectralzipper": {
      "name": "Spectral Zipper",
      "text": [
        "{C:attention}Joker.ZIP{} and {C:attention}CONSUMAB.RAR{}",
        "have a {C:green}#1# in #2#{} chance to",
        "contain {C:dark_edition}Legendary{} items."
      ],
      "type": "Voucher"
    },
    "v_toga_auroramatter": {
      "name": "Aurora Matter",
      "text": [
        "{C:dark_edition}Negative{} cards are {X:attention,C:white}#1#X{}",
        "more likely to appear"
      ],
      "type": "Voucher"
    },
    "v_toga_quantummatter": {
      "name": "Quantum Matter",
      "text": [
        "{C:dark_edition}Negative{} cards are {X:dark_edition,C:white}#1#X{}",
        "more likely to appear"
      ],
      "type": "Voucher"
    },
    "toga_sealseal": {
      "name": "Seal^2",
      "text": [
        "Creates an {C:attention,T:j_egg}Egg",
        "when scored",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Other"
    },
    "toga_sealseal_alt1": {
      "name": "Seal^2 - Upgraded",
      "text": [
        "Creates an {C:attention,T:j_egg}Egg{} when scored",
        "{C:green}#1# in #2#{} chance to be {C:dark_edition}Negative{}",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Other"
    },
    "toga_sealseal_alt2": {
      "name": "Seal^2 - Upgraded",
      "text": [
        "Creates a {C:dark_edition}Negative{}",
        "{C:attention,T:j_egg}Egg{} when scored"
      ],
      "type": "Other"
    },
    "toga_urlseal_seal": {
      "name": "Hyperlink Seal",
      "text": [
        "{C:dark_edition,E:1,s:3}THIS IS NOT A JOKE{}",
        "{s:2}You are the 100.000th visitor of the day!{}",
        "{C:spectral,E:1,s:2}Click here{}",
        "{C:attention}Held in hand{} abilities",
        "of this card trigger",
        "{C:attention}even{} if {C:attention}not{} in hand."
      ],
      "type": "Other"
    },
    "toga_albavirusinfo": {
      "name": "Heads up!",
      "text": [
        "Selling or destroying this card",
        "without selling or destroying",
        "a different one will actually",
        "lose the run. If this tooltip",
        "does not appear, it is",
        "safe to remove."
      ],
      "type": "Other"
    },
    "p_toga_togazipboosterpack": {
      "name": "ZIP Package",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{} TOGA Jokers"
      ],
      "type": "Other"
    },
    "p_toga_togaziparchivepack": {
      "name": "Joker.ZIP",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{} random {C:attention}Jokers{}"
      ],
      "type": "Other"
    },
    "p_toga_togararpack": {
      "name": "CONSUMAB.RAR",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{} random {C:attention}Consumables{}"
      ],
      "type": "Other"
    },
    "p_toga_togacardcabpack": {
      "name": "PLAYCARD.CAB",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{} {C:attention}Playing{} cards to",
        "add to your deck"
      ],
      "type": "Other"
    },
    "p_toga_togaxcopydnapack": {
      "name": "XCOPY.DNA",
      "text": [
        "Choose {C:attention}#1#{} of up to {C:attention}#2#{} {C:attention}copies{} of",
        "{C:attention}Playing{} cards in your deck"
      ],
      "type": "Other"
    },
    "toga_clippyorigin": {
      "name": "Clippit?",
      "text": [
        "That's his {C:attention}original{}",
        "name, yes."
      ],
      "type": "Other"
    },
    "toga_kartjokerlist": {
      "name": "Eligible Actions:",
      "text": [
        "{C:attention}Buying{}, {C:money}selling{}, {C:attention}using{},",
        "{C:attention}adding{} cards to deck;",
        "{C:attention}opening{} booster packs;",
        "{C:attention}rerolling{} shop; ({X:mult,C:white}X#1#{})",
        "{C:attention}leaving{} shop. ({X:mult,C:white}X#2#{})"
      ],
      "type": "Other"
    },
    "toga_kartjokershortcut": {
      "name": "Shortcut:",
      "text": [
        "Skipping {C:attention}blinds{} or {C:attention}booster packs{}",
        "has a {C:green}#1# in #2#{} chance to gain",
        "{X:mult,C:white}X#3#{} instead of {C:attention}losing{} {C:red}#4#%{}",
        "of currently accumulated {X:mult,C:white}XMult{}."
      ],
      "type": "Other"
    },
    "toga_kartjokershortcutspecial": {
      "name": "Cutting ahead:",
      "text": [
        "Gain {X:mult,C:white}X#1#{} when skipping",
        "{C:attention}blinds{} or {C:attention}booster packs{}",
        "{E:1,C:inactive,s:0.8}Careful to not hit that tree!"
      ],
      "type": "Other"
    },
    "toga_useraccountsinfo": {
      "name": "Formula",
      "text": [
        "({C:attention}Joker slots{} + {C:attention}Consumable{} slots",
        "+ {C:blue}hands{} left + {C:red}discards{} left) / 4"
      ],
      "type": "Other"
    },
    "toga_roseneffects": {
      "name": "Possible effects:",
      "text": [
        "{C:money}$#1#{}, {X:chips,C:white}X#2#{} Chips, {X:mult,C:white}X#3#{} Mult"
      ],
      "type": "Other"
    },
    "toga_rosentalismanextra": {
      "name": "With Talisman installed",
      "text": [
        "{X:dark_edition,C:white}^#1#{} Chips, {X:dark_edition,C:white}^^#2#{} Chips, {X:dark_edition,C:white}^^^#3#{} Chips",
        "{X:dark_edition,C:white}^#4#{} Mult, {X:dark_edition,C:white}^^#5#{} Mult, {X:dark_edition,C:white}^^^#6#{} Mult",
        "{C:inactive,s:0.7}(10x, 20x and 40x less likely to be rolled respectively.){}"
      ],
      "type": "Other"
    },
    "toga_jokerzipupgrade": {
      "name": "Spectral Zipper",
      "text": [
        "{C:green}#1# in #2#{} chance to have a",
        "{C:dark_edition}Legendary{} {C:attention}Joker{}."
      ],
      "type": "Other"
    },
    "toga_consumabrarupgrade": {
      "name": "Spectral Zipper",
      "text": [
        "{C:green}#1# in #2#{} chance",
        "to contain {C:dark_edition}The Soul{}."
      ],
      "type": "Other"
    },
    "toga_scales1": {
      "name": "Averages:",
      "text": [
        "Joker & Consumable {C:attention}slots{},",
        "{C:attention}hand size{} and {C:attention}card selection limit{}."
      ],
      "type": "Other"
    },
    "toga_scales2": {
      "name": "Averages:",
      "text": [
        "{C:attention}Poker hand{} {C:planet}levels{}."
      ],
      "type": "Other"
    },
    "toga_scales3": {
      "name": "Averages:",
      "text": [
        "{C:blue}Hands{} and {C:red}discards{}."
      ],
      "type": "Other"
    },
    "toga_alloysteel": {
      "name": "Steel Card Recipe",
      "text": [
        "1x Iron + 1x Coal Coke (consumed) = 1x Steel"
      ],
      "type": "Other"
    },
    "toga_alloyelectrum": {
      "name": "Electrum Card Recipe",
      "text": [
        "1x Gold + 1x Silver = 2x Electrum"
      ],
      "type": "Other"
    },
    "toga_alloybronze": {
      "name": "Bronze Card Recipe",
      "text": [
        "3x Copper + 1x Tin = 4x Bronze"
      ],
      "type": "Other"
    },
    "pnr_toga_startupdisk": {
      "name": "Startup Diskette",
      "text": [
        "Reduces {C:attention}Blind requirements{} by {C:attention}#2#%{}",
        "when {C:attention}Blind{} is selected."
      ],
      "type": "Partner"
    },
    "pnr_toga_startupdisk_buff": {
      "name": "Startup Diskette",
      "text": [
        "Reduces {C:attention}Blind requirements{} by {C:attention}#2#%{}",
        "when {C:attention}Blind{} is selected, with additional {C:attention}#3#%{}",
        "provided by currently held {C:attention}Windows OS Jokers{}.",
        "{C:inactive}(Currently {C:attention}#1#%{C:inactive})"
      ],
      "type": "Partner"
    },
    "pnr_toga_amongusplushie": {
      "name": "Among Us Plushie",
      "text": [
        "{C:green}#1# in #2#{} chance to give {C:attention}bonus{}",
        "{C:money}money{} at end of round.",
        "{C:inactive,s:0.8}#3#% of currently held money or $10,{}",
        "{C:inactive,s:0.8}whichever is higher.{}",
        "{C:inactive,s:0.75}Spin speed is tied to money held.{}"
      ],
      "type": "Partner"
    },
    "c_toga_classic": {
      "name": "Classic",
      "text": [
        "Create a {C:attention,t:tag_toga_togajokerziparchive}Joker.ZIP Tag{}",
        "for every {C:attention}#4#{} rounds",
        "this has been held",
        "{C:inactive}(Currently {C:attention}#1#{C:inactive}, {}[{C:attention}#2#{C:inactive}#3#{}]{C:inactive})",
        "MoreFluff",
        "Multi"
      ],
      "type": "Colour"
    },
    "c_toga_professional": {
      "name": "Professional",
      "text": [
        "Create a {C:attention,t:tag_toga_togarararchive}RAR Tag{}",
        "for every {C:attention}#4#{} rounds",
        "this has been held",
        "{C:inactive}(Currently {C:attention}#1#{C:inactive}, {}[{C:attention}#2#{C:inactive}#3#{}]{C:inactive})",
        "MoreFluff",
        "Multi"
      ],
      "type": "Colour"
    },
    "c_toga_luna": {
      "name": "Luna",
      "text": [
        "Create a {C:attention,t:tag_toga_togacardcabarchive}Solitaire Tag{}",
        "for every {C:attention}#4#{} rounds",
        "this has been held",
        "{C:inactive}(Currently {C:attention}#1#{C:inactive}, {}[{C:attention}#2#{C:inactive}#3#{}]{C:inactive})",
        "MoreFluff",
        "Multi"
      ],
      "type": "Colour"
    },
    "c_toga_aero": {
      "name": "Aero",
      "text": [
        "Create a {C:attention,t:tag_toga_togaxcopydnaarchive}XCOPY Tag{}",
        "for every {C:attention}#4#{} rounds",
        "this has been held",
        "{C:inactive}(Currently {C:attention}#1#{C:inactive}, {}[{C:attention}#2#{C:inactive}#3#{}]{C:inactive})",
        "MoreFluff",
        "Multi"
      ],
      "type": "Colour"
    },
    "sleeve_toga_frog": {
      "name": "Frog Sleeve",
      "text": [
        "{C:blue}+#1#{} hand, {C:red}+#2#{} discard,",
        "{C:red}#3#{} hand size"
      ],
      "type": "Sleeve"
    },
    "sleeve_toga_bluemountain": {
      "name": "Blue Mountain Sleeve",
      "text": [
        "Scoring is triggered",
        "in reverse order."
      ],
      "type": "Sleeve"
    },
    "sleeve_toga_bluemountain_kart": {
      "name": "Run It Back Mountain Sleeve",
      "text": [
        "Playing cards are also",
        "triggered in reverse order.",
        "{C:inactive,s:0.8}'Run it back!'{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_toga_bluemountain_drunk": {
      "name": "Blue Mountain Sleeve",
      "text": [
        "Scoring is triggered",
        "in normal order.",
        "{C:inactive,s:0.8}Wait...{}"
      ],
      "type": "Sleeve"
    },
    "togazipboosterpack": {
      "name": "\"ZIP Package\"",
      "text": [],
      "type": "dictionary"
    },
    "togaziparchivepack": {
      "name": "\"Joker.ZIP\"",
      "text": [],
      "type": "dictionary"
    },
    "togararpack": {
      "name": "\"CONSUMAB.RAR\"",
      "text": [],
      "type": "dictionary"
    },
    "togacardcabpack": {
      "name": "\"PLAYCARD.CAB\"",
      "text": [],
      "type": "dictionary"
    },
    "togaxcopydnapack": {
      "name": "\"XCOPY.DNA\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_kartouch": {
      "name": "\"Ouch!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_karteliminated": {
      "name": "\"Eliminated!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pagefileuse": {
      "name": "\"Swapped!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_active": {
      "name": "\"Active!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_inactive": {
      "name": "\"Inactive.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_updated": {
      "name": "\"Update!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_updateready": {
      "name": "\"Ready!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pso2ironwillready": {
      "name": "\"Ready!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pso2ironwillproc": {
      "name": "\"Procced!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pso2ironwillrecharge": {
      "name": "\"Recharging...\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pso2ironwillsave": {
      "name": "\"Iron Will was triggered.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_systemrestore1": {
      "name": "\"Duplicated!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_userlocked": {
      "name": "\"Locked!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_userunlocked": {
      "name": "\"Unlocked!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_spbavoidfail": {
      "name": "\"Hit!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_spbavoidsuccess": {
      "name": "\"Safe!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_bonusapply": {
      "name": "\"Bonus!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_anviltrigger": {
      "name": "\"Hit it!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_colourful": {
      "name": "\"Colourful!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_floppypartner": {
      "name": "\"Floppy!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_suspartner": {
      "name": "\"amogus.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_furnaceprocess": {
      "name": "\"Smelted...\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_novalidrecipe": {
      "name": "\"No recipes match selected cards.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_unknownvalidrecipe": {
      "name": "\"Unknown valid recipe.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_steelrecipe": {
      "name": "\"1x Iron + 1x Coal Coke (consumed) = 1x Steel\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_electrumrecipe": {
      "name": "\"1x Gold + 1x Silver = 2x Electrum\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_bronzerecipe": {
      "name": "\"3x Copper + 1x Tin = 4x Bronze\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_alloy": {
      "name": "\"Alloy\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_crafttarot": {
      "name": "\"Crafting Tarot\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_minetarot": {
      "name": "\"Mining Tarot\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_stonenothing": {
      "name": "\"Nothing...\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_stonefound": {
      "name": "\"!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_32bits": {
      "name": "\"32-bit!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jimbo": {
      "name": "\"...\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jimbo95txt1": {
      "name": "\"Run!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jimbo95txt2": {
      "name": "\"Again?\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jimbo95txt3": {
      "name": "\"Another one!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jimbo95txt4": {
      "name": "\"Thread!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_Echipmod": {
      "name": "\"^#1# Chips\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_EEchipmod": {
      "name": "\"^^#1# Chips\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_EEEchipmod": {
      "name": "\"^^^#1# Chips\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_Emultmod": {
      "name": "\"^#1# Mult\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_EEmultmod": {
      "name": "\"^^#1# Mult\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_EEEmultmod": {
      "name": "\"^^^#1# Mult\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jaraterecharging": {
      "name": "\"Waiting for resupply...\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jaraterestocked": {
      "name": "\"Resupplied!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jarateready": {
      "name": "\"Ready!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jarated": {
      "name": "\"Washed!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_perlevel": {
      "name": "\"per-level\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_pinballing": {
      "name": "\"Score!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_roverwoof": {
      "name": "\"Woof.\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_configtab": {
      "name": "\"Mod Settings\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_logtab": {
      "name": "\"Logging Settings\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_startsfxtab": {
      "name": "\"Misc. Audio Options\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_startsfxoptions": {
      "name": "\"Sound:\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxwhenadd": {
      "name": "\"SFX when getting some of the mods' items\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxwhendel": {
      "name": "\"SFX when removing some of the mods' items\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxwhenuse": {
      "name": "\"SFX when some of the mods' items trigger\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_musicpacks": {
      "name": "\"MIDI-fied music for own Booster Packs\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_jokejokers": {
      "name": "\"Allow 'Joke' items to appear in pool\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_verboselog": {
      "name": "\"Enable extra logs - [INFO]\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_extraverboselog": {
      "name": "\"Increase log verbosity - [DEBUG]\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_extraverboselogwarn": {
      "name": "\"Warning: including [DEBUG] messages may lag your game!\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_mainmenumusicswap": {
      "name": "\"MIDI-fy the Main Menu music\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_startupsfx": {
      "name": "\"Enable mod startup sound on initial load\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_startupsfxuse": {
      "name": "\"Use selected SFX for next game startup\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxswaptext": {
      "name": "\"SFX Swap Level:\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxswapnone": {
      "name": "\"None\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxswapdefault": {
      "name": "\"Default\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sfxswapall": {
      "name": "\"All\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_startupsfxtest": {
      "name": "\"Test\"",
      "text": [],
      "type": "dictionary"
    },
    "toga_sealseal_seal": {
      "name": "\"Seal^2\"",
      "text": [],
      "type": "labels"
    },
    "c_toga_jokerful": {
      "name": "\"Jokerful..?\"\n\t\t",
      "text": [],
      "type": "challenge_names"
    }
  },
  "atlases": {
    "TOGAJokersColours": {
      "path": "togacolours",
      "px": 71,
      "py": 95,
      "resolvedGitHubPath": "togacolours"
    },
    "TOGAPartners": {
      "path": "togapartners.png",
      "px": 66,
      "py": 66,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togapartners.png",
      "resolvedGitHubPath": "assets/1x/togapartners.png"
    },
    "TOGASleeves": {
      "path": "togasleeves.png",
      "px": 73,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togasleeves.png",
      "resolvedGitHubPath": "assets/1x/togasleeves.png"
    },
    "TOGAYahistuff": {
      "path": "togayahi.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togayahi.png",
      "resolvedGitHubPath": "assets/1x/togayahi.png"
    },
    "TOGAXPBlind": {
      "path": "togaxpblind.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaxpblind.png",
      "resolvedGitHubPath": "assets/1x/togaxpblind.png"
    },
    "TOGARetroSkinOG": {
      "path": "togaoldschoolcards_og.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaoldschoolcards_og.png",
      "resolvedGitHubPath": "assets/1x/togaoldschoolcards_og.png"
    },
    "TOGARetroSkinLC": {
      "path": "togaoldschoolcards_lc.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaoldschoolcards_lc.png",
      "resolvedGitHubPath": "assets/1x/togaoldschoolcards_lc.png"
    },
    "TOGARetroSkinHC": {
      "path": "togaoldschoolcards_hc.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaoldschoolcards_hc.png",
      "resolvedGitHubPath": "assets/1x/togaoldschoolcards_hc.png"
    },
    "TOGAModernSkinClassic": {
      "path": "togamoderncards_classic.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamoderncards_classic.png",
      "resolvedGitHubPath": "assets/1x/togamoderncards_classic.png"
    },
    "TOGAModernSkinHearts": {
      "path": "togamoderncards_hearts.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamoderncards_hearts.png",
      "resolvedGitHubPath": "assets/1x/togamoderncards_hearts.png"
    },
    "TOGAModernSkinSeasons": {
      "path": "togamoderncards_seasons.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamoderncards_seasons.png",
      "resolvedGitHubPath": "assets/1x/togamoderncards_seasons.png"
    },
    "TOGAModernSkinLargePrint": {
      "path": "togamoderncards_largeprint.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamoderncards_largeprint.png",
      "resolvedGitHubPath": "assets/1x/togamoderncards_largeprint.png"
    },
    "TOGAJokersMain": {
      "path": "togajokers.png",
      "px": 72,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajokers.png",
      "resolvedGitHubPath": "assets/1x/togajokers.png"
    },
    "TOGAJokersOther": {
      "path": "togajokersother.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajokersother.png",
      "resolvedGitHubPath": "assets/1x/togajokersother.png"
    },
    "TOGAJokersOtherDiffSize": {
      "path": "togajokersothersize.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajokersothersize.png",
      "resolvedGitHubPath": "assets/1x/togajokersothersize.png"
    },
    "TOGAJokersWindows": {
      "path": "togajokerswinos.png",
      "px": 72,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajokerswinos.png",
      "resolvedGitHubPath": "assets/1x/togajokerswinos.png"
    },
    "TOGAJokersMac": {
      "path": "togamacos.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamacos.png",
      "resolvedGitHubPath": "assets/1x/togamacos.png"
    },
    "TOGAJokersLinux": {
      "path": "togalinuxos.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togalinuxos.png",
      "resolvedGitHubPath": "assets/1x/togalinuxos.png"
    },
    "TOGAJokersUpdate": {
      "path": "togajokerupdate.png",
      "px": 72,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajokerupdate.png",
      "resolvedGitHubPath": "assets/1x/togajokerupdate.png"
    },
    "TOGAJokerRover": {
      "path": "togarover.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togarover.png",
      "resolvedGitHubPath": "assets/1x/togarover.png"
    },
    "TOGABoosterPack": {
      "path": "togabooster.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togabooster.png",
      "resolvedGitHubPath": "assets/1x/togabooster.png"
    },
    "TOGAConsumables": {
      "path": "togacons.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togacons.png",
      "resolvedGitHubPath": "assets/1x/togacons.png"
    },
    "TOGADeckBack": {
      "path": "togadeck.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togadeck.png",
      "resolvedGitHubPath": "assets/1x/togadeck.png"
    },
    "TOGATags": {
      "path": "togatags.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togatags.png",
      "resolvedGitHubPath": "assets/1x/togatags.png"
    },
    "TOGASeals": {
      "path": "togaseal.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaseal.png",
      "resolvedGitHubPath": "assets/1x/togaseal.png"
    },
    "TOGAEnhancements": {
      "path": "togaenh.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaenh.png",
      "resolvedGitHubPath": "assets/1x/togaenh.png"
    },
    "TOGADialUpBlind": {
      "path": "togadialupblind.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togadialupblind.png",
      "resolvedGitHubPath": "assets/1x/togadialupblind.png"
    },
    "TOGAWWWBlind": {
      "path": "togawwwblind.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togawwwblind.png",
      "resolvedGitHubPath": "assets/1x/togawwwblind.png"
    },
    "TOGAJoyStickBlind": {
      "path": "togajoystickblind.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togajoystickblind.png",
      "resolvedGitHubPath": "assets/1x/togajoystickblind.png"
    },
    "TOGAMoreIcons": {
      "path": "togamoricons.png",
      "px": 36,
      "py": 36,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togamoricons.png",
      "resolvedGitHubPath": "assets/1x/togamoricons.png"
    },
    "TOGAFunny": {
      "path": "togazefunny.png",
      "px": 64,
      "py": 64,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togazefunny.png",
      "resolvedGitHubPath": "assets/1x/togazefunny.png"
    },
    "TOGAFunnyStatic": {
      "path": "togazefunny.png",
      "px": 64,
      "py": 64,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togazefunny.png",
      "resolvedGitHubPath": "assets/1x/togazefunny.png"
    },
    "modicon": {
      "path": "togaicon.png",
      "px": 32,
      "py": 32,
      "localPath": "/wiki-data/TOGAPackBalatro@TheOneGoofAli/no-tag/togaicon.png",
      "resolvedGitHubPath": "assets/1x/togaicon.png"
    }
  },
  "cards": [
    {
      "type": "Blind",
      "key": "dialupmodem",
      "atlas": "TOGADialUpBlind",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'dialupmodem',\n\tatlas = 'TOGADialUpBlind',\n\tboss_colour = HEX('404080'),\n\tpos = { x = 0, y = 0 },\n\tvars = { reducedhandsel = 1, activated = false },\n\tdollars = 6,\n\tmult = 5.6,\n\tboss = { min = 4 },\n\tloc_vars = function(self)\n\t\treturn { vars = { -self.vars.reducedhandsel } }\n\tend,\n\tcollection_loc_vars = function(self)\n\t\treturn { vars = { -self.vars.reducedhandsel  } }\n\tend,\n\tset_blind = function(self)\n\t\tself.vars.activated = true\n\t\ttogabalatro.handlimitchange(-self.vars.reducedhandsel)\n\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit - self.vars.reducedhandsel, 1)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Decreased card selection limit to \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\tend,\n\tdisable = function(self)\n\t\tif self.vars.activated then\n\t\t\tself.vars.activated = false\n\t\t\ttogabalatro.handlimitchange(self.vars.reducedhandsel)\n\t\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit + self.vars.reducedhandsel, 5)\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Disabled, card selection limit is \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\t\tend\n\tend,\n\tdefeat = function(self)\n\t\tif self.vars.activated then\n\t\t\ttogabalatro.handlimitchange(self.vars.reducedhandsel)\n\t\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit + self.vars.reducedhandsel, 5)\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Defeated, card selection limit is \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\t\tend\n\tend",
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "worldwideweb",
      "atlas": "TOGAWWWBlind",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'worldwideweb',\n\tatlas = 'TOGAWWWBlind',\n\tboss_colour = HEX('aafdff'),\n\tpos = { x = 0, y = 0 },\n\tvars = { increasehandsel = 3, activated = false },\n\tdollars = 6,\n\tmult = 56.6,\n\tboss = { min = 3.11, showdown = true },\n\tin_pool = function(self)\n\t\treturn G.GAME.dialupmodem or false\n\tend,\n\tloc_vars = function(self)\n\t\treturn { vars = { self.vars.increasehandsel } }\n\tend,\n\tcollection_loc_vars = function(self)\n\t\treturn { key = self.key..\"_collection\" }\n\tend,\n\tset_blind = function(self)\n\t\tself.vars.activated = true\n\t\ttogabalatro.handlimitchange(self.vars.increasehandsel)\n\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit + self.vars.increasehandsel, 1)\n\t\tG.hand:change_size(self.vars.increasehandsel)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Changed card selection limit to \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Changed hand size to \"..G.hand.config.card_limit..\".\", \"TOGAPack\") end\n\tend,\n\tdisable = function(self)\n\t\tif self.vars.activated then\n\t\t\tself.vars.activated = false\n\t\t\ttogabalatro.handlimitchange(-self.vars.increasehandsel)\n\t\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit - self.vars.increasehandsel, 5)\n\t\t\tG.hand:change_size(-self.vars.increasehandsel)\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Disabled, card selection limit is \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Disabled, changed hand size to \"..G.hand.config.card_limit..\".\", \"TOGAPack\") end\n\t\telse\n\t\t\tif togabalatro.config.SFXWhenTriggered then play_sound(\"toga_failsfx\", 1, 0.5) end\n\t\tend\n\tend,\n\tdefeat = function(self)\n\t\tif self.vars.activated then\n\t\t\tself.vars.activated = false\n\t\t\ttogabalatro.handlimitchange(-self.vars.increasehandsel)\n\t\t\t--G.hand.config.highlighted_limit = math.max(G.hand.config.highlighted_limit - self.vars.increasehandsel, 5)\n\t\t\tG.hand:change_size(-self.vars.increasehandsel)\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Defeated, card selection limit is \"..G.hand.config.highlighted_limit..\".\", \"TOGAPack\") end\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Defeated, changed hand size to \"..G.hand.config.card_limit..\".\", \"TOGAPack\") end\n\t\tend\n\t\tease_dollars(50)\n\tend",
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "joystick",
      "atlas": "TOGAJoyStickBlind",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'joystick',\n\tatlas = 'TOGAJoyStickBlind',\n\tboss_colour = HEX('76992b'),\n\tpos = { x = 0, y = 0 },\n\tdollars = 8,\n\tmult = 2.5,\n\tboss = { min = 3 },\n\tcalculate = function(self, card, context)\n\t\tif not G.GAME.blind.disabled then\n\t\t\tif context.first_hand_drawn then\n\t\t\t\tfor i = 1, #G.hand.cards do\n\t\t\t\t\tG.hand.highlighted[#G.hand.highlighted+1] = G.hand.cards[i]\n\t\t\t\t\tG.hand.cards[i]:highlight(true)\n\t\t\t\tend\n\t\t\t\tG.FUNCS.play_cards_from_highlighted()\n\t\t\tend\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "togazipboosterpack",
      "atlas": "TOGABoosterPack",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "name = \"ZIP Package\",\n\tkey = \"togazipboosterpack\",\n\tatlas = 'TOGABoosterPack',\n\tpos = {x = 0, y = 0},\n\tweight = 1,\n\tcost = 10,\n\tgroup_key = 'togazipboosterpack',\n\tconfig = {extra = 3, choose = 1, name = \"ZIP Package\"},\n\tdiscovered = false,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {card.ability.choose, card.ability.extra} }\n\tend,\n\tease_background_colour = function(self)\n\t\tease_background_colour(toga_bgcolorfunc[math.random(1, #toga_bgcolorfunc)])\n\tend,\n\tcreate_card = function(self, card)\n\t\treturn create_card('TOGAJKR', G.pack_cards, nil, nil, nil, nil, nil, 'toga')\n\tend,\n\tkind = 'TOGABoostPack'",
      "config": {
        "extra": 3,
        "choose": 1,
        "name": "ZIP Package"
      },
      "ability": {
        "extra": 3,
        "choose": 1,
        "name": "ZIP Package"
      },
      "vars": [
        1,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "togaziparchivepack",
      "atlas": "TOGABoosterPack",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "name = \"Joker.ZIP\",\n\tkey = \"togaziparchivepack\",\n\tatlas = 'TOGABoosterPack',\n\tpos = {x = 1, y = 0},\n\tweight = 0.7,\n\tcost = 20,\n\tgroup_key = 'togaziparchivepack',\n\tconfig = {extra = 10, choose = 2, name = \"Joker.ZIP\"},\n\tdiscovered = false,\n\tloc_vars = function(self, info_queue, card)\n\t\tif G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and G.GAME.spectralzipper_chance then\n\t\t\t--info_queue[#info_queue + 1] = {key = \"toga_jokerzipupgrade\", set = 'Other', vars = { (G.GAME and G.GAME.probabilities.normal or 1), G.GAME.spectralzipper_chance or 500 } }\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_jokerzipupgrade\", set = 'Other', vars = { SMODS.get_probability_vars(card or self, 1, G.GAME.spectralzipper_chance or 500) } }\n\t\tend\n\t\treturn { vars = {card.ability.choose, card.ability.extra } }\n\tend,\n\tease_background_colour = function(self)\n\t\tease_background_colour({ new_colour = HEX(\"515966\"), special_colour = HEX(\"121417\"), contrast = 1.25 }) -- Longhorn, anyone?\n\tend,\n\tcreate_card = function(self, card)\n\t\t--local leg = G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and G.GAME.spectralzipper_chance and pseudorandom(\"toga_leg\") < G.GAME.probabilities.normal/G.GAME.spectralzipper_chance or nil\n\t\tlocal leg = G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and G.GAME.spectralzipper_chance and SMODS.pseudorandom_probability(card or self, \"toga_leg\", 1, G.GAME.spectralzipper_chance) or nil\n\t\treturn create_card(\"Joker\", G.pack_cards, leg, nil, true, true, nil, 'toga')\n\tend,\n\tkind = 'TOGABoostPack'",
      "config": {
        "extra": 10,
        "choose": 2,
        "name": "Joker.ZIP"
      },
      "ability": {
        "extra": 10,
        "choose": 2,
        "name": "Joker.ZIP"
      },
      "vars": [
        2,
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "togararpack",
      "atlas": "TOGABoosterPack",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "name = \"CONSUMAB.RAR\",\n\tkey = \"togararpack\",\n\tatlas = 'TOGABoosterPack',\n\tpos = {x = 2, y = 0},\n\tweight = 0.7,\n\tcost = 15,\n\tgroup_key = 'togararpack',\n\tconfig = {extra = 10, choose = 2, name = \"CONSUMAB.RAR\"},\n\tdraw_hand = true,\n\tdiscovered = false,\n\tloc_vars = function(self, info_queue, card)\n\t\tif G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and G.GAME.spectralzipper_chance then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_consumabrarupgrade\", set = 'Other', vars = { SMODS.get_probability_vars(card or self, 1, G.GAME.spectralzipper_chance or 500) } }\n\t\tend\n\t\treturn { vars = {card.ability.choose, card.ability.extra} }\n\tend,\n\tease_background_colour = function(self)\n\t\tease_background_colour({ new_colour = HEX(\"bb1b36\"), special_colour = HEX(\"177c2f\"), contrast = 1.25 })\n\tend,\n\tcreate_card = function(self, card)\n\t\t--local leg = G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and G.GAME.spectralzipper_chance and pseudorandom(\"toga_leg\") < G.GAME.probabilities.normal/G.GAME.spectralzipper_chance or nil\n\t\tlocal leg = G.GAME and G.GAME.used_vouchers['v_toga_spectralzipper'] == true and SMODS.pseudorandom_probability(card or self, \"toga_leg\", 1, G.GAME.spectralzipper_chance) or nil\n\t\treturn create_card(\"Consumeables\", G.pack_cards, nil, nil, true, true, leg and 'c_soul' or togabalatro.getrandcons('rar'), 'toga')\n\tend,\n\tkind = 'TOGABoostPack'",
      "config": {
        "extra": 10,
        "choose": 2,
        "name": "CONSUMAB.RAR"
      },
      "ability": {
        "extra": 10,
        "choose": 2,
        "name": "CONSUMAB.RAR"
      },
      "vars": [
        2,
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "togacardcabpack",
      "atlas": "TOGABoosterPack",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "name = \"PLAYCARD.CAB\",\n\tkey = \"togacardcabpack\",\n\tatlas = 'TOGABoosterPack',\n\tpos = {x = 3, y = 0},\n\tweight = 0.6,\n\tcost = 12,\n\tgroup_key = 'togacardcabpack',\n\tconfig = {extra = 8, choose = 3, name = \"PLAYCARD.CAB\"},\n\tdiscovered = false,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {card.ability.choose, card.ability.extra} }\n\tend,\n\tease_background_colour = function(self)\n\t\tease_background_colour({ new_colour = HEX(\"6BC0FD\"), special_colour = HEX(\"00379D\"), contrast = 1.2 })\n\tend,\n\tcreate_card = function(self, card)\n\t\tlocal _edition = poll_edition('standard_edition'..G.GAME.round_resets.ante, 2, true)\n\t\tlocal _seal = SMODS.poll_seal({mod = 10})\n\t\treturn {set = (pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and \"Enhanced\" or \"Base\", edition = _edition, seal = _seal, area = G.pack_cards, skip_materialize = true, soulable = true, key_append = \"playcardcab\"}\n\tend,\n\tkind = 'TOGABoostPack'",
      "config": {
        "extra": 8,
        "choose": 3,
        "name": "PLAYCARD.CAB"
      },
      "ability": {
        "extra": 8,
        "choose": 3,
        "name": "PLAYCARD.CAB"
      },
      "vars": [
        3,
        8
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "togaxcopydnapack",
      "atlas": "TOGABoosterPack",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "name = \"XCOPY.DNA\",\n\tkey = \"togaxcopydnapack\",\n\tatlas = 'TOGABoosterPack',\n\tpos = {x = 4, y = 0},\n\tweight = 1,\n\tcost = 10,\n\tgroup_key = 'togaxcopydnapack',\n\tconfig = {extra = 5, choose = 1, name = \"XCOPY.DNA\"},\n\tdiscovered = false,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = {card.ability.choose, card.ability.extra} }\n\tend,\n\tease_background_colour = function(self)\n\t\tease_background_colour({ new_colour = HEX(\"DD463C\"), special_colour = HEX(\"008BE3\"), contrast = 1.3 })\n\tend,\n\tcreate_card = function(self, card)\n\t\treturn copy_card(pseudorandom_element(G.deck.cards, pseudoseed('xcopy')), nil, nil, G.playing_card)\n\tend,\n\tkind = 'TOGABoostPack'",
      "config": {
        "extra": 5,
        "choose": 1,
        "name": "XCOPY.DNA"
      },
      "ability": {
        "extra": 5,
        "choose": 1,
        "name": "XCOPY.DNA"
      },
      "vars": [
        1,
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "jokerful",
      "atlas": null,
      "pos": null,
      "raw": "key = 'jokerful',\n    rules = {\n\t\tcustom = {\n            { id = 'toga_noplayedscore' },\n            { id = 'toga_nohandscore' },\n        },\n\t\tmodifiers = {\n            { id = 'joker_slots', value = 7 },\n        },\n\t},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "furnace",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'furnace',\n\tset = 'Tarot',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 3, y = 0},\n\tcost = 1,\n\tconfig = { extra = { usecost = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal cando, txt = togabalatro.checkvalidrecipe()\n\t\tif not cando then\n\t\t\tif togabalatro.currentrecipetxt and #togabalatro.currentrecipetxt > 0 then\n\t\t\t\tfor i = 1, #togabalatro.currentrecipetxt do\n\t\t\t\t\tinfo_queue[#info_queue + 1] = {key = togabalatro.currentrecipetxt[i], set = 'Other'}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn { key = cando and self.key..'_ready' or G.hand and G.hand.highlighted and #G.hand.highlighted > 0 and self.key..\"_novalidrecipe\" or self.key, vars = { txt, card.ability.extra.usecost } }\n\tend,\n\tcan_use = function(self, card, area, copier)\n\t\tif togabalatro.validsmeltrecipes and #togabalatro.validsmeltrecipes < 0 then return false end\n\t\t\n\t\tif (G.hand.highlighted and #G.hand.highlighted > 0) then\n\t\t\tfor i = 1, #togabalatro.validsmeltrecipes do\n\t\t\t\tif togabalatro.validsmeltrecipes[i](G.hand.highlighted) then return true end\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area)\n\t\tif togabalatro.validsmeltrecipes and #togabalatro.validsmeltrecipes < 0 then return end\n\t\tlocal cando, cardtable, enhancement, found = false, {}, \"\", false\n\t\tfor i = 1, #togabalatro.validsmeltrecipes do\n\t\t\tif found then break end\n\t\t\t\n\t\t\tcando, cardtable, enhancement = togabalatro.validsmeltrecipes[i](G.hand.highlighted)\n\t\t\tif cando and cardtable and enhancement and G.P_CENTERS[enhancement] then found = true end\n\t\tend\n\t\tif not (cando or found) then return end\n\t\t\n\t\tif cardtable.cards and #cardtable.cards > 0 then\n\t\t\tfor i, v in ipairs(cardtable.cards) do\n\t\t\t\tif v and G.P_CENTERS[enhancement] then\n\t\t\t\t\tv:set_ability(G.P_CENTERS[enhancement])\n\t\t\t\t\tcard_eval_status_text(v, 'extra', nil, nil, nil, {message = localize('toga_furnaceprocess'), sound = togabalatro.config.SFXWhenTriggered and 'toga_xporb'})\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\tif cardtable.destroycard and #cardtable.destroycard > 0 then\n\t\t\tlocal destroyed_cards = {}\n\t\t\tfor k, dcard in ipairs(G.hand.cards) do\n\t\t\t\tfor i, v in ipairs(cardtable.destroycard) do\n\t\t\t\t\tif v == dcard then destroyed_cards[#destroyed_cards+1] = dcard end\n\t\t\t\tend\n\t\t\tend\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()\n\t\t\t\tplay_sound('tarot1')\n\t\t\t\tcard:juice_up(0.3, 0.5)\n\t\t\treturn true end}))\n\t\t\t\n\t\t\tSMODS.destroy_cards(destroyed_cards)\n\t\tend\n\t\tlocal payment = to_big(card.ability.extra.usecost)\n\t\tif to_big(G.GAME.dollars) - payment < to_big(0) then payment = payment + (to_big(G.GAME.dollars) - to_big(card.ability.extra.usecost)) end\n\t\tG.E_MANAGER:add_event(Event({trigger = \"after\", delay = 0.2, func = function()\n\t\t\tG.hand:unhighlight_all()\n\t\t\tG.hand:parse_highlighted()\n\t\t\tease_dollars(-payment)\n\t\t\treturn true\n\t\tend,}))\n\tend,\n\tkeep_on_use = function(self, card)\n\t\tif to_big(G.GAME.dollars) - to_big(card.ability.extra.usecost) >= to_big(G.GAME.bankrupt_at) then return true end\n\tend,\n\tset_badges = function(self, card, badges)\n        badges[#badges] = create_badge(localize('toga_crafttarot'), G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1.2)\n    end,\n\tpixel_size = { w = 71, h = 77 },\n\tperishable_compat = false,\n\teternal_compat = false,\n\tcan_stack = false",
      "config": {
        "extra": {
          "usecost": 4
        }
      },
      "ability": {
        "extra": {
          "usecost": 4
        }
      },
      "vars": [
        null,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "miningprospect",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'miningprospect',\n\tset = 'Tarot',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 4, y = 0},\n\tcost = 5,\n\tconfig = { extra = { odds = 3 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal minpool = togabalatro.oredict.minerals\n\t\tif minpool and #minpool > 0 and love.keyboard.isDown(\"lshift\") then\n\t\t\tfor k, v in pairs(minpool) do\n\t\t\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS[v]\n\t\t\tend\n\t\tend\n\t\treturn {key = love.keyboard.isDown(\"lshift\") and self.key..\"_showminerals\" or self.key, vars = { SMODS.get_probability_vars(card or self, 1, (card.ability.extra or self.config.extra).odds) }}\n\tend,\n\tcan_use = function(self, card, area, copier)\n\t\treturn G.playing_cards and #G.playing_cards > 1\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tlocal cards = {}\n\t\tfor i = 1, #G.playing_cards do\n\t\t\tcards[#cards+1] = G.playing_cards[i]\n\t\tend\n\t\tfor k, v in ipairs(cards) do\n\t\t\tif SMODS.has_enhancement(v, 'm_stone') then\n\t\t\t\t--if pseudorandom(\"toga_minediamonds\") < G.GAME.probabilities.normal/card.ability.extra.odds then\n\t\t\t\tif SMODS.pseudorandom_probability(card, \"toga_minediamonds\", 1, card.ability.extra.odds) then\n\t\t\t\t\tlocal enhancement = SMODS.poll_enhancement({ guaranteed = true, options = togabalatro.oredict.minerals, type_key = 'modmineral' })\n\t\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()\n\t\t\t\t\t\tcard:juice_up()\n\t\t\t\t\t\tv:set_ability(G.P_CENTERS[enhancement])\n\t\t\t\t\treturn true end }))\n\t\t\t\t\tcard_eval_status_text(v, 'extra', nil, nil, nil, {message = localize('toga_stonefound'), sound = togabalatro.config.SFXWhenTriggered and 'toga_xporb'})\n\t\t\t\telse\n\t\t\t\t\tcard_eval_status_text(v, 'extra', nil, nil, nil, {message = localize('toga_stonenothing')})\n\t\t\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.1,func = function() card:juice_up(); SMODS.destroy_cards(v); return true end }))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n        badges[#badges] = create_badge(localize('toga_minetarot'), G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1.2)\n    end,\n\tpixel_size = { w = 71, h = 77 },\n\tperishable_compat = false,\n\teternal_compat = false,\n\tcan_stack = false",
      "config": {
        "extra": {
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "odds": 3
        }
      },
      "vars": [
        1,
        {
          "odds": 3
        }
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "selfpropelledbomb",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'selfpropelledbomb',\n\tset = 'Spectral',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 0, y = 0},\n\tcost = 4,\n\tconfig = {extra = { cardlimit = spbcardmin, odds = 4, activated = false } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.cardlimit = math.max(G.deck and G.deck.cards and math.floor(#G.deck.cards*spbdeckpart) or 0, spbcardmin)\n\t\tlocal basechance, odds = SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.odds)\n\t\treturn {vars = { math.floor(card.ability.extra.cardlimit), odds, basechance, spbcardmin, spbdeckpart*100 } }\n\tend,\n\tcan_use = function(self, card, area, copier)\n\t\treturn G.deck and G.deck.cards and #G.deck.cards > 0\n\tend,\n\tuse = function(self, card)\n\t\tcard.ability.extra.cardlimit = math.max(G.deck and G.deck.cards and math.floor(#G.deck.cards*spbdeckpart) or 0, spbcardmin)\n\t\tcard.ability.extra.activated = true\n\t\ttoga_spbdeckwreck(card)\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound('toga_spb')\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif card.ability.extra.activated then return end\n\t\t--if pseudorandom(\"toga_selfpropelledbomb\") < G.GAME.probabilities.normal/card.ability.extra.odds then\n\t\tif SMODS.pseudorandom_probability(card, \"toga_selfpropelledbomb\", 1, card.ability.extra.odds) then\n\t\t\ttoga_spbdeckwreck(card, true)\n\t\telse\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_safe_ex'), sound = togabalatro.config.SFXWhenRemoving and 'toga_thundershield'})\n\t\tend\n\tend,\n\tperishable_compat = false,\n\teternal_compat = false,\n\tcan_stack = false",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "sealingaround",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'sealingaround',\n\tset = 'Spectral',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 1, y = 0},\n\tcost = 5,\n\tconfig = { max_highlighted = 1, extra = 'toga_sealseal' },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue+1] = G.P_SEALS[(card.ability or self.config).extra]\n\t\treturn {vars = {(card.ability or self.config).max_highlighted}}\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i = 1, math.min(#G.hand.highlighted, card.ability.max_highlighted) do\n\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\tplay_sound('tarot1')\n\t\t\t\tcard:juice_up(0.3, 0.5)\n\t\t\t\treturn true end }))\n\t\t\t\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()\n\t\t\t\tG.hand.highlighted[i]:set_seal(card.ability.extra, nil, true)\n\t\t\t\treturn true end }))\n\t\t\t\n\t\t\tdelay(0.5)\n\t\tend\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\tend",
      "config": {
        "max_highlighted": 1,
        "extra": "toga_sealseal"
      },
      "ability": {
        "max_highlighted": 1,
        "extra": "toga_sealseal"
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "filesource",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'filesource',\n\tset = 'Spectral',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 2, y = 0},\n\tcost = 5,\n\tconfig = { extra = { cards = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_toga_notification\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand and #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then \n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()\n            play_sound('tarot1')\n            card:juice_up(0.3, 0.5)\n\t\treturn true end }))\n\t\tdelay(0.2)\n\t\tfor i, v in pairs(G.hand.highlighted) do\n\t\t\tlocal percent = 0.85 + (i-0.999)/(#G.hand.highlighted-0.998)*0.3\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() v:flip();play_sound('card1', percent, 1);v:juice_up(0.3, 0.3);return true end }))\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',func = function() v:set_ability(G.P_CENTERS[\"m_toga_notification\"]);return true end }))\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() v:flip();play_sound('tarot2', percent, 0.6);play_sound('toga_winxpballoon', 1, 2.5);v:juice_up(0.3, 0.3);return true end }))\n\t\tend\n\t\tdelay(0.2)\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\tend,",
      "config": {
        "extra": {
          "cards": 2
        }
      },
      "ability": {
        "extra": {
          "cards": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "mobilephone",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'mobilephone',\n\tset = 'Spectral',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 5, y = 0},\n\tcost = 5,\n\tconfig = { extra = { cards = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_toga_sms\n\t\treturn { vars = { card.ability.extra.cards } }\n\tend,\n\tcan_use = function(self, card)\n\t\tif G and G.hand and #G.hand.highlighted ~= 0 and #G.hand.highlighted <= card.ability.extra.cards then \n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()\n            play_sound('tarot1')\n            card:juice_up(0.3, 0.5)\n\t\treturn true end }))\n\t\tdelay(0.2)\n\t\tfor i, v in pairs(G.hand.highlighted) do\n\t\t\tlocal percent = 0.85 + (i-0.999)/(#G.hand.highlighted-0.998)*0.3\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() v:flip();play_sound('card1', percent, 1);v:juice_up(0.3, 0.3);return true end }))\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',func = function() v:set_ability(G.P_CENTERS[\"m_toga_sms\"]);return true end }))\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() v:flip();play_sound('tarot2', percent, 0.6);v:juice_up(0.3, 0.3);return true end }))\n\t\tend\n\t\tdelay(0.2)\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\tend,",
      "config": {
        "extra": {
          "cards": 2
        }
      },
      "ability": {
        "extra": {
          "cards": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "hyperlink",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'hyperlink',\n\tset = 'Spectral',\n\tatlas = \"TOGAConsumables\",\n\tpos = {x = 6, y = 0},\n\tcost = 5,\n\tconfig = { max_highlighted = 1, extra = 'toga_urlseal' },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue+1] = G.P_SEALS[(card.ability or self.config).extra]\n\t\treturn {vars = {(card.ability or self.config).max_highlighted}}\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tfor i = 1, math.min(#G.hand.highlighted, card.ability.max_highlighted) do\n\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\tplay_sound('tarot1')\n\t\t\t\tcard:juice_up(0.3, 0.5)\n\t\t\t\treturn true end }))\n\t\t\t\n\t\t\tG.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()\n\t\t\t\tG.hand.highlighted[i]:set_seal(card.ability.extra, nil, true)\n\t\t\t\treturn true end }))\n\t\t\t\n\t\t\tdelay(0.5)\n\t\tend\n\t\tG.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))\n\tend",
      "config": {
        "max_highlighted": 1,
        "extra": "toga_urlseal"
      },
      "ability": {
        "max_highlighted": 1,
        "extra": "toga_urlseal"
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Mods",
      "key": "TOGAJokersColours",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersColours\", path = \"togacolours\"..atlastype, px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "penwheel",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "key = 'penwheel',\n\t\tconfig = { extra = { percolormoney = 2 } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\treturn { vars = { card.ability.extra.percolormoney } }\n\t\tend,\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\trarity = 1,\n\t\tatlas = 'TOGAJokersMain',\n\t\tpos = { x = 1, y = 4 },\n\t\tcost = 4,\n\t\tpools = { [\"TOGAJKR\"] = true },\n\t\tblueprint_compat = true,\n\t\tdemicolon_compat = true,\n\t\tcalculate = function(self, card, context)\n\t\t\tif (context.end_of_round or context.forcetrigger) and not context.repetition and not context.individual and not context.game_over then\n\t\t\t\treturn { func = function()\n\t\t\t\t\tfor i = 1, #G.consumeables.cards do\n\t\t\t\t\t\tif G.consumeables.cards[i].config.center.set == 'Colour' then\n\t\t\t\t\t\t\tlocal effects = { dollars = card.ability.extra.percolormoney, message_card = G.consumeables.cards[i]}\n\t\t\t\t\t\t\tlocal stacked, stackamount = togabalatro.stackingcompat(G.consumeables.cards[i])\n\t\t\t\t\t\t\tif stacked then\n\t\t\t\t\t\t\t\tfor i = 1, stackamount do\n\t\t\t\t\t\t\t\t\tSMODS.calculate_individual_effect(effects, G.consumeables.cards[i], 'dollars', effects.dollars, false)\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse SMODS.calculate_individual_effect(effects, G.consumeables.cards[i], 'dollars', effects.dollars, false) end\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend }\n\t\t\tend\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {
        "extra": {
          "percolormoney": 2
        }
      },
      "ability": {
        "extra": {
          "percolormoney": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "displayproperties",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 2,
        "y": 4
      },
      "raw": "key = 'displayproperties',\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\trarity = 2,\n\t\tatlas = 'TOGAJokersMain',\n\t\tpos = { x = 2, y = 4 },\n\t\tcost = 7,\n\t\tpools = { [\"TOGAJKR\"] = true },\n\t\tblueprint_compat = false,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "colourfulprinter",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 3,
        "y": 4
      },
      "raw": "key = 'colourfulprinter',\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\tblueprint_compat = false,\n\t\teternal_compat = true,\n\t\tperishable_compat = false,\n\t\tdemicolon_compat = true,\n\t\trarity = \"crv_p\",\n\t\tatlas = 'TOGAJokersMain',\n\t\tpos = { x = 3, y = 4 },\n\t\tcost = 10,\n\t\tpools = { [\"TOGAJKR\"] = true },\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.setting_blind or context.forcetrigger then\n\t\t\t\treturn {\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tlocal createnegative = false\n\t\t\t\t\t\tif G.GAME.used_vouchers[\"v_crv_printerup\"] == true then createnegative = true end\n\t\t\t\t\t\tif #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit or createnegative then\n\t\t\t\t\t\t\tG.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\tlocal colourcard = SMODS.create_card({ set = 'Colour', no_edition = createnegative and true or false }) -- egg.\n\t\t\t\t\t\t\t\t\tif createnegative then colourcard:set_edition('e_negative', true, true) end\n\t\t\t\t\t\t\t\t\tcolourcard:add_to_deck()\n\t\t\t\t\t\t\t\t\tG.consumeables:emplace(colourcard)\n\t\t\t\t\t\t\t\t\tG.GAME.joker_buffer = math.max(G.GAME.joker_buffer - 1, 0)\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t}\n\t\t\tend\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then\n\t\t\t\tSMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges)\n\t\t\t\tSMODS.create_mod_badges({ mod = SMODS.find_mod('RevosVault')[1] }, badges)\n\t\t\tend\n\t\tend,\n\t\tdependencies = 'RevosVault'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "classic",
      "atlas": "TOGAJokersColours",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "object_type = \"Consumable\",\n\t\tset = \"Colour\",\n\t\tname = \"col_TOGAClassic\",\n\t\tkey = \"classic\",\n\t\tpos = { x = 0, y = 0 },\n\t\tconfig = {\n\t\t\tval = 0,\n\t\t\tpartial_rounds = 0,\n\t\t\tupgrade_rounds = 2,\n\t\t},\n\t\tcost = 4,\n\t\tatlas = \"TOGAJokersColours\",\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\tdisplay_size = { w = 71, h = 87 },\n\t\tpixel_size = { w = 71, h = 87 },\n\t\tcan_use = function(self, card)\n\t\t\treturn true\n\t\tend,\n\t\tuse = function(self, card, area, copier)\n\t\t\tlocal tag_type = \"tag_toga_togajokerziparchive\"\n\t\t\tfor i = 1, card.ability.val do\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = (function()\n\t\t\t\t\t\tadd_tag(Tag(tag_type))\n\t\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\t\tplay_sound('holo1', 1.2 + math.random()*0.1, 0.4)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend)\n\t\t\t\t\t}))\n\t\t\t\tdelay(0.2)\n\t\t\tend\n\t\t\tdelay(0.6)\n\t\tend,\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal val, max = progressbar(card.ability.partial_rounds, card.ability.upgrade_rounds)\n\t\t\treturn { vars = {card.ability.val, val, max, card.ability.upgrade_rounds} }\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "ability": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "vars": [
        0,
        null,
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "professional",
      "atlas": "TOGAJokersColours",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "object_type = \"Consumable\",\n\t\tset = \"Colour\",\n\t\tname = \"col_TOGAProfessional\",\n\t\tkey = \"professional\",\n\t\tpos = { x = 1, y = 0 },\n\t\tconfig = {\n\t\t\tval = 0,\n\t\t\tpartial_rounds = 0,\n\t\t\tupgrade_rounds = 3,\n\t\t},\n\t\tcost = 4,\n\t\tatlas = \"TOGAJokersColours\",\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\tdisplay_size = { w = 71, h = 87 },\n\t\tpixel_size = { w = 71, h = 87 },\n\t\tcan_use = function(self, card)\n\t\t\treturn true\n\t\tend,\n\t\tuse = function(self, card, area, copier)\n\t\t\tlocal tag_type = \"tag_toga_togarararchive\"\n\t\t\tfor i = 1, card.ability.val do\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = (function()\n\t\t\t\t\t\tadd_tag(Tag(tag_type))\n\t\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\t\tplay_sound('holo1', 1.2 + math.random()*0.1, 0.4)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend)\n\t\t\t\t\t}))\n\t\t\t\tdelay(0.2)\n\t\t\tend\n\t\t\tdelay(0.6)\n\t\tend,\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal val, max = progressbar(card.ability.partial_rounds, card.ability.upgrade_rounds)\n\t\t\treturn { vars = {card.ability.val, val, max, card.ability.upgrade_rounds} }\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 3
      },
      "ability": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 3
      },
      "vars": [
        0,
        null,
        null,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "luna",
      "atlas": "TOGAJokersColours",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "object_type = \"Consumable\",\n\t\tset = \"Colour\",\n\t\tname = \"col_TOGALuna\",\n\t\tkey = \"luna\",\n\t\tpos = { x = 2, y = 0 },\n\t\tconfig = {\n\t\t\tval = 0,\n\t\t\tpartial_rounds = 0,\n\t\t\tupgrade_rounds = 2,\n\t\t},\n\t\tcost = 4,\n\t\tatlas = \"TOGAJokersColours\",\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\tdisplay_size = { w = 71, h = 87 },\n\t\tpixel_size = { w = 71, h = 87 },\n\t\tcan_use = function(self, card)\n\t\t\treturn true\n\t\tend,\n\t\tuse = function(self, card, area, copier)\n\t\t\tlocal tag_type = \"tag_toga_togacardcabarchive\"\n\t\t\tfor i = 1, card.ability.val do\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = (function()\n\t\t\t\t\t\tadd_tag(Tag(tag_type))\n\t\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\t\tplay_sound('holo1', 1.2 + math.random()*0.1, 0.4)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend)\n\t\t\t\t\t}))\n\t\t\t\tdelay(0.2)\n\t\t\tend\n\t\t\tdelay(0.6)\n\t\tend,\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal val, max = progressbar(card.ability.partial_rounds, card.ability.upgrade_rounds)\n\t\t\treturn { vars = {card.ability.val, val, max, card.ability.upgrade_rounds} }\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "ability": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "vars": [
        0,
        null,
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "aero",
      "atlas": "TOGAJokersColours",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "object_type = \"Consumable\",\n\t\tset = \"Colour\",\n\t\tname = \"col_TOGAAero\",\n\t\tkey = \"aero\",\n\t\tpos = { x = 3, y = 0 },\n\t\tconfig = {\n\t\t\tval = 0,\n\t\t\tpartial_rounds = 0,\n\t\t\tupgrade_rounds = 2,\n\t\t},\n\t\tcost = 4,\n\t\tatlas = \"TOGAJokersColours\",\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\tdisplay_size = { w = 71, h = 87 },\n\t\tpixel_size = { w = 71, h = 87 },\n\t\tcan_use = function(self, card)\n\t\t\treturn true\n\t\tend,\n\t\tuse = function(self, card, area, copier)\n\t\t\tlocal tag_type = \"tag_toga_togaxcopydnaarchive\"\n\t\t\tfor i = 1, card.ability.val do\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = (function()\n\t\t\t\t\t\tadd_tag(Tag(tag_type))\n\t\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\t\tplay_sound('holo1', 1.2 + math.random()*0.1, 0.4)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend)\n\t\t\t\t\t}))\n\t\t\t\tdelay(0.2)\n\t\t\tend\n\t\t\tdelay(0.6)\n\t\tend,\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal val, max = progressbar(card.ability.partial_rounds, card.ability.upgrade_rounds)\n\t\t\treturn { vars = {card.ability.val, val, max, card.ability.upgrade_rounds} }\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('MoreFluff')[1] }, badges) end\n\t\tend",
      "config": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "ability": {
        "val": 0,
        "partial_rounds": 0,
        "upgrade_rounds": 2
      },
      "vars": [
        0,
        null,
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAPartners",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAPartners\", path = \"togapartners.png\", px = 66, py = 66",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "internetspades",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'internetspades',\n\tconfig = { extra = { xchip = 1.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xchip } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 5, y = 0 },\n\tcost = 8,\n\tpools = { [\"TOGAJKR\"] = true },\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context.other_consumeable then\n\t\t\tlocal aheads, onlyspades = {}, true\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i].config.center.rarity == \"payasaka_ahead\" then aheads[#aheads+1] = G.jokers.cards[i] end\n\t\t\tend\n\t\t\tif context.full_hand and #context.full_hand > 0 then\n\t\t\t\tfor i = 1, #context.full_hand do\n\t\t\t\t\tif not context.full_hand[i]:is_suit('Spades') then onlyspades = false; break end\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #aheads > 0 and onlyspades then\n\t\t\t\tlocal context = context\n\t\t\t\treturn {\n\t\t\t\t\tfunc = function()\n\t\t\t\t\t\tfor i = 1, #aheads do\n\t\t\t\t\t\t\tlocal effects = {\n\t\t\t\t\t\t\t\tx_chips = card.ability.extra.xchip > 1 and card.ability.extra.xchip or nil,\n\t\t\t\t\t\t\t\txchip_message = card.ability.extra.xchip > 1 and {message = localize{ type = \"variable\", key = \"a_xchips\", vars = { card.ability.extra.xchip } }, colour = G.C.CHIPS, sound = \"xchips\"} or nil,\n\t\t\t\t\t\t\t\tcard = aheads[i]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlocal stacked, stackamount = togabalatro.stackingcompat(context)\n\t\t\t\t\t\t\tif stacked and stackamount then\n\t\t\t\t\t\t\t\tfor i = 1, stackamount do\n\t\t\t\t\t\t\t\t\tSMODS.calculate_individual_effect(effects, context.other_consumeable, 'xchips', effects.x_chips, false)\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse SMODS.calculate_individual_effect(effects, context.other_consumeable, 'xchips', effects.x_chips, false) end\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('pta_saka')[1] }, badges) end\n\tend,\n\tpixel_size = { w = 69, h = 74 }",
      "config": {
        "extra": {
          "xchip": 1.5
        }
      },
      "ability": {
        "extra": {
          "xchip": 1.5
        }
      },
      "vars": [
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spiceoflife",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'spiceoflife',\n\t\tconfig = { extra = { bakedgoods = {} } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal bakedgoods, count = {}, 0\n\t\t\tif G.consumeables then\n\t\t\t\tfor i = 1, #G.consumeables.cards do\n\t\t\t\t\tif G.consumeables.cards[i].ability.set == 'Bakery' and not bakedgoods[G.consumeables.cards[i].config.center.key] then\n\t\t\t\t\t\tbakedgoods[G.consumeables.cards[i].config.center.key] = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tfor k, v in pairs(bakedgoods) do\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn { key = count > 1 and self.key..\"_rtrg\" or self.key, vars = { count > 1 and count or 0 } }\n\t\tend,\n\t\tunlocked = true,\n\t\tdiscovered = true,\n\t\trarity = 2,\n\t\tatlas = 'TOGAJokersOtherDiffSize',\n\t\tpos = { x = 6, y = 0 },\n\t\tcost = 5,\n\t\tpools = { [\"TOGAJKR\"] = true },\n\t\tblueprint_compat = true,\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.before then\n\t\t\t\tcard.ability.extra.bakedgoods = {}\n\t\t\t\tfor i = 1, #G.consumeables.cards do\n\t\t\t\t\tif G.consumeables.cards[i].ability.set == 'Bakery' and not card.ability.extra.bakedgoods[G.consumeables.cards[i].config.center.key] then\n\t\t\t\t\t\tcard.ability.extra.bakedgoods[G.consumeables.cards[i].config.center.key] = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif context.retrigger_joker_check and not context.retrigger_joker and context.other_card.ability.set == 'Bakery' then\n\t\t\t\tlocal count = 0\n\t\t\t\tfor k, v in pairs(card.ability.extra.bakedgoods) do\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\t\tif count > 1 then\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage = localize('k_again_ex'),\n\t\t\t\t\t\trepetitions = count,\n\t\t\t\t\t\tcard = context.blueprint_card or card,\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('sdm0sstuff')[1] }, badges) end\n\t\tend,\n\t\tpixel_size = { w = 69, h = 74 }",
      "config": {
        "extra": {
          "bakedgoods": {}
        }
      },
      "ability": {
        "extra": {
          "bakedgoods": {}
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGASleeves",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGASleeves\", path = \"togasleeves.png\", px = 73, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAYahistuff",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAYahistuff\", path = \"togayahi.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAXPBlind",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAXPBlind\", path = \"togaxpblind.png\", px = 34, py = 34, atlas_table = 'ANIMATION_ATLAS', frames = 1",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "horseconch",
      "atlas": "TOGAYahistuff",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'horseconch',\n\tconfig = { extra = { hxmult = horsehxmult, hdollars = horsehdollars, heeemult = Talisman and horseeeemult } },\n\tloc_vars = function(self, info_queue, card)\n\t\tif self.discovered then\n\t\t\tcard.ability.extra.hxmult = math.max(card.ability.extra.hxmult, horsehxmult)\n\t\t\tinfo_queue[#info_queue+1] = G.P_SEALS['yahimod_horse_seal']\n\t\tend\n\t\treturn { vars = { card.ability.extra.hxmult, card.ability.extra.hdollars } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAYahistuff',\n\tpos = { x = 0, y = 0 },\n\tcost = 6,\n\tpools = { [\"TOGAJKR\"] = true },\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.hxmult = math.max(card.ability.extra.hxmult, horsehxmult)\n\t\tif Talisman then card.ability.extra.heeemult = math.max(card.ability.extra.heeemult, horseeeemult) end\n\t\tif context.cardarea == G.hand and context.other_card and not context.other_card.debuff and context.other_card.seal == \"yahimod_horse_seal\"\n\t\tand not context.repetition and not context.repetition_only and not context.end_of_round then\n\t\t\t--local chanceroll = Talisman and pseudorandom(\"thegianthorseconchweighsover11pounds\") < G.GAME.probabilities.normal/supremescret\n\t\t\tlocal chanceroll = Talisman and SMODS.pseudorandom_probability(card, \"thegianthorseconchweighsover11pounds\", 1, supremescret)\n\t\t\treturn {\n\t\t\t\txmult = not chanceroll and card.ability.extra.hxmult,\n\t\t\t\teeemult = chanceroll and card.ability.extra.heeemult,\n\t\t\t\teeemult_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEEmult\", vars = { card.ability.extra.heeemult } }, colour = G.C.DARK_EDITION, sound = \"talisman_eeemult\"} or nil,\n\t\t\t\tdollars = card.ability.extra.hdollars\n\t\t\t}\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tif self.discovered then\n\t\t\tSMODS.create_mod_badges({ mod = SMODS.find_mod('Yahimod')[1] }, badges)\n\t\tend\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend,\n\tupdate = function(self, card, context)\n\t\tif card.ability.cry_rigged then card.ability.cry_rigged = nil end\n\tend,\n\tpixel_size = { w = 50, h = 95 }",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gatosorrindo",
      "atlas": "TOGAYahistuff",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'gatosorrindo',\n\tconfig = { extra = { xchips = catxchips, eeechips = Talisman and cateeechips } },\n\tloc_vars = function(self, info_queue, card)\n\t\tif self.discovered then card.ability.extra.xchips = math.max(card.ability.extra.xchips, catxchips) end\n\t\treturn { vars = { card.ability.extra.xchips } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAYahistuff',\n\tpos = { x = 1, y = 0 },\n\tcost = 5,\n\tpools = { [\"Cat\"] = true, [\"TOGAJKR\"] = true },\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.xchips = math.max(card.ability.extra.xchips, catxchips)\n\t\tif Talisman then card.ability.extra.eeechips = math.max(card.ability.extra.eeechips, cateeechips) end\n\t\tif context.other_joker and context.other_joker.config.center and context.other_joker.config.center.pools\n\t\tand context.other_joker.config.center.pools.Cat and context.other_joker.config.center.key ~= card.config.center.key then\n\t\t\t--local chanceroll = Talisman and pseudorandom(\"thecatmusical\") < G.GAME.probabilities.normal/supremescret\n\t\t\tlocal chanceroll = Talisman and local chanceroll = Talisman and SMODS.pseudorandom_probability(card, \"thecatmusical\", 1, supremescret)\n\t\t\treturn {\n\t\t\t\txchips = not chanceroll and card.ability.extra.xchips,\n\t\t\t\teeechips = chanceroll and card.ability.extra.eeechips,\n\t\t\t\teeechip_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEEchip\", vars = { card.ability.extra.eeechips } }, colour = G.C.DARK_EDITION, sound = \"talisman_eeechip\"} or nil,\n\t\t\t\tmessage_card = context.other_joker\n\t\t\t}\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tif self.discovered then\n\t\t\tSMODS.create_mod_badges({ mod = SMODS.find_mod('Yahimod')[1] }, badges)\n\t\tend\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend,\n\tupdate = function(self, card, context)\n\t\tif card.ability.cry_rigged then card.ability.cry_rigged = nil end\n\tend,\n\tpixel_size = { w = 69, h = 74 }",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "bombshee",
      "atlas": "TOGAYahistuff",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'bombshee',\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { key = G.washee == 1 and self.key or self.key..\"_n\" }\n\tend,\n\tset = 'Tarot',\n\tatlas = 'TOGAYahistuff',\n\tpos = {x = 2, y = 0},\n\tno_collection = true,\n\tcost = 5,\n\tin_pool = function()\n\t\treturn G.washee == 1\n\tend,\n\tcan_use = function(self, card, area, copier)\n\t\treturn G.washee == 1\n\tend,\n\tuse = function(self, card, area, copier)\n\t\tif G.washee == 1 then\n\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\tG.washee = nil\n\t\t\t\tplay_sound(\"toga_failsfx\", 1, 0.5)\n\t\t\treturn true end }))\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tif self.discovered then SMODS.create_mod_badges({ mod = SMODS.find_mod('Yahimod')[1] }, badges) end\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "xpboss",
      "atlas": "TOGAXPBlind",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'xpboss',\n\tatlas = 'TOGAXPBlind',\n\tboss_colour = HEX('7292e5'),\n\tpos = { x = 0, y = 0 },\n\tdollars = 5,\n\tmult = 5.1,\n\tboss = { min = 1, showdown = true },\n\tignore_showdown_check = true,\n\tdebuff = { toga_no_disable = true },\n\tset_blind = function(self)\n\t\tfor i = 1, #G.jokers.cards do\n\t\t\tG.jokers.cards[i]:set_ability(G.P_CENTERS['j_toga_winxp'])\n\t\tend\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "frogdeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"frogdeck\",\n\tpos = { x = 0, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tdiscovered = true,\n\tconfig = {ante_scaling = 1.25, hands = -1, discards = -1, joker_slot = 1, consumable_slot = 1, hand_size = 3, dollars = 6, spectral_rate = 1},\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.hands, self.config.discards, self.config.joker_slot, self.config.consumable_slot, self.config.ante_scaling, self.config.hand_size } }\n\tend",
      "config": {
        "ante_scaling": 1.25,
        "hands": -1,
        "discards": -1,
        "joker_slot": 1,
        "consumable_slot": 1,
        "hand_size": 3,
        "dollars": 6,
        "spectral_rate": 1
      },
      "ability": {
        "ante_scaling": 1.25,
        "hands": -1,
        "discards": -1,
        "joker_slot": 1,
        "consumable_slot": 1,
        "hand_size": 3,
        "dollars": 6,
        "spectral_rate": 1
      },
      "vars": [
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "spacedeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"spacedeck\",\n\tpos = { x = 1, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tconfig = {vouchers = {'v_planet_merchant', 'v_planet_tycoon'}, spectral_rate = 1.25},\n\tapply = function(self, back)\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tif G.jokers then\n\t\t\t\t\tSMODS.add_card({ key = \"j_space\" })\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend,\n\t\t}))\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "srb2kartdeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"srb2kartdeck\",\n\tpos = { x = 2, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tconfig = {spectral_rate = 1, joker_slot = -2},\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.ante_scaling or 1, self.config.joker_slot } }\n\tend,\n\tapply = function(self, back)\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tif G.jokers then\n\t\t\t\t\tSMODS.add_card({ key = \"j_toga_jokersrb2kart\", stickers = { \"eternal\" } })\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend,\n\t\t}))\n\tend",
      "config": {
        "spectral_rate": 1,
        "joker_slot": -2
      },
      "ability": {
        "spectral_rate": 1,
        "joker_slot": -2
      },
      "vars": [
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "againdeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"againdeck\",\n\tpos = { x = 3, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tconfig = {joker_slot = -2, ante_scaling = 1.33, repeatamount = 0},\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.ante_scaling, self.config.joker_slot } }\n\tend,\n\tcalculate = function(self, back, context)\n\t\tif context.before then back.effect.config.repeatamount = G.jokers.cards and #G.jokers.cards or 0 end\n\t\t\n\t\tif context.cardarea == G.play and context.repetition and not context.repetition_only\n\t\tand context.other_card and back.effect.config.repeatamount and back.effect.config.repeatamount > 0 then\n\t\t\treturn {\n\t\t\t\trepetitions = back.effect.config.repeatamount,\n\t\t\t\tmessage = localize('k_again_ex'),\n\t\t\t}\n\t\tend\n\t\t\n\t\tif context.after then back.effect.config.repeatamount = 0 end\n\tend,",
      "config": {
        "joker_slot": -2,
        "ante_scaling": 1.33,
        "repeatamount": 0
      },
      "ability": {
        "joker_slot": -2,
        "ante_scaling": 1.33,
        "repeatamount": 0
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "311deck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = \"311deck\",\n\tpos = { x = 4, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tconfig = { extraante = 3, dollars = 7, reducehandsel = -2, hand_size = 3, pokerhandlvlup = 1},\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.dollars, self.config.hand_size, self.config.reducehandsel, self.config.extraante, self.config.pokerhandlvlup } }\n\tend,\n\tapply = function(self, back)\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tfor _, v in ipairs(G.handlist) do\n\t\t\t\t\tG.GAME.hands[v].level = G.GAME.hands[v].level + self.config.pokerhandlvlup\n\t\t\t\t\tG.GAME.hands[v].mult = math.max(G.GAME.hands[v].s_mult + G.GAME.hands[v].l_mult*(G.GAME.hands[v].level - 1), 1)\n\t\t\t\t\tG.GAME.hands[v].chips = math.max(G.GAME.hands[v].s_chips + G.GAME.hands[v].l_chips*(G.GAME.hands[v].level - 1), 0)\n\t\t\t\t\tif v ~= \"High Card\" and v ~= \"Pair\" and v ~= \"Three of a Kind\" then\n\t\t\t\t\t\tG.GAME.hands[v].visible = false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tG.GAME.win_ante = G.GAME.win_ante + self.config.extraante\n\t\t\t\tif G.hand then\n\t\t\t\t\ttogabalatro.handlimitchange(self.config.reducehandsel)\n\t\t\t\t\t--G.hand.config.highlighted_limit = G.hand.config.highlighted_limit + self.config.reducehandsel\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend,\n\t\t}))\n\tend,\n\tcalculate = function(self, card, context)\n\t\tlocal iter, iterlimit = 0, 65535 -- Just so we don't freeze the game.\n\t\twhile G.GAME.round_resets.blind_choices.Boss == 'bl_psychic' do\n\t\t\tG.GAME.round_resets.blind_choices.Boss = get_new_boss()\n\t\t\titer = iter + 1\n\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Iteration \"..iter..\" of \"..iterlimit..\" rolling for non-Psychic boss blinds.\", \"TOGAPack\") end\n\t\t\tif iter >= iterlimit then break end\n\t\tend\n\tend",
      "config": {
        "extraante": 3,
        "dollars": 7,
        "reducehandsel": -2,
        "hand_size": 3,
        "pokerhandlvlup": 1
      },
      "ability": {
        "extraante": 3,
        "dollars": 7,
        "reducehandsel": -2,
        "hand_size": 3,
        "pokerhandlvlup": 1
      },
      "vars": [
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "screamingdeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = \"screamingdeck\",\n\tpos = { x = 5, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tconfig = {ante_scaling = 1.25},\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.ante_scaling } }\n\tend,\n\tapply = function(self, back)\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tif G.playing_cards then\n\t\t\t\t\tlocal cardtable = {}\n\t\t\t\t\tfor k, v in ipairs(G.playing_cards) do cardtable[#cardtable+1] = v end\n\t\t\t\t\tfor i=#cardtable, 1, -1 do\n\t\t\t\t\t\tif cardtable[i].base.id ~= 14 then\n\t\t\t\t\t\t\tcardtable[i]:remove()\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tadd_tag(Tag('tag_coupon'))\n\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\tplay_sound('holo1', 0.4, 1)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend,\n\t\t}))\n\tend",
      "config": {
        "ante_scaling": 1.25
      },
      "ability": {
        "ante_scaling": 1.25
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "drunkdeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = \"drunkdeck\",\n\tpos = { x = 6, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tapply = function(self, back)\n\t\tG.GAME.modifiers.toga_reversedscore = true\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "waitthatsillegaldeck",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = \"waitthatsillegaldeck\",\n\tpos = { x = 7, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tapply = function(self, back)\n\t\tG.GAME.modifiers.toga_randomscore = true\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "blissful",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = \"blissful\",\n\tatlas = \"TOGADeckBack\",\n\tpos = { x = 8, y = 0 },\n\tconfig = {ante_scaling = 2, hands = -1, discards = -1, joker_slot = -1, consumable_slot = -1, extraante = 4}, -- maybe remove extra Antes?\n\tloc_vars = function(self, info_queue, center)\n\t\treturn { vars = { self.config.hands, self.config.discards, self.config.joker_slot, self.config.consumable_slot, self.config.ante_scaling, self.config.extraante } }\n\tend,\n\tapply = function(self, back)\n\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tif G.GAME and G.GAME.win_ante then\n\t\t\t\t\tG.GAME.win_ante = G.GAME.win_ante + self.config.extraante\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend,\n\t\t}))\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif (context.retrigger_joker_check or context.retrigger_joker or context.blueprint) then return end\n\t\tif context.check_enhancement and context.other_card and context.no_blueprint then\n\t\t\tlocal curenh = {}\n\t\t\tif G.playing_cards and #G.playing_cards > 0 then\n\t\t\t\tfor i = 1, #G.playing_cards do\n\t\t\t\t\tif G.playing_cards[i].ability.set == 'Enhanced' and G.playing_cards[i].config and not curenh[G.playing_cards[i].config.center_key] then curenh[G.playing_cards[i].config.center_key] = true end\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn curenh\n\t\tend\n\tend",
      "config": {
        "ante_scaling": 2,
        "hands": -1,
        "discards": -1,
        "joker_slot": -1,
        "consumable_slot": -1,
        "extraante": 4
      },
      "ability": {
        "ante_scaling": 2,
        "hands": -1,
        "discards": -1,
        "joker_slot": -1,
        "consumable_slot": -1,
        "extraante": 4
      },
      "vars": [
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "prairie",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "key = \"prairie\",\n\tpos = { x = 9, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tapply = function(self, back)\n\t\tG.GAME.modifiers.toga_noplayedscore = true\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "betafish",
      "atlas": "TOGADeckBack",
      "pos": {
        "x": 10,
        "y": 0
      },
      "raw": "key = \"betafish\",\n\tpos = { x = 10, y = 0 },\n\tatlas = \"TOGADeckBack\",\n\tunlocked = true,\n\tapply = function(self, back)\n\t\tG.GAME.modifiers.toga_nohandscore = true\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGARetroSkinOG",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGARetroSkinOG\", path = \"togaoldschoolcards_og.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGARetroSkinLC",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGARetroSkinLC\", path = \"togaoldschoolcards_lc.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGARetroSkinHC",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGARetroSkinHC\", path = \"togaoldschoolcards_hc.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAModernSkinClassic",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAModernSkinClassic\", path = \"togamoderncards_classic.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAModernSkinHearts",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAModernSkinHearts\", path = \"togamoderncards_hearts.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAModernSkinSeasons",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAModernSkinSeasons\", path = \"togamoderncards_seasons.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAModernSkinLargePrint",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAModernSkinLargePrint\", path = \"togamoderncards_largeprint.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "oldschool_",
      "atlas": null,
      "pos": null,
      "raw": "key = \"oldschool_\"..suit,\n\t\tsuit = suit,\n\t\tloc_txt = {\n\t\t\t['default'] = \"Classic Windows Cards\"\n\t\t},\n\t\tpalettes = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_oldschool_og",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_oldschool_og', ranks = ranks, display_ranks = dranks, atlas = rog.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_oldschool_lc",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_oldschool_lc', ranks = ranks, display_ranks = dranks, atlas = rlc.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_oldschool_hc",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_oldschool_hc', ranks = ranks, display_ranks = dranks, atlas = rhc.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "modern_",
      "atlas": null,
      "pos": null,
      "raw": "key = \"modern_\"..suit,\n\t\tsuit = suit,\n\t\tloc_txt = {\n\t\t\t['default'] = \"Modern Windows Cards\"\n\t\t},\n\t\tpalettes = {},",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_modern_default",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_modern_default', ranks = ranks, display_ranks = dranks, atlas = mclassic.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_modern_hearts",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_modern_hearts', ranks = ranks, display_ranks = dranks, atlas = mhearts.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_modern_seasons",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_modern_seasons', ranks = ranks, display_ranks = dranks, atlas = mseason.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DeckSkin",
      "key": "toga_modern_largeprint",
      "atlas": null,
      "pos": null,
      "raw": "key = 'toga_modern_largeprint', ranks = ranks, display_ranks = dranks, atlas = mlargep.key,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "notification",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'notification',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 0, y = 0 },\n\tweight = 3",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "coalcoke",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'coalcoke',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 1, y = 0 },\n\tconfig = { h_chips = 40 },\n\treplace_base_card = true,\n\tno_rank = true,\n\tno_suit = true,\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.h_chips } }\n\tend,\n\tweight = 15",
      "config": {
        "h_chips": 40
      },
      "ability": {
        "h_chips": 40
      },
      "vars": [
        40
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "iron",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'iron',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 2, y = 0 },\n\tconfig = { h_x_mult = 1.25 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.h_x_mult } }\n\tend,\n\tweight = 12",
      "config": {
        "h_x_mult": 1.25
      },
      "ability": {
        "h_x_mult": 1.25
      },
      "vars": [
        1.25
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "silver",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'silver',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 3, y = 0 },\n\tconfig = { x_mult = 1.25 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.x_mult } }\n\tend,",
      "config": {
        "x_mult": 1.25
      },
      "ability": {
        "x_mult": 1.25
      },
      "vars": [
        1.25
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "electrum",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'electrum',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 4, y = 0 },\n\tconfig = { p_dollars = 1, x_mult = 1.5 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.p_dollars, card.ability.x_mult } }\n\tend,\n\tweight = 2,\n\tset_badges = function(self, card, badges)\n        badges[#badges+1] = create_badge(localize('toga_alloy'), HEX('e4d691'), G.C.WHITE, 1)\n    end,",
      "config": {
        "p_dollars": 1,
        "x_mult": 1.5
      },
      "ability": {
        "p_dollars": 1,
        "x_mult": 1.5
      },
      "vars": [
        1,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "copper",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'copper',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 5, y = 0 },\n\tconfig = { h_x_chips = 1.5 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.h_x_chips } }\n\tend,",
      "config": {
        "h_x_chips": 1.5
      },
      "ability": {
        "h_x_chips": 1.5
      },
      "vars": [
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "tin",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'tin',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 6, y = 0 },\n\talways_scores = true,\n\tweight = 15",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "bronze",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = 'bronze',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 7, y = 0 },\n\tconfig = { h_x_chips = 2.25 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.h_x_chips } }\n\tend,\n\tweight = 1,\n\tset_badges = function(self, card, badges)\n        badges[#badges+1] = create_badge(localize('toga_alloy'), HEX('a87544'), G.C.WHITE, 1)\n    end,",
      "config": {
        "h_x_chips": 2.25
      },
      "ability": {
        "h_x_chips": 2.25
      },
      "vars": [
        2.25
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "osmium",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = 'osmium',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 8, y = 0 },\n\tconfig = { x_chips = 1.25 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.x_chips } }\n\tend,",
      "config": {
        "x_chips": 1.25
      },
      "ability": {
        "x_chips": 1.25
      },
      "vars": [
        1.25
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "sms",
      "atlas": "TOGAEnhancements",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "key = 'sms',\n\tatlas = \"TOGAEnhancements\",\n\tpos = { x = 9, y = 0 },\n\tweight = 2",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "y2kbug",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'y2kbug',\n\tconfig = { extra = { chips = 25, mult = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.mult } }\n\tend,\n\tunlocked = true,\n\tdiscovered = true,\n\trarity = 1,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 1, y = 0 },\n\tcost = 4,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tlocal twos, kings = toga_y2kcheck(context)\n\t\t\tif twos > 0 and kings > 0 then\n\t\t\t\treturn {chips = card.ability.extra.chips, mult = card.ability.extra.mult}\n\t\t\tend\n\t\tend\n\tend",
      "config": {
        "extra": {
          "chips": 25,
          "mult": 4
        }
      },
      "ability": {
        "extra": {
          "chips": 25,
          "mult": 4
        }
      },
      "vars": [
        25,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "controlpanel",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'controlpanel',\n\tconfig = { extra = { money = 0.5, increase = 0.5, totalmoney = 3.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.money, card.ability.extra.increase, math.ceil(card.ability.extra.totalmoney) } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 1, y = 1 },\n\tcost = 7,\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context.end_of_round and not (context.individual or context.repetition or context.blueprint) and G.GAME.blind.boss then\n\t\t\tcard.ability.extra.money = card.ability.extra.money + card.ability.extra.increase\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex')})\n\t\tend\n\tend,\n\tcalc_dollar_bonus = function(self, card)\n\t\tif card.ability.extra.money > 0 then\n\t\t\tlocal jokerslotbonus, consslotbonus = 0, 0\n\t\t\tif G.jokers then jokerslotbonus = card.ability.extra.money*G.jokers.config.card_limit end\n\t\t\tif G.consumeables then consslotbonus = card.ability.extra.money*G.consumeables.config.card_limit end\n\t\t\tcard.ability.extra.totalmoney = jokerslotbonus+consslotbonus\n\t\t\treturn math.ceil(card.ability.extra.totalmoney)\n\t\tend\n\tend",
      "config": {
        "extra": {
          "money": 0.5,
          "increase": 0.5,
          "totalmoney": 3.5
        }
      },
      "ability": {
        "extra": {
          "money": 0.5,
          "increase": 0.5,
          "totalmoney": 3.5
        }
      },
      "vars": [
        0.5,
        0.5,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "taskmgr",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'taskmgr',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 0, y = 1 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif G.GAME.current_round.discards_left == 2 then\n\t\t\tlocal eval = function() return G.GAME.current_round.discards_left == 1 end\n\t\t\tjuice_card_until(card, eval, true)\n\t\tend\n\t\t\n\t\tif context.discard and not context.blueprint then\n\t\t\tif G.GAME.current_round.discards_left == 1 then\n\t\t\t\treturn {\n\t\t\t\t\tremove = true,\n\t\t\t\t\tcard = context.other_card\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_infraredbegin\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_infraredend\")\n\t\tend\n\tend",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "useraccounts",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'useraccounts',\n\tconfig = { extra = { baseXmult = 1, totalXmult = 1, odds = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tif self.discovered then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_useraccountsinfo\", set = 'Other'}\n\t\tend\n\t\tcard.ability.extra.totalXmult = toga_multaverage(card)\n\t\treturn { vars = { card.ability.extra.totalXmult, SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.odds) } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 3, y = 1 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.cardarea == G.jokers and context.before then\n\t\t\tcard.ability.extra.totalXmult = toga_multaverage(card)\n\t\tend\n\t\t\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif context.other_card and SMODS.pseudorandom_probability(card, \"toga_useraccounts\", 1, card.ability.extra.odds) then\n\t\t\t\treturn { x_mult = card.ability.extra.totalXmult }\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "baseXmult": 1,
          "totalXmult": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "baseXmult": 1,
          "totalXmult": 1,
          "odds": 4
        }
      },
      "vars": [
        1,
        1,
        {
          "extra": {
            "baseXmult": 1,
            "totalXmult": 1,
            "odds": 4
          }
        }
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "virtualmemory",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'virtualmemory',\n\tconfig = { extra = { odds = 4 }, bypasswu = true },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { (G.GAME and G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 3, y = 0 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tif SMODS.pseudorandom_probability(card, \"toga_virtualmemory\", 1, card.ability.extra.odds) then\n\t\t\t\treturn {\n\t\t\t\t\tswap = true,\n\t\t\t\t\tmessage = localize('toga_pagefileuse'),\n\t\t\t\t\tcolour = G.C.PURPLE,\n\t\t\t\t\tsound = not silent and togabalatro.config.SFXWhenTriggered and \"toga_mmeclap\",\n\t\t\t\t\tpitch = not silent and togabalatro.config.SFXWhenTriggered and togabalatro.randompitch(),\n\t\t\t\t\tmessage_card = context.other_card\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "odds": 4
        },
        "bypasswu": true
      },
      "ability": {
        "extra": {
          "odds": 4
        },
        "bypasswu": true
      },
      "vars": [
        1,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "recyclebin",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'recyclebin',\n\tconfig = { extra = { xchip_increase = 0.05, xchip_mod = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xchip_increase, card.ability.extra.xchip_mod, card.ability.extra.xchip_increase*3 } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 2, y = 2 },\n\tcost = 12,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tlocal xchipval = card.ability.extra and card.ability.extra.xchip_mod or 1\n\t\t\n\t\tif context.individual and context.cardarea == G.play and xchipval > 1 then\n\t\t\tif context.other_card == context.scoring_hand[#context.scoring_hand] then\n\t\t\t\treturn {\n\t\t\t\t\tx_chips = card.ability.extra.xchip_mod > 1 and card.ability.extra.xchip_mod or nil,\n\t\t\t\t\txchip_message = card.ability.extra.xchip_mod > 1 and {message = localize{ type = \"variable\", key = \"a_xchips\", vars = { card.ability.extra.xchip_mod } }, colour = G.C.CHIPS, sound = \"xchips\"} or nil,\n\t\t\t\t\tcard = context.blueprint_card or card\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\n\t\tif context.remove_playing_cards then\n\t\t\tfor k, v in ipairs(context.removed) do\n\t\t\t\tif v.config.center ~= G.P_CENTERS.c_base then\n\t\t\t\t\tcard.ability.extra.xchip_mod = card.ability.extra.xchip_mod+(card.ability.extra.xchip_increase*3)\n\t\t\t\telse\n\t\t\t\t\tcard.ability.extra.xchip_mod = card.ability.extra.xchip_mod+card.ability.extra.xchip_increase\n\t\t\t\tend\n\t\t\tend\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex'), sound = not silent and togabalatro.config.SFXWhenTriggered and \"toga_recyclebinsfx\"})\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_recyclebinsfx\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_plus98emptybin\")\n\t\tend\n\tend,\n\tupdate = function(self, card, context)\n\t\tif card.ability.extra.xchip_mod < 1 then card.ability.extra.xchip_mod = 1 end\n\tend",
      "config": {
        "extra": {
          "xchip_increase": 0.05,
          "xchip_mod": 1
        }
      },
      "ability": {
        "extra": {
          "xchip_increase": 0.05,
          "xchip_mod": 1
        }
      },
      "vars": [
        0.05,
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "theinternet",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = 'theinternet',\n\tconfig = { extra = { curchips = 0, bonuschips = 15 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.curchips = (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.all or 0) * card.ability.extra.bonuschips\n\t\treturn { vars = { card.ability.extra.curchips, card.ability.extra.bonuschips } }\n\tend,\n\tunlocked = true,\n\trarity = 1,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 3, y = 2 },\n\tcost = 3,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.using_consumeable and not context.blueprint then\n\t\t\tcard.ability.extra.curchips = (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.all or 0) * card.ability.extra.bonuschips\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_chips', vars = { card.ability.extra.curchips } }, colour = G.C.CHIPS })\n\t\tend\n\t\t\n\t\tif (context.joker_main or context.forcetrigger) and card.ability.extra.curchips > 0 then\n\t\t\treturn {\n\t\t\t\tchips = card.ability.extra.curchips,\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "curchips": 0,
          "bonuschips": 15
        }
      },
      "ability": {
        "extra": {
          "curchips": 0,
          "bonuschips": 15
        }
      },
      "vars": [
        0,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "computerlock",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'computerlock',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 0, y = 0 },\n\tcost = 10,\n\tblueprint_compat = false,\n\teternal_compat = false,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.eternal then card:set_eternal(false); card.ability.eternal = false end\n\t\t\n\t\tif (context.selling_self or context.forcetrigger) and not context.retrigger_joker and not context.blueprint_card then\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i] == card then\n\t\t\t\t\tif i > 1 then\n\t\t\t\t\t\tif G.jokers.cards[i-1] and not G.jokers.cards[i-1].ability.eternal and G.jokers.cards[i-1].config.center.key ~= \"j_toga_computerlock\" then\n\t\t\t\t\t\t\tG.jokers.cards[i-1]:set_eternal(true)\n\t\t\t\t\t\t\tG.jokers.cards[i-1].ability.eternal = true\n\t\t\t\t\t\t\tcard_eval_status_text(G.jokers.cards[i-1], 'extra', nil, nil, nil, {message = localize('toga_userlocked'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_mscmenucmd'})\n\t\t\t\t\t\telseif G.jokers.cards[i-1] and G.jokers.cards[i-1].ability.eternal then\n\t\t\t\t\t\t\tG.jokers.cards[i-1]:set_eternal(false)\n\t\t\t\t\t\t\tG.jokers.cards[i-1].ability.eternal = false\n\t\t\t\t\t\t\tcard_eval_status_text(G.jokers.cards[i-1], 'extra', nil, nil, nil, {message = localize('toga_userunlocked'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_mscmenucmd'})\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif i < #G.jokers.cards then\n\t\t\t\t\t\tif G.jokers.cards[i+1] and not G.jokers.cards[i+1].ability.eternal and G.jokers.cards[i+1].config.center.key ~= \"j_toga_computerlock\" then\n\t\t\t\t\t\t\tG.jokers.cards[i+1]:set_eternal(true)\n\t\t\t\t\t\t\tG.jokers.cards[i+1].ability.eternal = true\n\t\t\t\t\t\t\tcard_eval_status_text(G.jokers.cards[i+1], 'extra', nil, nil, nil, {message = localize('toga_userlocked'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_mscmenucmd'})\n\t\t\t\t\t\telseif G.jokers.cards[i+1] and G.jokers.cards[i+1].ability.eternal then\n\t\t\t\t\t\t\tG.jokers.cards[i+1]:set_eternal(false)\n\t\t\t\t\t\t\tG.jokers.cards[i+1].ability.eternal = false\n\t\t\t\t\t\t\tcard_eval_status_text(G.jokers.cards[i+1], 'extra', nil, nil, nil, {message = localize('toga_userunlocked'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_mscmenucmd'})\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "virtualpc",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = 'virtualpc',\n\tconfig = { extra = { odds = 15 }, bypasswu = true },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.odds) } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 2, y = 3 },\n\tcost = 20,\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context and not (context.mod_probability or context.fix_probability or context.check_enhancement or context.blueprint or context.pseudorandom_result) then\n\t\t\t-- Larswijn and N' were here.\n\t\t\tlocal returns = nil\n\t\t\tlocal merge = {}\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tlocal other_joker = G.jokers.cards[i]\n\t\t\t\tif other_joker and other_joker:can_calculate() and other_joker.config.center.key ~= self.key and SMODS.pseudorandom_probability(card, \"virtualpc2004sp1\", 1, card.ability.extra.odds) then\n\t\t\t\t\tlocal other_joker_effect = SMODS.blueprint_effect(card, other_joker, context)\n\t\t\t\t\tif other_joker_effect and not other_joker_effect.was_blueprinted then\n\t\t\t\t\t\tother_joker_effect.was_blueprinted = true\n\t\t\t\t\t\tif context.repetition then\n\t\t\t\t\t\t\treturns = returns or {}\n\t\t\t\t\t\t\treturns.repetitions = (returns.repetitions or 0) + other_joker_effect.repetitions\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttable.insert(merge, other_joker_effect)\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\treturns = SMODS.merge_effects(merge)\n\t\t\tif returns and next(returns) ~= nil then\n\t\t\t\treturn returns\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "odds": 15
        },
        "bypasswu": true
      },
      "ability": {
        "extra": {
          "odds": 15
        },
        "bypasswu": true
      },
      "vars": [
        1,
        {
          "extra": {
            "odds": 15
          },
          "bypasswu": true
        }
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ie",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = 'ie',\n\tconfig = { extra = { phchips = 5, phmult = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { 100/card.ability.extra.phchips, 100/card.ability.extra.phmult } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 1, y = 3 },\n\tcost = 7,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.ending_shop or context.forcetrigger then\n\t\t\tlocal curcard = context.blueprint_card or card\n\t\t\tlocal cxt = context\n\t\t\treturn {\n\t\t\t\tfunc = function()\n\t\t\t\t\tlocal names = {}\n\t\t\t\t\tfor k, v in ipairs(G.handlist) do\n\t\t\t\t\t\tif G.GAME.hands[v] and G.GAME.hands[v].visible then names[#names+1] = v end\n\t\t\t\t\tend\n\t\t\t\t\tlocal hand = pseudorandom_element(names, pseudoseed('ie'))\n\t\t\t\t\ttogabalatro.modifylevelchipsmult(curcard, hand, false, to_number(G.GAME.hands[hand].s_chips)/card.ability.extra.phchips, to_number(G.GAME.hands[hand].s_mult)/card.ability.extra.phmult, cxt)\n\t\t\t\tend\n\t\t\t}\n\t\tend\n\tend",
      "config": {
        "extra": {
          "phchips": 5,
          "phmult": 4
        }
      },
      "ability": {
        "extra": {
          "phchips": 5,
          "phmult": 4
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "systemrestore",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 'systemrestore',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 0, y = 3 },\n\tcost = 12,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context.remove_playing_cards then\n\t\t\tlocal addedcards = {}\n\t\t\tfor i = 1, #context.removed do\n\t\t\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(context.removed[i].base.id, \"TOGAPack\") end\n\t\t\t\tlocal _card = copy_card(context.removed[1], nil, nil, G.playing_card)\n\t\t\t\t_card:add_to_deck()\n\t\t\t\tG.deck.config.card_limit = G.deck.config.card_limit + 1\n\t\t\t\ttable.insert(G.playing_cards, _card)\n\t\t\t\tG.deck:emplace(_card)\n\t\t\t\ttable.insert(addedcards, _card)\n\t\t\tend\n\t\t\tplaying_card_joker_effects(addedcards)\n\t\t\treturn { message = localize('toga_systemrestore1') }\n\t\tend\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "skype",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 3,
        "y": 3
      },
      "raw": "key = 'skype',\n\tconfig = { extra = { permodxmult = 2.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.permodxmult = math.max(card.ability.extra.permodxmult, 1)\n\t\tlocal mods, modcount = {['TOGAPack'] = true}, 1 -- count ourselves.\n\t\tif G.jokers and G.consumeables then\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i].config.center.original_mod and not mods[G.jokers.cards[i].config.center.original_mod.id] then\n\t\t\t\t\tmods[G.jokers.cards[i].config.center.original_mod.id] = true\n\t\t\t\t\tmodcount = modcount + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor i = 1, #G.consumeables.cards do\n\t\t\t\tif G.consumeables.cards[i].config.center.original_mod and not mods[G.consumeables.cards[i].config.center.original_mod.id] then\n\t\t\t\t\tmods[G.consumeables.cards[i].config.center.original_mod.id] = true\n\t\t\t\t\tmodcount = modcount + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn { key = modcount > 1 and self.key..\"_moremod\" or self.key, vars = { card.ability.extra.permodxmult, card.ability.extra.permodxmult*modcount, modcount } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 3, y = 3 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tcard.ability.extra.permodxmult = math.max(card.ability.extra.permodxmult, 1)\n\t\t\tlocal mods, modcount = {['TOGAPack'] = true}, 1 -- count ourselves.\n\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\tif G.jokers.cards[i].config.center.original_mod and not mods[G.jokers.cards[i].config.center.original_mod.id] then\n\t\t\t\t\tmods[G.jokers.cards[i].config.center.original_mod.id] = true\n\t\t\t\t\tmodcount = modcount + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor i = 1, #G.consumeables.cards do\n\t\t\t\tif G.consumeables.cards[i].config.center.original_mod and not mods[G.consumeables.cards[i].config.center.original_mod.id] then\n\t\t\t\t\tmods[G.consumeables.cards[i].config.center.original_mod.id] = true\n\t\t\t\t\tmodcount = modcount + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn { xmult = math.max(1, card.ability.extra.permodxmult*modcount) }\n\t\tend\n\tend",
      "config": {
        "extra": {
          "permodxmult": 2.5
        }
      },
      "ability": {
        "extra": {
          "permodxmult": 2.5
        }
      },
      "vars": [
        2.5,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "msn",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 'msn',\n\tconfig = { extra = { perenhxmult = 1.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.perenhxmult = math.max(card.ability.extra.perenhxmult, 1.5)\n\t\tlocal enh, enhcount = {}, 0\n\t\tif G.playing_cards then\n\t\t\tfor i = 1, #G.playing_cards do\n\t\t\t\tmsncount = true\n\t\t\t\tlocal enhget = SMODS.get_enhancements(G.playing_cards[i])\n\t\t\t\tif next(enhget) ~= nil then\n\t\t\t\t\tfor k, v in pairs(enhget) do\n\t\t\t\t\t\tif not enh[k] then enh[k] = true; enhcount = enhcount + 1 end\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tmsncount = false\n\t\t\tend\n\t\tend\n\t\treturn { vars = { card.ability.extra.perenhxmult, card.ability.extra.perenhxmult^enhcount } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 0, y = 4 },\n\tcost = 10,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tcard.ability.extra.perenhxmult = math.max(card.ability.extra.perenhxmult, 1.5)\n\t\t\tlocal enh, enhcount = {}, 0\n\t\t\tif G.playing_cards then\n\t\t\t\tfor i = 1, #G.playing_cards do\n\t\t\t\t\tlocal enhget = SMODS.get_enhancements(G.playing_cards[i])\n\t\t\t\t\tif next(enhget) ~= nil then\n\t\t\t\t\t\tfor k, v in pairs(enhget) do\n\t\t\t\t\t\t\tif not enh[k] then enh[k] = true; enhcount = enhcount + 1 end\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn { xmult = math.max(1, card.ability.extra.perenhxmult^enhcount) }\n\t\tend\n\tend",
      "config": {
        "extra": {
          "perenhxmult": 1.5
        }
      },
      "ability": {
        "extra": {
          "perenhxmult": 1.5
        }
      },
      "vars": [
        1.5,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "drivespace",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'drivespace',\n\tconfig = { extra = { reduce = 0.97 }, bypasswu = true },\n\tloc_vars = function(self, info_queue, card)\n\t\tif card.ability.extra.reduce > 1 then card.ability.extra.reduce = 0.97 end -- catch.\n\t\treturn { vars = { card.ability.extra.reduce } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 2, y = 1 },\n\tcost = 25,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.extra.reduce > 1 then card.ability.extra.reduce = 0.97 end -- catch.\n\t\t\n\t\tif context.cardarea == G.play then\n\t\t\tif context.other_card and not context.before and not context.after and not context.repetition and not context.repetition_only and to_big(G.GAME.blind.chips) > to_big(0) then\n\t\t\t\tif Talisman and Talisman.config_file.disable_anims then\n\t\t\t\t\tG.GAME.blind.chips = math.floor(G.GAME.blind.chips*card.ability.extra.reduce)\n\t\t\t\t\tG.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\t\t\t\t\tG.FUNCS.blind_chip_UI_scale(G.hand_text_area.blind_chips)\n\t\t\t\t\tG.HUD_blind:recalculate()\n\t\t\t\t\treturn nil, true\n\t\t\t\telse\n\t\t\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\t\t\tG.GAME.blind.chips = math.floor(G.GAME.blind.chips*card.ability.extra.reduce)\n\t\t\t\t\t\tG.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\t\t\t\t\t\tG.FUNCS.blind_chip_UI_scale(G.hand_text_area.blind_chips)\n\t\t\t\t\t\tG.HUD_blind:recalculate()\n\t\t\t\t\t\tG.hand_text_area.blind_chips:juice_up()\n\t\t\t\t\t\tcard:juice_up()\n\t\t\t\t\t\t\n\t\t\t\t\t\tif not silent and togabalatro.config.SFXWhenTriggered then play_sound(togabalatro.plus95rndsfx()) end\n\t\t\t\t\treturn true end }))\n\t\t\t\t\treturn nil, true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend",
      "config": {
        "extra": {
          "reduce": 0.97
        },
        "bypasswu": true
      },
      "ability": {
        "extra": {
          "reduce": 0.97
        },
        "bypasswu": true
      },
      "vars": [
        0.97
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimbo95",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'jimbo95',\n\tconfig = { extra = { h_size = 2, retriggers = 1, x_chips = 1.5, x_mult = 1.5} },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.x_chips = math.max(card.ability.extra.x_chips, 1)\n\t\tcard.ability.extra.x_mult = math.max(card.ability.extra.x_mult, 1)\n\t\tcard.ability.extra.retriggers = math.max(card.ability.extra.retriggers, 1)\n\t\treturn { vars = { card.ability.extra.h_size, math.floor(card.ability.extra.retriggers), card.ability.extra.x_chips, card.ability.extra.x_mult } }\n\tend,\n\tunlocked = true,\n\tdiscovered = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 2, y = 0 },\n\tsoul_pos = { x = 5, y = 0 },\n\tcost = 20,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.hand:change_size(card.ability.extra.h_size)\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.hand:change_size(-card.ability.extra.h_size)\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main then\n\t\t\tif card.ability.extra.x_chips < 1 then card.ability.extra.x_chips = 1 end -- no reduce.\n\t\t\tif card.ability.extra.x_mult < 1 then card.ability.extra.x_mult = 1 end -- only extend.\n\n\t\t\treturn {\n\t\t\t\tx_chips = card.ability.extra.x_chips > 1 and card.ability.extra.x_chips or nil,\n\t\t\t\txchip_message = card.ability.extra.x_chips > 1 and {message = localize{ type = \"variable\", key = \"a_xchips\", vars = { card.ability.extra.x_chips } }, colour = G.C.CHIPS, sound = \"xchips\"} or nil,\n\t\t\t\tx_mult = card.ability.extra.x_mult > 1 and card.ability.extra.x_mult or nil\n\t\t\t}\n\t\tend\n\t\tlocal othcrd = context.other_card\n\t\tif context.retrigger_joker_check and not context.retrigger_joker and othcrd and othcrd ~= card and othcrd.config and othcrd.config.center and othcrd.config.center.key and othcrd.config.center.key ~= 'j_toga_jimbo95' then\n\t\t\tif card.ability.extra.retriggers < 1 then card.ability.extra.retriggers = 1 end -- always at least once.\n\t\t\treturn {\n\t\t\t\tmessage = toga_randomruntext(),\n\t\t\t\trepetitions = math.floor(card.ability.extra.retriggers),\n\t\t\t\tcard = context.blueprint_card or card,\n\t\t\t}\n\t\tend\n\tend",
      "config": {
        "extra": {
          "h_size": 2,
          "retriggers": 1,
          "x_chips": 1.5,
          "x_mult": 1.5
        }
      },
      "ability": {
        "extra": {
          "h_size": 2,
          "retriggers": 1,
          "x_chips": 1.5,
          "x_mult": 1.5
        }
      },
      "vars": [
        2,
        null,
        1.5,
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "clippit",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'clippit',\n\tconfig = { extra = { rescores = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tif self.discovered then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_clippyorigin\", set = 'Other'}\n\t\tend\n\t\treturn { vars = { math.floor(card.ability.extra.rescores) } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 1, y = 2 },\n\tsoul_pos = { x = 5, y = 2 },\n\tcost = 25,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context.cardarea and context.cardarea == G.hand and (context.clippitscore or context.clippitscore_eor) then\n\t\t\treturn { rescores = card.ability.extra.repetitions, card = context.blueprint_card or card }\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_o97doorbell\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_o97glide\")\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "rescores": 1
        }
      },
      "ability": {
        "extra": {
          "rescores": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rover",
      "atlas": "TOGAJokerRover",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'rover',\n\tconfig = { extra = { odds = 8, curstate = \"shop\" }, bypasswu = true },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.odds) } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokerRover',\n\tpos = { x = 0, y = 0 },\n\tsoul_pos = { x = 1, y = 0 },\n\tcost = 15,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.roverscore then return { rover = card.ability.extra.odds, card = context.blueprint_card or card } end\n\t\tif context.after then card.ability.roverscore = nil end\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tcard.ability.extra.animated = true\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tcard.ability.extra.animated = nil\n\tend,\n\tupdate = function(self, card)\n\t\tif not card.ability.extra.animated then return end\n\t\t\n\t\tif G.STATE == G.STATES.GAME_OVER then\n\t\t\tcard.ability.extra.curstate = \"loss\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 7, y = 0})\n\t\telseif G.GAME.won and G.OVERLAY_MENU and G.OVERLAY_MENU.config.no_esc then\n\t\t\tcard.ability.extra.curstate = \"win\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 4, y = 0})\n\t\telseif G.shop then\n\t\t\tcard.ability.extra.curstate = \"shop\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 3, y = 0})\n\t\telseif G.round_eval then\n\t\t\tcard.ability.extra.curstate = \"roundeval\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 2, y = 0})\n\t\telseif G.booster_pack then\n\t\t\tcard.ability.extra.curstate = \"booster\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 3, y = 0})\n\t\telseif G.blind_select then\n\t\t\tcard.ability.extra.curstate = \"blindselect\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 5, y = 0})\n\t\telseif G.GAME.blind then\n\t\t\tcard.ability.extra.curstate = \"inblind\"\n\t\t\tif G.GAME.blind.boss then\n\t\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 6, y = 0})\n\t\t\telse\n\t\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 1, y = 0})\n\t\t\tend\n\t\telse -- Just so we don't crash.\n\t\t\tcard.ability.extra.curstate = \"fallback\"\n\t\t\tcard.children.floating_sprite:set_sprite_pos({x = 1, y = 0})\n\t\tend\n\tend",
      "config": {
        "extra": {
          "odds": 8,
          "curstate": "shop"
        },
        "bypasswu": true
      },
      "ability": {
        "extra": {
          "odds": 8,
          "curstate": "shop"
        },
        "bypasswu": true
      },
      "vars": [
        1,
        {
          "extra": {
            "odds": 8,
            "curstate": "shop"
          },
          "bypasswu": true
        }
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "solitairejoker",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'solitairejoker',\n\tconfig = { extra = { h_size = 3, chips = 100, hands = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.h_size, card.ability.extra.chips, card.ability.extra.hands } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 0, y = 0 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tG.hand:change_size(card.ability.extra.h_size)\n\t\tG.GAME.round_resets.hands = G.GAME.round_resets.hands - card.ability.extra.hands\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tG.hand:change_size(-card.ability.extra.h_size)\n\t\tG.GAME.round_resets.hands = G.GAME.round_resets.hands + card.ability.extra.hands\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main or context.forcetrigger then return { chips = card.ability.extra.chips } end\n\tend",
      "config": {
        "extra": {
          "h_size": 3,
          "chips": 100,
          "hands": 1
        }
      },
      "ability": {
        "extra": {
          "h_size": 3,
          "chips": 100,
          "hands": 1
        }
      },
      "vars": [
        3,
        100,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jokersrb2kart",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'jokersrb2kart',\n\tconfig = { extra = { Xmult_current = 1, add_shop = 0.05, addshortcut = 0.75, shortcutfailmult = 1.33, maxchance = 3} },\n\tloc_vars = function(self, info_queue, card)\n\t\tif self.discovered then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_kartjokerlist\", set = 'Other', vars = { card.ability.extra.add_shop, card.ability.extra.add_shop*8 } }\n\t\t\tif G.GAME.selected_back.effect.center.key == 'b_toga_srb2kartdeck' then info_queue[#info_queue + 1] = {key = \"toga_kartjokershortcutspecial\", set = 'Other', vars = { card.ability.extra.addshortcut/2.5 } }\n\t\t\telse\n\t\t\t\tlocal num, dem = SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.maxchance)\n\t\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_kartjokershortcut\", set = 'Other', vars =\n\t\t\t\t\t{ num, dem, card.ability.extra.addshortcut, math.abs((1-card.ability.extra.shortcutfailmult)*100) }\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\treturn { vars = { card.ability.extra.Xmult_current } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 1, y = 0 },\n\tcost = 10,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif not card then return end\n\t\tif card.ability.extra.eliminated or card.debuff then return end\n\t\t\n\t\tif card.ability.extra.Xmult_current < 1 and not card.debuff then -- Catch.\n\t\t\tplay_sound('tarot1')\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('toga_karteliminated'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_ssb64crowdohh'})\n\t\t\tcard.ability.extra.Xmult_current = 0\n\t\t\tcard.ability.extra.eliminated = true\n\t\t\tSMODS.debuff_card(card, true, card)\n\t\t\treturn nil, true\n\t\tend\n\t\t\n\t\tif (context.buying_card or context.selling_card or context.playing_card_added or context.ending_shop or context.using_consumeable or context.open_booster or context.reroll_shop or context.ending_shop)\n\t\tand not context.individual and not context.blueprint then\n\t\t\tcard.ability.extra.Xmult_current = card.ability.extra.Xmult_current + (context.ending_shop and card.ability.extra.add_shop*8 or context.playing_card_added and context.cards and #context.cards and card.ability.extra.add_shop*#context.cards or card.ability.extra.add_shop)\n\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex')});\n\t\t\t\treturn true\n\t\t\tend}))\n\t\telseif (context.skip_blind or context.skipping_booster) and not context.blueprint then\n\t\t\t--if pseudorandom('j_toga_jokersrb2kart') > (G.GAME.probabilities.normal * card.ability.extra.toexactchance) / card.ability.extra.maxchance and G.GAME.selected_back.effect.center.key ~= 'b_toga_srb2kartdeck' then\n\t\t\tif not SMODS.pseudorandom_probability(card, 'j_toga_jokersrb2kart', 1, card.ability.extra.maxchance) and G.GAME.selected_back.effect.center.key ~= 'b_toga_srb2kartdeck' then\n\t\t\t\tif not toga_checkxmultsafe(card) then\n\t\t\t\t\t-- Eliminated!\n\t\t\t\t\tcard.ability.extra.Xmult_current = 0\n\t\t\t\t\tcard.ability.extra.eliminated = true\n\t\t\t\t\tSMODS.debuff_card(card, true, card)\n\t\t\t\t\treturn {message = localize('toga_karteliminated'), colour = G.C.RED, sound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_ssb64crowdohh'}\n\t\t\t\telse\n\t\t\t\t\tcard.ability.extra.Xmult_current = card.ability.extra.Xmult_current / card.ability.extra.shortcutfailmult\n\t\t\t\t\treturn {message = localize('toga_kartouch'), colour = G.C.RED}\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tlocal shortcutbonus = G.GAME.selected_back.effect.center.key == 'b_toga_srb2kartdeck' and card.ability.extra.addshortcut/2.5 or card.ability.extra.addshortcut\n\t\t\t\tcard.ability.extra.Xmult_current = card.ability.extra.Xmult_current + shortcutbonus\n\t\t\t\treturn {message = localize('k_upgrade_ex')}\n\t\t\tend\n\t\telseif context.joker_main or context.forcetrigger then\n\t\t\tif card.ability.extra.Xmult_current > 1 then return { x_mult = card.ability.extra.Xmult_current } end\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "Xmult_current": 1,
          "add_shop": 0.05,
          "addshortcut": 0.75,
          "shortcutfailmult": 1.33,
          "maxchance": 3
        }
      },
      "ability": {
        "extra": {
          "Xmult_current": 1,
          "add_shop": 0.05,
          "addshortcut": 0.75,
          "shortcutfailmult": 1.33,
          "maxchance": 3
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "asterism",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'asterism',\n\tconfig = { extra = { curmult = 0, bonusmult = 5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.curmult = (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.planet or 0) * card.ability.extra.bonusmult\n\t\treturn { vars = { card.ability.extra.curmult > 0 and card.ability.extra.curmult or (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.planet or 0) * card.ability.extra.bonusmult, card.ability.extra.bonusmult } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 0, y = 1 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.using_consumeable and not context.blueprint and context.consumeable.ability.set == 'Planet' then\n\t\t\tcard.ability.extra.curmult = (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.planet or 0) * card.ability.extra.bonusmult\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_mult', vars = { card.ability.extra.curmult } } })\n\t\tend\n\t\t\n\t\tif (context.joker_main or context.forcetrigger) and card.ability.extra.curmult > 0 then return { mult = card.ability.extra.curmult } end\n\tend",
      "config": {
        "extra": {
          "curmult": 0,
          "bonusmult": 5
        }
      },
      "ability": {
        "extra": {
          "curmult": 0,
          "bonusmult": 5
        }
      },
      "vars": [
        0,
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bonusducks",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'bonusducks',\n\tunlocked = true,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_bonushat\n\tend,\n\trarity = 2,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 1, y = 1 },\n\tcost = 7,\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif context.blueprint then return end\n\t\t\n\t\tif context.cardarea == G.jokers and context.before then\n\t\t\tlocal faces = {}\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v:is_face() then \n\t\t\t\t\tfaces[#faces+1] = v\n\t\t\t\t\tv:set_ability(G.P_CENTERS.m_bonus, nil, true)\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tv:juice_up()\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\t})) \n\t\t\t\tend\n\t\t\tend\n\t\t\tif #faces > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize('toga_bonusapply'),\n\t\t\t\t\tcolour = G.C.CHIPS,\n\t\t\t\t\tcard = card,\n\t\t\t\t\tsound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_duck',\n\t\t\t\t\tpitch = not silent and togabalatro.config.SFXWhenTriggered and togabalatro.randompitch()\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_duck\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_kcud\")\n\t\tend\n\tend,",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mcanvil",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'mcanvil',\n\tconfig = { extra = { repetitions = 1, totalrepetitions = 0, steelneed = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.m_steel\n\t\tcard.ability.extra.totalrepetitions = toga_gettotalsteelcount(card.ability.extra.steelneed)*card.ability.extra.repetitions or 0\n\t\tcard.ability.extra.steelneed = math.ceil(math.max(card.ability.extra.steelneed, 1))\n\t\treturn { vars = { math.floor(card.ability.extra.repetitions), toga_gettotalsteelcount(card.ability.extra.steelneed)*card.ability.extra.repetitions, card.ability.extra.steelneed } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 2, y = 1 },\n\tsoul_pos = { x = 4, y = 1 },\n\tcost = 10,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.totalrepetitions = toga_gettotalsteelcount(card.ability.extra.steelneed)*card.ability.extra.repetitions or 0\n\t\tif context.cardarea == G.play and context.repetition and not context.repetition_only and card.ability.extra.totalrepetitions >= 1 then\n\t\t\treturn {\n\t\t\t\tmessage = localize('toga_anviltrigger'),\n\t\t\t\trepetitions = math.floor(card.ability.extra.totalrepetitions),\n\t\t\t\tcard = context.blueprint_card or card,\n\t\t\t\tsound = not silent and togabalatro.config.SFXWhenTriggered and 'toga_anviluse',\n\t\t\t\tpitch = not silent and togabalatro.config.SFXWhenTriggered and togabalatro.randompitch()\n\t\t\t}\n\t\tend\n\tend",
      "config": {
        "extra": {
          "repetitions": 1,
          "totalrepetitions": 0,
          "steelneed": 4
        }
      },
      "ability": {
        "extra": {
          "repetitions": 1,
          "totalrepetitions": 0,
          "steelneed": 4
        }
      },
      "vars": [
        null,
        null,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spacecadetpinball",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'spacecadetpinball',\n\tconfig = { extra = { cashpoint = 20, alltrig = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.alltrig = togabalatro.cashpointmulitple(card.ability.extra.cashpoint) or 1\n\t\treturn { vars = { card.ability.extra.cashpoint, math.max(card.ability.extra.alltrig-1, 1), SMODS.get_probability_vars(card or self, 1, 3) } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 0, y = 2 },\n\tcost = 15,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.before then card.ability.extra.alltrig = togabalatro.cashpointmulitple(card.ability.extra.cashpoint) end\n\t\tif context.spacecadetscore then return { spacecadet = card.ability.extra.alltrig, card = context.blueprint_card or card } end\n\t\tif context.after then card.ability.pinballscore = nil end\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_pinballstart\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_pinballloseball\")\n\t\tend\n\tend",
      "config": {
        "extra": {
          "cashpoint": 20,
          "alltrig": 1
        }
      },
      "ability": {
        "extra": {
          "cashpoint": 20,
          "alltrig": 1
        }
      },
      "vars": [
        20,
        null,
        null,
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "heartyspades",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'heartyspades',\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 0, y = 0 },\n\tcost = 6,\n\tblueprint_compat = false,\n\tpixel_size = { w = 69, h = 74 }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "binaryjkr",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 'binaryjkr',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 0, y = 3 },\n\tcost = 8,\n\tblueprint_compat = false",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hexadecimaljkr",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = 'hexadecimaljkr',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 1, y = 3 },\n\tcost = 8,\n\tblueprint_compat = false",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "y2ksticker",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'y2ksticker',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 2, y = 0 },\n\tcost = 7,\n\tblueprint_compat = false,\n\tpixel_size = { w = 69, h = 38 }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pso2ironwill",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "key = 'pso2ironwill',\n\tconfig = { extra = { skillactive = true } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.skillactive, card.ability.extra.skillactive and localize('toga_pso2ironwillready') or localize('toga_pso2ironwillrecharge') } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 4, y = 2 },\n\tcost = 30,\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.extra.skillactive and context.end_of_round and context.game_over and not context.repetition and not context.individual and to_big(G.GAME.dollars) > to_big(0) then\n\t\t\tcard.ability.extra.skillactive = false\n\t\t\tease_dollars(to_big(-G.GAME.dollars), true)\n\t\t\treturn {\n\t\t\t\tmessage = localize('toga_pso2ironwillproc'),\n\t\t\t\tsaved = 'toga_pso2ironwillsave', -- no longer needing Lovely patches for this, but it is a bit backwards with implementation.\n\t\t\t\tcolour = G.C.RED\n\t\t\t}\n\t\tend\n\t\t\n\t\tif context.end_of_round and not (context.individual or context.repetition or context.blueprint) and G.GAME.blind.boss and not card.ability.extra.skillactive then\n\t\t\tcard.ability.extra.skillactive = true\n\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('toga_pso2ironwillready')})\n\t\tend\n\tend,",
      "config": {
        "extra": {
          "skillactive": true
        }
      },
      "ability": {
        "extra": {
          "skillactive": true
        }
      },
      "vars": [
        true,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jimboplus",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'jimboplus',\n\tconfig = { extra = { jimboxmult = 0.25, otherxmult = 0.05 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.jimboxmult, card.ability.extra.otherxmult, toga_jimbopluscalc(card) } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 1, y = 2 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tlocal xval = toga_jimbopluscalc(card) or 1\n\t\t\treturn { xmult = xval > 1 and xval }\n\t\tend\n\tend",
      "config": {
        "extra": {
          "jimboxmult": 0.25,
          "otherxmult": 0.05
        }
      },
      "ability": {
        "extra": {
          "jimboxmult": 0.25,
          "otherxmult": 0.05
        }
      },
      "vars": [
        0.25,
        0.05,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "speedsneakers",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'speedsneakers',\n\tconfig = { extra = { xmultpart = 0.1, dollars = 5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal total = toga_gethowmuch(card.ability.extra.dollars, card.ability.extra.xmultpart)*card.ability.extra.xmultpart\n\t\treturn { vars = { card.ability.extra.xmultpart, card.ability.extra.dollars, to_big(1)+to_big(total) > to_big(1) and to_big(1)+to_big(total) or to_big(1) } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 1, y = 0 },\n\tcost = 5,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tpixel_size = { w = 69, h = 74 },\n\tcalculate = function(self, card, context)\n\t\tif context.joker_main or context.forcetrigger then\n\t\t\tlocal total = toga_gethowmuch(card.ability.extra.dollars, card.ability.extra.xmultpart)*card.ability.extra.xmultpart\n\t\t\treturn { xmult = to_big(1)+to_big(total) > to_big(1) and to_number(to_big(1)+to_big(total)) or 1 }\n\t\tend\n\tend",
      "config": {
        "extra": {
          "xmultpart": 0.1,
          "dollars": 5
        }
      },
      "ability": {
        "extra": {
          "xmultpart": 0.1,
          "dollars": 5
        }
      },
      "vars": [
        0.1,
        5,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "megasxlr",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 'megasxlr',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 0, y = 4 },\n\tcost = 8,\n\tblueprint_compat = false,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jarate",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'jarate',\n\tconfig = { extra = { minicrit = 0.65, used = false }},\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { 100*card.ability.extra.minicrit - 100, card.ability.extra.used and localize('toga_jaraterecharging') or localize('toga_jarateready') } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 3, y = 0 },\n\tcost = 5,\n\tblueprint_compat = false,\n\tperishable_compat = false,\n\teternal_compat = false,\n\tpixel_size = { w = 69, h = 73 },\n\tcalculate = function(self, card, context)\n\t\tif context.blueprint then return end\n\t\t\n\t\tif context.setting_blind and G.GAME.blind.boss and not G.GAME.blind.jarated and not card.getting_sliced and not card.ability.extra.used then\n\t\t\tG.GAME.blind.jarated, card.ability.extra.used = true, true\n\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\tG.GAME.blind.chips = math.floor(G.GAME.blind.chips*card.ability.extra.minicrit)\n\t\t\t\tG.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\t\t\t\tG.FUNCS.blind_chip_UI_scale(G.hand_text_area.blind_chips)\n\t\t\t\tG.HUD_blind:recalculate()\n\t\t\t\tG.hand_text_area.blind_chips:juice_up()\n\t\t\t\tcard:juice_up()\n\t\t\t\tif not silent and togabalatro.config.SFXWhenTriggered then play_sound('toga_jaratehit') end\n\t\t\treturn true end }))\n\t\t\treturn nil, true\n\t\tend\n\t\t\n\t\tif context.cardarea == G.jokers and context.before then\n\t\t\tlocal australia = 0\n\t\t\tfor k, v in ipairs(context.scoring_hand) do\n\t\t\t\tif v.config.center ~= G.P_CENTERS.c_base or v.seal or v.edition then\n\t\t\t\t\taustralia = australia + 1\n\t\t\t\t\tv.jarated = true\n\t\t\t\t\tv:set_edition()\n\t\t\t\t\tv:set_seal()\n\t\t\t\t\tv:set_ability(G.P_CENTERS.c_base, nil, true)\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tv:juice_up()\n\t\t\t\t\t\t\tv.jarated = nil\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\t}))\n\t\t\t\tend\n\t\t\tend\n\t\t\tif australia > 0 then\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize('toga_jarated'),\n\t\t\t\t\tcolour = G.C.RED,\n\t\t\t\t\tcard = card\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\t\t\n\t\tif context.starting_shop then\n\t\t\tif card.ability.extra.used then\n\t\t\t\tcard_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('toga_jaraterestocked')})\n\t\t\t\tlocal eval = function() return not (G.GAME.blind and G.GAME.blind.boss and G.GAME.blind.jarated) end\n\t\t\t\tjuice_card_until(card, eval, true)\n\t\t\tend\n\t\t\tcard.ability.extra.used = false\n\t\tend\n\tend",
      "config": {
        "extra": {
          "minicrit": 0.65,
          "used": false
        }
      },
      "ability": {
        "extra": {
          "minicrit": 0.65,
          "used": false
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "goldenwrench",
      "atlas": "TOGAJokersOtherDiffSize",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'goldenwrench',\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersOtherDiffSize',\n\tpos = { x = 4, y = 0 },\n\tcost = 2,\n\tblueprint_compat = false,\n\tperishable_compat = false,\n\teternal_compat = false,\n\tdemicolon_compat = true,\n\tpixel_size = { w = 69, h = 87 },\n\tcalculate = function(self, card, context)\n\t\tif context.selling_self and context.card == card then card.ability.sold = true elseif context.forcetrigger then togabalatro.goldenwrench(card) end\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "winupdate",
      "atlas": "TOGAJokersUpdate",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'winupdate',\n\tconfig = { extra = { plusval = 0.5 }, },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.plusval*100, card.ability.extra.active } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersUpdate',\n\tpos = { x = 0, y = 0 },\n\tcost = 25,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif (context.end_of_round and not context.repetition and not context.individual) or context.forcetrigger then\n\t\t\treturn { func = function()\n\t\t\t\ttoga_rndvaluetarget(card, card.ability.extra.plusval)\n\t\t\tend }\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tcard.ability.extra.animated = true\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tcard.ability.extra.animated = nil\n\tend,\n\tupdate = function(self, card, context)\n\t\tif not card.ability.extra.animated then return end\n\t\tif G.jokers and G.jokers.config and G.jokers.config.card_limit < 0 then G.jokers.config.card_limit = 1 end -- Just in case.\n\t\tlocal timer = (G.TIMERS.REAL * 4) \n\t\tlocal frame_amount = #winupdateframes\n\t\tlocal wrapped_value = (math.floor(timer) - 1) % frame_amount + 1\n\t\tcard.children.center:set_sprite_pos({x = winupdateframes[wrapped_value], y = 0})\n\tend,",
      "config": {
        "extra": {
          "plusval": 0.5
        }
      },
      "ability": {
        "extra": {
          "plusval": 0.5
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tomscott",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'tomscott',\n\tconfig = { extra = { basexmult = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.basexmult, card.ability.extra.basexmult ^ toga_calccopiesofself(card.config.center.key) } }\n\tend,\n\tunlocked = true,\n\tin_pool = function()\n\t\treturn togabalatro.config.JokeJokersActive, { allow_duplicates = true } -- Should only spawn if allowed to via config!\n\tend,\n\trarity = 2,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 2, y = 2 },\n\tcost = 5,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tlocal curxmult = card.ability.extra.basexmult ^ toga_calccopiesofself(card.config.center.key)\n\t\tif context.joker_main or context.forcetrigger then\n\t\t\treturn { xmult = curxmult }\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend",
      "config": {
        "extra": {
          "basexmult": 2
        }
      },
      "ability": {
        "extra": {
          "basexmult": 2
        }
      },
      "vars": [
        2,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "michaelrosen",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = 'michaelrosen',\n\tconfig = { extra = { heldmoney = 10, heldxchip = 1.75, heldxmult = 2, heldechip = 1.3, heldeechip = 1.1, heldeeechip = 1.05, heldemult = 1.2, heldeemult = 1.08, heldeeemult = 1.04, odds = 25 } },\n\tloc_vars = function(self, info_queue, card)\n\t\ttoga_rosencheck(card)\n\t\tif not card.debuff then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_roseneffects\", set = 'Other', vars = { card.ability.extra.heldmoney, card.ability.extra.heldxchip, card.ability.extra.heldxmult }}\n\t\t\tif Talisman then\n\t\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_rosentalismanextra\", set = 'Other', vars = {\n\t\t\t\t\tcard.ability.extra.heldechip, card.ability.extra.heldeechip, card.ability.extra.heldeeechip, card.ability.extra.heldemult, card.ability.extra.heldeemult, card.ability.extra.heldeeemult\n\t\t\t\t}}\n\t\t\tend\n\t\tend\n\t\treturn { vars = { SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).extra.odds) } }\n\tend,\n\tunlocked = true,\n\tin_pool = function()\n\t\treturn togabalatro.config.JokeJokersActive -- Should only spawn if allowed to via config!\n\tend,\n\trarity = 4,\n\tatlas = 'TOGAJokersOther',\n\tpos = { x = 2, y = 3 },\n\tsoul_pos = { x = 4, y = 3 },\n\tcost = 33,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.cardarea == G.hand and context.other_card and not context.other_card.debuff and not context.repetition and not context.repetition_only and not context.end_of_round then\n\t\t\t-- Making sure we don't give less than default should we be Glitched or something else changes our values...\n\t\t\ttoga_rosencheck(card)\n\t\t\t-- Still, dear god...\n\t\t\treturn {\n\t\t\t\tdollars = SMODS.pseudorandom_probability(card, \"michaelrosen_money\", 1, card.ability.extra.odds) and card.ability.extra.heldmoney or nil,\n\t\t\t\tx_chips = SMODS.pseudorandom_probability(card, \"michaelrosen_xchips\", 1, card.ability.extra.odds) and card.ability.extra.heldxchip > 1 and card.ability.extra.heldxchip or nil,\n\t\t\t\txchip_message = {message = localize{ type = \"variable\", key = \"a_xchips\", vars = { card.ability.extra.heldxchip } }, colour = G.C.CHIPS, sound = \"xchips\"} or nil,\n\t\t\t\tx_mult = SMODS.pseudorandom_probability(card, \"michaelrosen_xmult\", 1, card.ability.extra.odds) and card.ability.extra.heldxmult > 1 and card.ability.extra.heldxmult or nil,\n\t\t\t\te_chips = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_echips\", 1, card.ability.extra.odds*10) and card.ability.extra.heldechip > 1 and card.ability.extra.heldechip or nil,\n\t\t\t\techip_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_Echip\", vars = { card.ability.extra.heldechip } }, colour = G.C.DARK_EDITION, sound = \"talisman_echip\"} or nil,\n\t\t\t\tee_chips = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_eechips\", 1, card.ability.extra.odds*20) and card.ability.extra.heldeechip > 1 and card.ability.extra.heldeechip or nil,\n\t\t\t\teechip_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEchip\", vars = { card.ability.extra.heldeechip } }, colour = G.C.DARK_EDITION, sound = \"talisman_eechip\"} or nil,\n\t\t\t\teee_chips = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_eeechips\", 1, card.ability.extra.odds*40) and card.ability.extra.heldeeechip > 1 and card.ability.extra.heldeeechip or nil,\n\t\t\t\teeechip_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEEchip\", vars = { card.ability.extra.heldeeechip } }, colour = G.C.DARK_EDITION, sound = \"talisman_eeechip\"} or nil,\n\t\t\t\te_mult = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_emult\", 1, card.ability.extra.odds*10) and card.ability.extra.heldemult > 1 and card.ability.extra.heldemult or nil,\n\t\t\t\temult_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_Emult\", vars = { card.ability.extra.heldemult } }, colour = G.C.DARK_EDITION, sound = \"talisman_echip\"} or nil,\n\t\t\t\tee_mult = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_eemult\", 1, card.ability.extra.odds*20) and card.ability.extra.heldeemult > 1 and card.ability.extra.heldeemult or nil,\n\t\t\t\teemult_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEmult\", vars = { card.ability.extra.heldeemult } }, colour = G.C.DARK_EDITION, sound = \"talisman_eemult\"} or nil,\n\t\t\t\teee_mult = Talisman and SMODS.pseudorandom_probability(card, \"michaelrosen_eeemult\", 1, card.ability.extra.odds*40) and card.ability.extra.heldeeemult > 1 and card.ability.extra.heldeeemult or nil,\n\t\t\t\teeemult_message = Talisman and {message = localize{ type = \"variable\", key = \"toga_EEEmult\", vars = { card.ability.extra.heldeeemult } }, colour = G.C.DARK_EDITION, sound = \"talisman_eeemult\"} or nil,\n\t\t\t}\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_rosenhello\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(from_debuff and \"toga_rosenah\" or \"toga_rosenbye\")\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend",
      "config": {
        "extra": {
          "heldmoney": 10,
          "heldxchip": 1.75,
          "heldxmult": 2,
          "heldechip": 1.3,
          "heldeechip": 1.1,
          "heldeeechip": 1.05,
          "heldemult": 1.2,
          "heldeemult": 1.08,
          "heldeeemult": 1.04,
          "odds": 25
        }
      },
      "ability": {
        "extra": {
          "heldmoney": 10,
          "heldxchip": 1.75,
          "heldxmult": 2,
          "heldechip": 1.3,
          "heldeechip": 1.1,
          "heldeeechip": 1.05,
          "heldemult": 1.2,
          "heldeemult": 1.08,
          "heldeeemult": 1.04,
          "odds": 25
        }
      },
      "vars": [
        1,
        {
          "extra": {
            "heldmoney": 10,
            "heldxchip": 1.75,
            "heldxmult": 2,
            "heldechip": 1.3,
            "heldeechip": 1.1,
            "heldeeechip": 1.05,
            "heldemult": 1.2,
            "heldeemult": 1.08,
            "heldeeemult": 1.04,
            "odds": 25
          }
        }
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "albanianvirus",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "key = 'albanianvirus',\n\tloc_vars = function(self, info_queue, card)\n\t\tif card.ability.albavirusactive then\n\t\t\tinfo_queue[#info_queue + 1] = {key = \"toga_albavirusinfo\", set = 'Other'}\n\t\tend\n\tend,\n\tunlocked = true,\n\trarity = 1,\n\tatlas = 'TOGAJokersMain',\n\tpos = { x = 5, y = 4 },\n\tsoul_pos = { x = 5, y = 3 },\n\tno_collection = true,\n\tcost = 1,\n\tblueprint_compat = false,\n\tcalculate = function(self, card, context)\n\t\tif (context.selling_card and not context.selling_self) or context.remove_playing_cards then\n\t\t\tcard.ability.albavirusactive = nil\n\t\telseif context.selling_self and card.ability.albavirusactive then\n\t\t\tG.STATE = G.STATES.GAME_OVER\n\t\t\tif not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then \n\t\t\t\tG.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n\t\t\tend\n\t\t\tG:save_settings()\n\t\t\tG.FILE_HANDLER.force = true\n\t\t\tG.STATE_COMPLETE = false\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tcard.ability.albavirusactive = true\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif card.ability.albavirusactive then\n\t\t\tG.STATE = G.STATES.GAME_OVER\n\t\t\tif not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then \n\t\t\t\tG.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n\t\t\tend\n\t\t\tG:save_settings()\n\t\t\tG.FILE_HANDLER.force = true\n\t\t\tG.STATE_COMPLETE = false\n\t\tend\n\tend,\n\tset_badges = function(self, card, badges)\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "whatisthis",
      "atlas": "TOGAJokersMain",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'whatisthis',\n\t\tconfig = { extra = { part = 1.05 } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\treturn { vars = { card.ability.extra.part } }\n\t\tend,\n\t\tunlocked = true,\n\t\tin_pool = function()\n\t\t\treturn togabalatro.config.JokeJokersActive -- Should only spawn if allowed to via config!\n\t\tend,\n\t\trarity = 4,\n\t\tatlas = 'TOGAJokersMain',\n\t\tpos = { x = 0, y = 2 },\n\t\tsoul_pos = { x = 5, y = 1 },\n\t\tcost = 30,\n\t\tblueprint_compat = true,\n\t\tperishable_compat = false,\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.other_consumeable then\n\t\t\t\tlocal effects = {\n\t\t\t\t\tee_mult = card.ability.extra.part > 1 and card.ability.extra.part or nil,\n\t\t\t\t\teemult_message = card.ability.extra.part > 1 and {message = localize{ type = \"variable\", key = \"toga_EEmult\", vars = { card.ability.extra.part } }, colour = G.C.DARK_EDITION, sound = \"talisman_eemult\"} or nil,\n\t\t\t\t}\n\t\t\t\tlocal stacked, stackamount = togabalatro.stackingcompat(context.other_consumeable)\n\t\t\t\tif stacked and stackamount then\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tfor i = 1, stackamount do\n\t\t\t\t\t\t\t\tSMODS.calculate_individual_effect(effects, context.other_consumeable, 'ee_mult', effects.ee_mult, false)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\t}\n\t\t\t\telse return effects end\n\t\t\tend\n\t\tend,\n\t\tadd_to_deck = function(self, card, from_debuff)\n\t\t\tif G.STAGE == G.STAGES.RUN and not G.screenwipe then card.sell_cost = 0 end\n\t\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\t\tplay_sound(\"toga_ie31\")\n\t\t\tend\n\t\tend,\n\t\tremove_from_deck = function(self, card, from_debuff)\n\t\t\tif G.STAGE == G.STAGES.RUN and not G.screenwipe then card.sell_cost = 0 end\n\t\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\t\tplay_sound(\"toga_access97\")\n\t\t\tend\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\t\tend",
      "config": {
        "extra": {
          "part": 1.05
        }
      },
      "ability": {
        "extra": {
          "part": 1.05
        }
      },
      "vars": [
        1.05
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "quacksoft",
      "atlas": "TOGAJokersOther",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'quacksoft',\n\t\tconfig = { extra = { cardechip = 0.02 } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\treturn { vars = { card.ability.extra.cardechip, G.deck and G.deck.cards and 1 + (card.ability.extra.cardechip*#G.deck.cards) or 1 } }\n\t\tend,\n\t\tunlocked = true,\n\t\tin_pool = function()\n\t\t\treturn togabalatro.config.JokeJokersActive -- Should only spawn if allowed to via config!\n\t\tend,\n\t\trarity = 4,\n\t\tatlas = 'TOGAJokersOther',\n\t\tpos = { x = 2, y = 0 },\n\t\tsoul_pos = { x = 4, y = 0 },\n\t\tcost = 32,\n\t\tblueprint_compat = true,\n\t\tperishable_compat = false,\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.joker_main then\n\t\t\t\tlocal echipcalc = (1 + (card.ability.extra.cardechip*#G.deck.cards))\n\t\t\t\treturn {\n\t\t\t\t\te_chips = echipcalc > 1 and echipcalc or nil,\n\t\t\t\t\techip_message = echipcalc > 1 and {message = localize{ type = \"variable\", key = \"toga_Echip\", vars = { echipcalc } }, colour = G.C.DARK_EDITION, sound = \"talisman_echip\"} or nil\n\t\t\t\t}\n\t\t\tend\n\t\tend,\n\t\tadd_to_deck = function(self, card, from_debuff)\n\t\t\tif G.STAGE == G.STAGES.RUN and not G.screenwipe then card.sell_cost = 0 end\n\t\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\t\tplay_sound(\"toga_duck\")\n\t\t\tend\n\t\tend,\n\t\tremove_from_deck = function(self, card, from_debuff)\n\t\t\tif G.STAGE == G.STAGES.RUN and not G.screenwipe then card.sell_cost = 0 end\n\t\t\tif not from_debuff and togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\t\tplay_sound(\"toga_kcud\")\n\t\t\tend\n\t\tend,\n\t\tset_badges = function(self, card, badges)\n\t\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\t\tend",
      "config": {
        "extra": {
          "cardechip": 0.02
        }
      },
      "ability": {
        "extra": {
          "cardechip": 0.02
        }
      },
      "vars": [
        0.02,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "linux_ubuntu",
      "atlas": "TOGAJokersLinux",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'linux_ubuntu',\n\tconfig = { extra = { percentage = 0.2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { 100*card.ability.extra.percentage, 1/card.ability.extra.percentage } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersLinux',\n\tpos = { x = 0, y = 0 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tlocal curcard = context.other_joker or context.other_consumeable or nil\n\t\tif curcard and curcard ~= card and curcard.sell_cost*card.ability.extra.percentage > 0 then\n\t\t\tlocal xmultval = curcard and curcard.sell_cost*card.ability.extra.percentage or 0\n\t\t\treturn { xmult = xmultval > 0 and 1+xmultval or 1, message_card = curcard or context.blueprint_card or card }\n\t\tend\n\tend,\n\tpixel_size = { w = 69, h = 69 }",
      "config": {
        "extra": {
          "percentage": 0.2
        }
      },
      "ability": {
        "extra": {
          "percentage": 0.2
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "linux_debian",
      "atlas": "TOGAJokersLinux",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'linux_debian',\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersLinux',\n\tpos = { x = 1, y = 0 },\n\tcost = 4,\n\tblueprint_compat = false,\n\tperishable_compat = false,\n\t-- add_to_deck = function(self, card, from_debuff)\n\t\t-- if not from_debuff then\n\t\t\t-- for k, v in pairs(G.GAME.probabilities) do\n\t\t\t\t-- G.GAME.probabilities[k] = v/2\n\t\t\t-- end\n\t\t-- end\n\t-- end,\n\t-- remove_from_deck = function(self, card, from_debuff)\n\t\t-- if not from_debuff then\n\t\t\t-- for k, v in pairs(G.GAME.probabilities) do\n\t\t\t\t-- G.GAME.probabilities[k] = v*2\n\t\t\t-- end\n\t\t-- end\n\t-- end,\n\tcalculate = function(self, card, context)\n\t\tif context.mod_probability and not context.blueprint then\n\t\t\treturn { numerator = context.numerator / 2 }\n\t\tend\n\tend,\n\tpixel_size = { w = 69, h = 94 }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "linux_slackware",
      "atlas": "TOGAJokersLinux",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'linux_slackware',\n\tconfig = { extra = { persuit = 0.2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal uniquesuits, suitcount, diffkey = {}, 0, false\n\t\tif (G.play and G.play.cards and #G.play.cards > 0) and (G.hand and G.hand.cards and #G.hand.cards > 0) then\n\t\t\tlocal curtarget = #G.play.cards > 0 and G.play.cards or G.hand.cards and #G.hand.highlighted > 0 and G.hand.highlighted\n\t\t\tif curtarget[1] then\n\t\t\t\tfor i = 1, #curtarget do\n\t\t\t\t\tif curtarget[i] and not uniquesuits[curtarget[i].base.suit] then uniquesuits[curtarget[i].base.suit] = true; suitcount = suitcount + 1 end\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif suitcount-1 > 0 then diffkey = true end\n\t\treturn { key = diffkey and self.key..\"_cardsel\" or self.key, vars = { card.ability.extra.persuit, 1+(suitcount-1)*card.ability.extra.persuit > 0 and 1+(suitcount-1)*card.ability.extra.persuit or 0 } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersLinux',\n\tpos = { x = 2, y = 0 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tlocal uniquesuits, suits = {}, 0\n\t\t\tfor i = 1, #G.play.cards do\n\t\t\t\tif G.play.cards[i] and not uniquesuits[G.play.cards[i].base.suit] then uniquesuits[G.play.cards[i].base.suit] = true; suits = suits + 1 end\n\t\t\tend\n\t\t\treturn { xmult = suits > 1 and 1+(suits-1)*card.ability.extra.persuit }\n\t\tend\n\tend,\n\tpixel_size = { w = 69, h = 62 }",
      "config": {
        "extra": {
          "persuit": 0.2
        }
      },
      "ability": {
        "extra": {
          "persuit": 0.2
        }
      },
      "vars": [
        0.2,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "linux_redhat",
      "atlas": "TOGAJokersLinux",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'linux_redhat',\n\tconfig = { extra = { phandscale = 0.1, xmbonus = 0} },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.xmbonus = math.max(card.ability.extra.xmbonus, 0)\n\t\tlocal phands, diffkey = 0, false\n\t\tif (G.play and G.play.cards and #G.play.cards > 0) and (G.hand and G.hand.cards and #G.hand.cards > 0 and G.hand.highlighted and #G.hand.highlighted > 0) then\n\t\t\tlocal curtarget = #G.play.cards > 0 and G.play.cards or G.hand.cards and #G.hand.highlighted > 0 and G.hand.highlighted\n\t\t\tif curtarget and curtarget[1] then\n\t\t\t\tlocal curpokhand = evaluate_poker_hand(curtarget)\n\t\t\t\tfor k, v in pairs(curpokhand) do\n\t\t\t\t\tif k ~= 'High Card' and next(v) ~= nil then phands = phands + 1 end\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif phands > 0 then diffkey = true end\n\t\treturn { key = diffkey and self.key..\"_cardsel\" or self.key, vars = { card.ability.extra.phandscale, 1+card.ability.extra.xmbonus, phands } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersLinux',\n\tpos = { x = 3, y = 0 },\n\tcost = 5,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.before and context.poker_hands then\n\t\t\tcard.ability.extra.xmbonus = math.max(card.ability.extra.xmbonus, 0)\n\t\t\tlocal phands = 0\n\t\t\tfor k, v in pairs(context.poker_hands) do\n\t\t\t\tif k ~= 'High Card' and next(v) ~= nil then phands = phands + 1 end\n\t\t\tend\n\t\t\tif phands > 0 then\n\t\t\t\tcard.ability.extra.xmbonus = card.ability.extra.xmbonus+card.ability.extra.phandscale*phands\n\t\t\t\treturn {message = phands > 1 and localize('k_upgrade_ex')..\" x\"..phands or localize('k_upgrade_ex')}\n\t\t\tend\n\t\tend\n\t\t\n\t\tif context.joker_main or context.forcetrigger then return { xmult = 1+math.max(card.ability.extra.xmbonus, 0) } end\n\tend,\n\tpixel_size = { w = 69, h = 84 }",
      "config": {
        "extra": {
          "phandscale": 0.1,
          "xmbonus": 0
        }
      },
      "ability": {
        "extra": {
          "phandscale": 0.1,
          "xmbonus": 0
        }
      },
      "vars": [
        0.1,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mac_os_9",
      "atlas": "TOGAJokersMac",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'mac_os_9',\n\tconfig = { extra = { hxmult = macos9_hxmult } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.hxmult = math.max(card.ability.extra.hxmult, macos9_hxmult)\n\t\treturn { vars = { card.ability.extra.hxmult } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMac',\n\tpos = { x = 0, y = 0 },\n\tcost = 7,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.hxmult = math.max(card.ability.extra.hxmult, macos9_hxmult)\n\t\tif context.cardarea == G.hand and context.other_card and not context.other_card.debuff and context.other_card:is_suit('Clubs')\n\t\tand not context.repetition and not context.repetition_only and not context.end_of_round then\n\t\t\treturn { xmult = card.ability.extra.hxmult > 1 and card.ability.extra.hxmult or 1 }\n\t\tend\n\tend,\n\tpixel_size = { w = 71, h = 84 }",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mac_os_x",
      "atlas": "TOGAJokersMac",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'mac_os_x',\n\tconfig = { extra = { hxchips = macosx_hxchips } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.hxchips = math.max(card.ability.extra.hxchips, macosx_hxchips)\n\t\treturn { vars = { card.ability.extra.hxchips } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersMac',\n\tpos = { x = 1, y = 0 },\n\tcost = 7,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.hxchips = math.max(card.ability.extra.hxchips, macosx_hxchips)\n\t\tif context.cardarea == G.hand and context.other_card and not context.other_card.debuff and context.other_card:get_id() == 10\n\t\tand not context.repetition and not context.repetition_only and not context.end_of_round then\n\t\t\treturn { xchips = card.ability.extra.hxchips > 1 and card.ability.extra.hxchips or 1 }\n\t\tend\n\tend,\n\tpixel_size = { w = 71, h = 84 }",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "win95",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'win95',\n\tconfig = { extra = { hands = 1, discards = 1, money = 4, Xmoney = 2, slots = 3 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.hands, card.ability.extra.discards, card.ability.extra.money, card.ability.extra.Xmoney, card.ability.extra.slots } }\n\tend,\n\tunlocked = true,\n\tdiscovered = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 0, y = 0 },\n\tcost = 7,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif (context.setting_blind or context.forcetrigger) and not (context.blueprint_card or card).getting_sliced then\n\t\t\tease_hands_played(card.ability.extra.hands)\n\t\t\tease_discard(card.ability.extra.discards)\n\t\t\treturn { message = localize('toga_32bits') }\n\t\tend\n\tend,\n\tcalc_dollar_bonus = function(self, card)\n\t\tif card.ability.extra.money > 0 then\n\t\t\tif #G.jokers.cards <= card.ability.extra.slots then\n\t\t\t\treturn card.ability.extra.money * card.ability.extra.Xmoney\n\t\t\telse\n\t\t\t\treturn card.ability.extra.money\n\t\t\tend\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_win95start\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_win95tada\")\n\t\t\telse play_sound(\"toga_chordold\") end\n\t\tend\n\tend",
      "config": {
        "extra": {
          "hands": 1,
          "discards": 1,
          "money": 4,
          "Xmoney": 2,
          "slots": 3
        }
      },
      "ability": {
        "extra": {
          "hands": 1,
          "discards": 1,
          "money": 4,
          "Xmoney": 2,
          "slots": 3
        }
      },
      "vars": [
        1,
        1,
        4,
        2,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "win98",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'win98',\n\tconfig = { extra = { consslotbonus = 0.1, totalconsslotbonus = 0, percentage = 0.15 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tcard.ability.extra.totalconsslotbonus = togabalatro.getconscount()*card.ability.extra.consslotbonus or 0\n\t\treturn { vars = { card.ability.extra.consslotbonus*100, card.ability.extra.totalconsslotbonus*100, card.ability.extra.percentage*100, toga_gettotaljokervalue()*card.ability.extra.percentage } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 1, y = 0 },\n\tcost = 5,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and context.cardarea == G.play then\n\t\t\tlocal sellvalues = toga_gettotaljokervalue()*card.ability.extra.percentage\n\t\t\tlocal slotbonus = sellvalues*togabalatro.getconscount()*card.ability.extra.consslotbonus or 0\n\t\t\treturn {\n\t\t\t\tmult = sellvalues + slotbonus\n\t\t\t}\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_win98start\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_win98tada\")\n\t\t\telse play_sound(\"toga_chord\") end\n\t\tend\n\tend",
      "config": {
        "extra": {
          "consslotbonus": 0.1,
          "totalconsslotbonus": 0,
          "percentage": 0.15
        }
      },
      "ability": {
        "extra": {
          "consslotbonus": 0.1,
          "totalconsslotbonus": 0,
          "percentage": 0.15
        }
      },
      "vars": [
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "winmillenium",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'winmillenium',\n\tconfig = { extra = { basechips = 25, chipbonus = 25, totalbonus = 25 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.basechips, card.ability.extra.chipbonus, card.ability.extra.totalbonus } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 2, y = 0 },\n\tcost = 6,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.totalbonus = card.ability.extra.basechips + card.ability.extra.chipbonus*toga_vouchcount()\n\t\t\n\t\tif context.other_joker then\n\t\t\treturn { chips = card.ability.extra.totalbonus }\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winme2000start\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winme2000shutdown\")\n\t\t\telse play_sound(\"toga_chord\") end\n\t\tend\n\tend,\n\tupdate = function(self, card, context)\n\t\tcard.ability.extra.totalbonus = card.ability.extra.basechips + card.ability.extra.chipbonus*toga_vouchcount()\n\tend",
      "config": {
        "extra": {
          "basechips": 25,
          "chipbonus": 25,
          "totalbonus": 25
        }
      },
      "ability": {
        "extra": {
          "basechips": 25,
          "chipbonus": 25,
          "totalbonus": 25
        }
      },
      "vars": [
        25,
        25,
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "winnt4",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'winnt4',\n\tconfig = { extra = { repetitions = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { math.floor(card.ability.extra.repetitions) } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 0, y = 1 },\n\tcost = 10,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.cardarea == G.play and context.repetition and not context.repetition_only then\n\t\t\tif not context.other_card:is_face() then\n\t\t\t\t-- This is basically the inverse of Sock and Buskin...\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize('k_again_ex'),\n\t\t\t\t\trepetitions = card.ability.extra.repetitions,\n\t\t\t\t\tcard = context.blueprint_card or card\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winnt4start\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winnt4shutdown\")\n\t\t\telse play_sound(\"toga_chordold\") end\n\t\tend\n\tend",
      "config": {
        "extra": {
          "repetitions": 1
        }
      },
      "ability": {
        "extra": {
          "repetitions": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "win2000",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'win2000',\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 1, y = 1 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\teternal_compat = false,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif (context.end_of_round or context.forcetrigger) and not (context.individual or context.repetition) then\n\t\t\treturn { func = function()\n\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\tfunc = (function()\n\t\t\t\t\t\tlocal gettag = get_next_tag_key()\n\t\t\t\t\t\tif gettag == 'tag_orbital' then gettag = 'tag_negative' end\n\t\t\t\t\t\tadd_tag(Tag(gettag))\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\tplay_sound('generic1', 0.9 + math.random()*0.1, 0.8)\n\t\t\t\t\t\tplay_sound('holo1', 1.2 + math.random()*0.1, 0.4)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend)\n\t\t\t\t}))\n\t\t\tend }\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winme2000start\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winme2000shutdown\")\n\t\t\telse play_sound(\"toga_chord\") end\n\t\tend\n\tend",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "winxp",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'winxp',\n\tconfig = { extra = { repetitions = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { math.floor(card.ability.extra.repetitions) } }\n\tend,\n\tunlocked = true,\n\trarity = 4,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 2, y = 1 },\n\tcost = 20,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.extra.repetitions < 1 then card.ability.extra.repetitions = 1 end -- always at least once.\n\t\t\n\t\tlocal othcrd = context.other_card\n\t\tif (context.retrigger_joker_check and not context.retrigger_joker and othcrd and othcrd ~= card and othcrd.config and othcrd.config.center and othcrd.config.center.key and othcrd.config.center.key ~= 'j_toga_winxp')\n\t\tor ((context.cardarea == G.play or context.cardarea == G.hand) and context.repetition and not context.repetition_only) then\n\t\t\treturn {\n\t\t\t\tmessage = localize('k_again_ex'),\n\t\t\t\trepetitions = card.ability.extra.repetitions,\n\t\t\t\tcard = context.blueprint_card or card,\n\t\t\t}\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winxplogon\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winxplogoff\")\n\t\t\telse play_sound(\"toga_winxpcritstop\") end\n\t\tend\n\tend",
      "config": {
        "extra": {
          "repetitions": 1
        }
      },
      "ability": {
        "extra": {
          "repetitions": 1
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "winvista",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'winvista',\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 0, y = 2 },\n\tcost = 10,\n\tblueprint_compat = true,\n\tdemicolon_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif (context.destroy_card and context.cardarea == G.play and context.scoring_hand and #context.scoring_hand == 1 and #context.full_hand == 1 and context.destroy_card:get_id() == 6) or context.forcetrigger then\n\t\t\treturn {\n\t\t\t\tremove = true,\n\t\t\t\tfunc = function()\n\t\t\t\t\tif #G.jokers.cards > 1 then\n\t\t\t\t\t\tlocal iter, iterlimit, seljoker = 0, 10*#G.jokers.cards, nil\n\t\t\t\t\t\trepeat\n\t\t\t\t\t\t\titer = iter + 1\n\t\t\t\t\t\t\tseljoker = pseudorandom_element(G.jokers.cards, pseudoseed('notverywow'))\n\t\t\t\t\t\t\tif seljoker and seljoker.edition and not seljoker.edition.negative then break end\n\t\t\t\t\t\tuntil seljoker and seljoker.edition and not seljoker.edition.negative or iter >= iterlimit\n\t\t\t\t\t\tif seljoker and seljoker.edition and not seljoker.edition.negative then\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({func = function()\n\t\t\t\t\t\t\t\tif seljoker and seljoker.edition and not seljoker.edition.negative then\n\t\t\t\t\t\t\t\t\tlocal curcard = context.blueprint_card or card\n\t\t\t\t\t\t\t\t\tcurcard:juice_up()\n\t\t\t\t\t\t\t\t\tseljoker:set_edition('e_negative')\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\treturn true end }))\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t}\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winvista78logon\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winvista78logoff\")\n\t\t\telse play_sound(\"toga_winvista7critstop\") end\n\t\tend\n\tend",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "win7",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'win7',\n\tconfig = { extra = { x_mult = 1.2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.x_mult } }\n\tend,\n\tunlocked = true,\n\trarity = 3,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 1, y = 2 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.cardarea == G.hand and context.other_card and not context.end_of_round and not context.repetition and not context.repetition_only and not context.other_card.debuff then\n\t\t\tlocal houseofcommons = {}\n\t\t\tif G.jokers and #G.jokers.cards > 1 then\n\t\t\t\tfor i = 1, #G.jokers.cards do\n\t\t\t\t\tif G.jokers.cards[i].config.center.rarity == 1 then houseofcommons[#houseofcommons+1] = G.jokers.cards[i] end\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #houseofcommons > 0 then\n\t\t\t\tlocal result = { x_mult = card.ability.extra.x_mult, card = houseofcommons[1] }\n\t\t\t\tif #houseofcommons >= 2 then\n\t\t\t\t\t-- nh6574 was here.\n\t\t\t\t\tlocal return_table = result\n\t\t\t\t\tfor i = 2, #houseofcommons do\n\t\t\t\t\t\treturn_table.extra = { x_mult = card.ability.extra.x_mult, card = houseofcommons[i] }\n\t\t\t\t\t\treturn_table = return_table.extra\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\treturn result\n\t\t\tend\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winvista78logon\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winvista78logoff\")\n\t\t\telse play_sound(\"toga_winvista7critstop\") end\n\t\tend\n\tend",
      "config": {
        "extra": {
          "x_mult": 1.2
        }
      },
      "ability": {
        "extra": {
          "x_mult": 1.2
        }
      },
      "vars": [
        1.2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "win8",
      "atlas": "TOGAJokersWindows",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'win8',\n\tconfig = { extra = { xmult = 1.8 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { vars = { card.ability.extra.xmult } }\n\tend,\n\tunlocked = true,\n\trarity = 2,\n\tatlas = 'TOGAJokersWindows',\n\tpos = { x = 2, y = 2 },\n\tcost = 8,\n\tblueprint_compat = true,\n\tcalculate = function(self, card, context)\n\t\tif context.individual and (context.cardarea == G.deck or context.cardarea == G.discard) and context.other_card:get_id() == 8\n\t\tand not context.other_card.debuff and not context.end_of_round then\n\t\t\treturn { xmult = card.ability.extra.xmult }\n\t\tend\n\tend,\n\tadd_to_deck = function(self, card, from_debuff)\n\t\tif not from_debuff and togabalatro.config.SFXWhenAdding and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tplay_sound(\"toga_winvista78logon\")\n\t\tend\n\tend,\n\tremove_from_deck = function(self, card, from_debuff)\n\t\tif togabalatro.config.SFXWhenRemoving and G.STAGE == G.STAGES.RUN and not G.screenwipe then\n\t\t\tif not from_debuff then play_sound(\"toga_winvista78logoff\")\n\t\t\telse play_sound(\"toga_win8error\") end\n\t\tend\n\tend,\n\tpixel_size = { w = 70, h = 84 }",
      "config": {
        "extra": {
          "xmult": 1.8
        }
      },
      "ability": {
        "extra": {
          "xmult": 1.8
        }
      },
      "vars": [
        1.8
      ],
      "infoQueue": []
    },
    {
      "type": "Seal",
      "key": "sealseal",
      "atlas": "TOGASeals",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'sealseal',\n\tbadge_colour = HEX(\"61666D\"),\n\tatlas = \"TOGASeals\",\n\tpos = { x = 0, y = 0 },\n\tconfig = { odds = 25 },\n\tloc_vars = function(self, info_queue, card)\n\t\tif G and G.GAME and G.GAME.used_vouchers then\n\t\t\treturn { key = G.GAME.used_vouchers['v_toga_caniofferyouanegg'] == true and self.key..'_alt2' or G.GAME.used_vouchers['v_toga_sealegg'] == true and self.key..'_alt1'\n\t\t\t\tor self.key, vars = G.GAME.used_vouchers['v_toga_sealegg'] == true and { SMODS.get_probability_vars(card or self, 1, (card.ability or self.config).odds) } }\n\t\tend\n\tend,\n\tsound = { sound = \"gold_seal\", per = 1.2, vol = 0.4 },\n\tcalculate = function(self, card, context)\n\t\tif context.main_scoring and context.cardarea == G.play and card and card.ability.seal then\n\t\t\tlocal negativeroll = SMODS.pseudorandom_probability(context.other_card or card or self, \"sealseal\", 1, card.ability.seal.odds)\n\t\t\treturn {\n\t\t\t\tfunc = function()\n\t\t\t\t\tlocal createnegative = false\n\t\t\t\t\tif G.GAME.used_vouchers['v_toga_caniofferyouanegg'] == true or (negativeroll and G.GAME.used_vouchers['v_toga_sealegg'] == true) then createnegative = true end\n\t\t\t\t\tif #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit or createnegative then\n\t\t\t\t\t\tG.GAME.joker_buffer = G.GAME.joker_buffer + 1\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\tlocal egg = SMODS.create_card({ set = 'Joker', key = 'j_egg', no_edition = createnegative and true or false }) -- egg.\n\t\t\t\t\t\t\t\tif createnegative then egg:set_edition('e_negative', true, true) end\n\t\t\t\t\t\t\t\tegg:add_to_deck()\n\t\t\t\t\t\t\t\tG.jokers:emplace(egg)\n\t\t\t\t\t\t\t\tG.GAME.joker_buffer = math.max(G.GAME.joker_buffer - 1, 0)\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t}))\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t}\n\t\tend\n\tend,",
      "config": {
        "odds": 25
      },
      "ability": {
        "odds": 25
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Seal",
      "key": "urlseal",
      "atlas": "TOGASeals",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'urlseal',\n\tbadge_colour = HEX(\"0000ff\"),\n\tatlas = \"TOGASeals\",\n\tpos = { x = 1, y = 0 },\n\tsound = { sound = \"gold_seal\", per = 1.2, vol = 0.4 }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togajokershop",
      "atlas": "TOGATags",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"togajokershop\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 0, y = 0 },\n\tconfig = { type = \"store_joker_create\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tif context.type == \"store_joker_create\" then\n\t\t\tlocal card = create_card(\"TOGAJKR\", context.area, nil, nil, nil, nil, nil, \"togajokertag\")\n\t\t\tcreate_shop_card_ui(card, \"Joker\", context.area)\n\t\t\tcard.states.visible = false\n\t\t\ttag:yep(\"+\", G.C.RED, function()\n\t\t\t\tcard:start_materialize()\n\t\t\t\tcard.ability.couponed = true\n\t\t\t\tcard:set_cost()\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn card\n\t\tend\n\tend,",
      "config": {
        "type": "store_joker_create"
      },
      "ability": {
        "type": "store_joker_create"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togajokerbooster",
      "atlas": "TOGATags",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"togajokerbooster\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 1, y = 0 },\n\tconfig = { type = \"new_blind_choice\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"new_blind_choice\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal key = 'p_toga_togazipboosterpack'\n\t\t\t\tlocal card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n\t\t\t\tG.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n\t\t\t\tcard.cost = 0\n\t\t\t\tcard.from_tag = true\n\t\t\t\tG.FUNCS.use_card({config = {ref_table = card}})\n\t\t\t\tcard:start_materialize()\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togajokerziparchive",
      "atlas": "TOGATags",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = \"togajokerziparchive\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 6, y = 0 },\n\tconfig = { type = \"new_blind_choice\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"new_blind_choice\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal key = 'p_toga_togaziparchivepack'\n\t\t\t\tlocal card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n\t\t\t\tG.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n\t\t\t\tcard.cost = 0\n\t\t\t\tcard.from_tag = true\n\t\t\t\tG.FUNCS.use_card({config = {ref_table = card}})\n\t\t\t\tcard:start_materialize()\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "thespbroll",
      "atlas": "TOGATags",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"thespbroll\",\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.c_toga_selfpropelledbomb\n\tend,\n\tatlas = \"TOGATags\",\n\tpos = { x = 2, y = 0 },\n\tconfig = { type = \"immediate\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"immediate\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal card = create_card('Spectral', G.consumeables, nil, nil, nil, nil, \"c_toga_selfpropelledbomb\", \"thespbrun\")\n\t\t\t\tcard:add_to_deck()\n\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "immediate"
      },
      "ability": {
        "type": "immediate"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "guaranteedice",
      "atlas": "TOGATags",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"guaranteedice\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 3, y = 0 },\n\tconfig = { type = \"store_joker_create\" },\n\tin_pool = function(self, args)\n\t\tif #SMODS.find_card('j_oops', true) > 0 then return false\n\t\telse return true end\n\tend,\n\tmin_ante = 3,\n\tapply = function(self, tag, context)\n\t\tif context.type == \"store_joker_create\" then\n\t\t\tlocal card = create_card(\"Joker\", context.area, nil, nil, nil, nil, \"j_oops\")\n\t\t\tcreate_shop_card_ui(card, \"Joker\", context.area)\n\t\t\tcard.states.visible = false\n\t\t\ttag:yep(\"+\", G.C.RED, function()\n\t\t\t\tcard:start_materialize()\n\t\t\t\tcard:set_cost()\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn card\n\t\tend\n\tend,",
      "config": {
        "type": "store_joker_create"
      },
      "ability": {
        "type": "store_joker_create"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "thenet",
      "atlas": "TOGATags",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = \"thenet\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 4, y = 0 },\n\tconfig = { type = \"immediate\", odds = 15 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn { key = Cryptid and self.key..\"_cryptid\" or self.key, vars = { SMODS.get_probability_vars(card or self, 1, card.ability.odds or self.config.odds) } }\n\tend,\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"immediate\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal card = create_card('Spectral', G.consumables, nil, nil, nil, nil, Cryptid and SMODS.pseudorandom_probability(self, 'toga_colorinverthole', 1, tag.ability.odds or self.config.odds) and \"c_cry_white_hole\" or \"c_black_hole\", \"internetexplorer\")\n\t\t\t\tcard:add_to_deck()\n\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend",
      "config": {
        "type": "immediate",
        "odds": 15
      },
      "ability": {
        "type": "immediate",
        "odds": 15
      },
      "vars": [
        1,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "controlexe",
      "atlas": "TOGATags",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = \"controlexe\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 5, y = 0 },\n\tconfig = { type = \"immediate\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"immediate\" then\n\t\t\tif #G.jokers.cards > 0 then\n\t\t\t\tlocal jokerlist, itercount, iterlimit = G.jokers.cards, 0, 64\n\t\t\t\tlocal seljoker = pseudorandom_element(jokerlist, pseudoseed('controlpanel'))\n\t\t\t\twhile seljoker.edition and itercount < iterlimit do\n\t\t\t\t\titercount = itercount + 1\n\t\t\t\t\tseljoker = pseudorandom_element(jokerlist, pseudoseed('controlpanel'))\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif not seljoker.edition then\n\t\t\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\t\t\tlocal seledition = poll_edition('98se', nil, false, true)\n\t\t\t\t\t\tseljoker:set_edition(seledition, true)\n\t\t\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend)\n\t\t\t\telse\n\t\t\t\t\ttag:nope()\n\t\t\t\tend\n\t\t\telse\n\t\t\t\ttag:nope()\n\t\t\tend\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "immediate"
      },
      "ability": {
        "type": "immediate"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "thelegend",
      "atlas": "TOGATags",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = \"thelegend\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 7, y = 0 },\n\tconfig = { type = \"store_joker_create\" },\n\tmin_ante = 2,\n\tapply = function(self, tag, context)\n\t\tif context.type == \"store_joker_create\" then\n\t\t\tlocal card = create_card(\"Joker\", context.area, true)\n\t\t\tcreate_shop_card_ui(card, \"Joker\", context.area)\n\t\t\tcard.states.visible = false\n\t\t\ttag:yep(\"+\", G.C.ORANGE, function()\n\t\t\t\tcard:start_materialize()\n\t\t\t\tcard:set_cost()\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn card\n\t\tend\n\tend,",
      "config": {
        "type": "store_joker_create"
      },
      "ability": {
        "type": "store_joker_create"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togarararchive",
      "atlas": "TOGATags",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = \"togarararchive\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 8, y = 0 },\n\tconfig = { type = \"new_blind_choice\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"new_blind_choice\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal key = 'p_toga_togararpack'\n\t\t\t\tlocal card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n\t\t\t\tG.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n\t\t\t\tcard.cost = 0\n\t\t\t\tcard.from_tag = true\n\t\t\t\tG.FUNCS.use_card({config = {ref_table = card}})\n\t\t\t\tcard:start_materialize()\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togacardcabarchive",
      "atlas": "TOGATags",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "key = \"togacardcabarchive\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 9, y = 0 },\n\tconfig = { type = \"new_blind_choice\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"new_blind_choice\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal key = 'p_toga_togacardcabpack'\n\t\t\t\tlocal card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n\t\t\t\tG.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n\t\t\t\tcard.cost = 0\n\t\t\t\tcard.from_tag = true\n\t\t\t\tG.FUNCS.use_card({config = {ref_table = card}})\n\t\t\t\tcard:start_materialize()\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "togaxcopydnaarchive",
      "atlas": "TOGATags",
      "pos": {
        "x": 10,
        "y": 0
      },
      "raw": "key = \"togaxcopydnaarchive\",\n\tatlas = \"TOGATags\",\n\tpos = { x = 10, y = 0 },\n\tconfig = { type = \"new_blind_choice\" },\n\tin_pool = function(self, args)\n\t\treturn true\n\tend,\n\tapply = function(self, tag, context)\n\t\tlocal lock = tag.ID\n\t\tif context.type == \"new_blind_choice\" then\n\t\t\tG.CONTROLLER.locks[lock] = true\n\t\t\ttag:yep('+', G.C.ORANGE,function() \n\t\t\t\tlocal key = 'p_toga_togaxcopydnapack'\n\t\t\t\tlocal card = Card(G.play.T.x + G.play.T.w/2 - G.CARD_W*1.27/2,\n\t\t\t\tG.play.T.y + G.play.T.h/2-G.CARD_H*1.27/2, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[key], {bypass_discovery_center = true, bypass_discovery_ui = true})\n\t\t\t\tcard.cost = 0\n\t\t\t\tcard.from_tag = true\n\t\t\t\tG.FUNCS.use_card({config = {ref_table = card}})\n\t\t\t\tcard:start_materialize()\n\t\t\t\tG.CONTROLLER.locks[lock] = nil\n\t\t\t\treturn true\n\t\t\tend)\n\t\t\ttag.triggered = true\n\t\t\treturn true\n\t\tend\n\tend,",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "fat32",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'fat32',\n\tpos = { x = 0, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 16,\n\trarity = 4,\n\tconfig = { rarity = 4, extra = { h_size_scale = 0.5 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.h_size_scale*100}}\n\tend,\n\trequires = {'v_paint_brush'},\n\tredeem = function(self, card)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Increased hand size by \"..math.ceil(G.hand.config.card_limit*(card and card.ability.extra or self.config.extra).h_size_scale)..\".\", \"TOGAPack\") end\n\t\tG.hand:change_size(math.ceil(G.hand.config.card_limit*(card and card.ability.extra or self.config.extra).h_size_scale))\n\tend,",
      "config": {
        "rarity": 4,
        "extra": {
          "h_size_scale": 0.5
        }
      },
      "ability": {
        "rarity": 4,
        "extra": {
          "h_size_scale": 0.5
        }
      },
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "diskdefrag",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'diskdefrag',\n\tpos = { x = 1, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 10,\n\trarity = 3,\n\tconfig = { rarity = 3, extra = { discards = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.discards}}\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.after then\n\t\t\tease_discard(card.ability.extra.discards)\n\t\tend\n\tend,\n\tredeem = function(self, card)\n\t\tG.GAME.round_resets.discards = G.GAME.round_resets.discards - (card and card.ability.extra or self.config.extra).discards\n\t\tease_discard(-(card and card.ability.extra or self.config.extra).discards)\n\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "discards": 1
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "discards": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "hardwarewizard",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'hardwarewizard',\n\tpos = { x = 2, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 15,\n\trarity = 3,\n\tconfig = { rarity = 3, extra = { probabilitymult = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.probabilitymult}}\n\tend,\n\tredeem = function(self, card)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Added X\"..(card and card.ability.extra or self.config.extra).probabilitymult..\" probability multiplier.\", \"TOGAPack\") end\n\t\t-- for k, v in pairs(G.GAME.probabilities) do\n\t\t\t-- G.GAME.probabilities[k] = v*(card and card.ability.extra or self.config.extra).probabilitymult\n\t\t-- end\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.mod_probability and not context.blueprint then\n\t\t\treturn { numerator = context.numerator * (card and card.ability.extra or self.config.extra).probabilitymult }\n\t\tend\n\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "probabilitymult": 2
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "probabilitymult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "hardwarewizardxp",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "key = 'hardwarewizardxp',\n\tpos = { x = 2, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 15,\n\trarity = 4,\n\tconfig = { rarity = 4, extra = { probabilitymult = 2 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.probabilitymult}}\n\tend,\n\trequires = {'v_toga_hardwarewizard'},\n\tredeem = function(self, card)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Added X\"..(card and card.ability.extra or self.config.extra).probabilitymult..\" probability multiplier.\", \"TOGAPack\") end\n\t\t-- for k, v in pairs(G.GAME.probabilities) do\n\t\t\t-- G.GAME.probabilities[k] = v*(card and card.ability.extra or self.config.extra).probabilitymult\n\t\t-- end\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.mod_probability and not context.blueprint then\n\t\t\treturn { numerator = context.numerator * (card and card.ability.extra or self.config.extra).probabilitymult }\n\t\tend\n\tend,",
      "config": {
        "rarity": 4,
        "extra": {
          "probabilitymult": 2
        }
      },
      "ability": {
        "rarity": 4,
        "extra": {
          "probabilitymult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "wormsninjarope",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'wormsninjarope',\n\tpos = { x = 0, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 10,\n\trarity = 3,\n\tconfig = { rarity = 3, extra = { moreselect = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {math.max(1, math.floor(card.ability.extra.moreselect))}}\n\tend,\n\tredeem = function(self, card)\n\t\ttogabalatro.handlimitchange(math.max(1, math.floor((card and card.ability.extra or self.config.extra).moreselect)))\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Increased card selection limit by \"..math.max(1, math.floor((card and card.ability.extra or self.config.extra).moreselect))..\".\", \"TOGAPack\") end\n\t\t--G.hand.config.highlighted_limit = G.hand.config.highlighted_limit + math.max(1, math.floor((card and card.ability.extra or self.config.extra).moreselect))\n\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "moreselect": 1
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "moreselect": 1
        }
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "wormsscalesofjustice",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'wormsscalesofjustice',\n\tpos = { x = 1, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 15,\n\trarity = 3,\n\tconfig = { rarity = 3 },\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = {key = \"toga_scales1\", set = 'Other'}\n\t\tinfo_queue[#info_queue + 1] = {key = \"toga_scales2\", set = 'Other'}\n\t\tinfo_queue[#info_queue + 1] = {key = \"toga_scales3\", set = 'Other'}\n\tend,\n\trequires = {'v_toga_ninjarope'},\n\tredeem = function(self, card)\n\t\t-- do the sound!\n\t\tplay_sound('toga_scalesofjustice')\n\t\t-- Joker slots, Consumable slots, hand size, card selection limit.\n\t\tlocal cardlimitavrg = math.floor(((G.jokers and G.jokers.config.card_limit or 5) + (G.hand and G.hand.config.card_limit or 8) + (G.hand and G.hand.config.highlighted_limit or 5) + (G.consumeables and G.consumeables.config.card_limit or 2))/4)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Resulted average is \"..cardlimitavrg..\".\", \"TOGAPack\") end\n\t\tG.jokers.config.card_limit = cardlimitavrg\n\t\tG.consumeables.config.card_limit = cardlimitavrg\n\t\tG.hand.config.card_limit = cardlimitavrg\n\t\ttogabalatro.handlimitchange(cardlimitavrg, true)\n\t\t--G.hand.config.highlighted_limit = cardlimitavrg\n\t\t-- poker hand levels.\n\t\tlocal totallevel = 0\n\t\tfor _, v in ipairs(G.handlist) do\n\t\t\ttotallevel = to_big(totallevel) + to_big(G.GAME.hands[v].level)\n\t\tend\n\t\tlocal averagelevel = math.ceil(to_big(totallevel) / #G.handlist)\n\t\tfor _, v in ipairs(G.handlist) do\n\t\t\tG.GAME.hands[v].level = math.max(to_big(0), to_big(averagelevel))\n\t\t\tG.GAME.hands[v].mult = math.max(to_big(G.GAME.hands[v].s_mult) + to_big(G.GAME.hands[v].l_mult)*(to_big(G.GAME.hands[v].level) - to_big(1)), to_big(1))\n\t\t\tG.GAME.hands[v].chips = math.max(to_big(G.GAME.hands[v].s_chips) + to_big(G.GAME.hands[v].l_chips)*(to_big(G.GAME.hands[v].level) - to_big(1)), to_big(0))\n\t\tend\n\t\t-- hands and discards\n\t\tlocal dishand = math.floor((G.GAME.round_resets.discards + G.GAME.round_resets.hands)/2)\n\t\t\n\t\tG.GAME.round_resets.hands = dishand\n\t\tlocal handdiff = math.floor(G.GAME.round_resets.hands-dishand)\n\t\tlocal hand_UI = G.HUD:get_UIE_by_ID('hand_UI_count')\n\t\tG.GAME.current_round.hands_left = dishand\n\t\thand_UI.config.object:update()\n\t\t\n\t\tG.GAME.round_resets.discards = dishand\n\t\tlocal disdiff = math.floor(G.GAME.round_resets.discards-dishand)\n\t\tlocal discard_UI = G.HUD:get_UIE_by_ID('discard_UI_count')\n\t\tG.GAME.current_round.discards_left = dishand\n\t\tdiscard_UI.config.object:update()\n\t\t\n\t\tG.HUD:recalculate()\n\tend,",
      "config": {
        "rarity": 3
      },
      "ability": {
        "rarity": 3
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "mspaint",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'mspaint',\n\t\tpos = { x = 3, y = 1 },\n\t\tatlas = 'TOGAConsumables',\n\t\tunlocked = true,\n\t\tcost = 20,\n\t\trarity = 3,\n\t\tconfig = { rarity = 3, extra = { echip = 1.05, jokerslot = -2 } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\treturn {vars = { card.ability.extra.echip, card.ability.extra.jokerslot }}\n\t\tend,\n\t\tredeem = function(self, card)\n\t\t\tlocal card = card and card.ability and card or self and self.ability and self\n\t\t\tG.jokers.config.card_limit = G.jokers.config.card_limit + (card and card.ability.extra or self.config.extra).jokerslot\n\t\tend,\n\t\trequires = {'v_paint_brush'},\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.cardarea == G.hand and context.other_card and not context.repetition and not context.repetition_only and not context.end_of_round and not context.other_card.debuff then\n\t\t\t\treturn {\n\t\t\t\t\tcard = context.other_card,\n\t\t\t\t\techips = card.ability.extra.echip,\n\t\t\t\t\techip_message = {message = localize{ type = \"variable\", key = \"toga_Echip\", vars = { card.ability.extra.echip } }, colour = G.C.DARK_EDITION, sound = \"talisman_echip\"}\n\t\t\t\t}\n\t\t\tend\n\t\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "echip": 1.05,
          "jokerslot": -2
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "echip": 1.05,
          "jokerslot": -2
        }
      },
      "vars": [
        1.05,
        -2
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "dataflush",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 4,
        "y": 1
      },
      "raw": "key = 'dataflush',\n\tpos = { x = 4, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 20,\n\trarity = 3,\n\tconfig = { rarity = 3, extra = { copies = 1 } },\n\tloc_vars = function(self, info_queue, card)\n\t\tlocal actualcopies = math.floor(card.ability.extra.copies)\n\t\treturn { key = actualcopies > 1 and self.key..'_multiple' or self.key, vars = { actualcopies > 1 and actualcopies or 1 } }\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif card.ability.extra.copies < 1 then card.ability.extra.copies = 1 end -- at least one.\n\t\t\n\t\tif context.pre_discard then\n\t\t\tlocal _, _, pokerhands = G.FUNCS.get_poker_hand_info(G.hand.highlighted)\n\t\t\tif next(pokerhands['Flush']) and G.consumeables.cards[1] then\n\t\t\t\treturn { func = function()\n\t\t\t\t\tfor i = 1, math.floor(card.ability.extra.copies) do\n\t\t\t\t\t\tlocal card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('dnsflush')), nil)\n\t\t\t\t\t\tcard:set_edition({negative = true}, true)\n\t\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\t\tend\n\t\t\t\tend }\n\t\t\tend\n\t\tend\n\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "copies": 1
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "copies": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "sealegg",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = 'sealegg',\n\tpos = { x = 3, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 10,\n\trarity = 3,\n\tconfig = { rarity = 3 },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = { SMODS.get_probability_vars(card or self, 1, G.P_SEALS.toga_sealseal.config.odds or 1337) }}\n\tend,",
      "config": {
        "rarity": 3
      },
      "ability": {
        "rarity": 3
      },
      "vars": [
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "caniofferyouanegg",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "key = 'caniofferyouanegg',\n\tpos = { x = 4, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tin_pool = function()\n\t\treturn togabalatro.config.JokeJokersActive -- Should only spawn if allowed to via config!\n\tend,\n\tcost = 20,\n\trarity = 4,\n\tconfig = { rarity = 4 },\n\trequires = {'v_toga_sealegg'},\n\tset_badges = function(self, card, badges)\n\t\tbadges[#badges+1] = create_badge(\"Joke (TOGA)\", G.C.SECONDARY_SET.Tarot, G.C.WHITE, 1 )\n\tend",
      "config": {
        "rarity": 4
      },
      "ability": {
        "rarity": 4
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "auroramatter",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 5,
        "y": 1
      },
      "raw": "key = 'auroramatter',\n\tpos = { x = 5, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 15,\n\trarity = 3,\n\tconfig = { rarity = 3, extra = { negchance = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.negchance}}\n\tend,\n\tredeem = function(self, card)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Negative edition chance multiplied by \"..math.ceil((card and card.ability.extra or self.config.extra).negchance)..\"X.\", \"TOGAPack\") end\n\t\tG.GAME.toga_negchance = (G.GAME.toga_negchance or 1)*(card and card.ability.extra or self.config.extra).negchance\n\tend,",
      "config": {
        "rarity": 3,
        "extra": {
          "negchance": 4
        }
      },
      "ability": {
        "rarity": 3,
        "extra": {
          "negchance": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "quantummatter",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 5,
        "y": 2
      },
      "raw": "key = 'quantummatter',\n\tpos = { x = 5, y = 2 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 20,\n\trarity = 4,\n\tconfig = { rarity = 4, extra = { negchance = 4 } },\n\tloc_vars = function(self, info_queue, card)\n\t\treturn {vars = {card.ability.extra.negchance}}\n\tend,\n\trequires = {'v_auroramatter'},\n\tredeem = function(self, card)\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Negative edition chance multiplied by \"..math.ceil((card and card.ability.extra or self.config.extra).negchance)..\"X.\", \"TOGAPack\") end\n\t\tG.GAME.toga_negchance = (G.GAME.toga_negchance or 1)*(card and card.ability.extra or self.config.extra).negchance\n\tend,",
      "config": {
        "rarity": 4,
        "extra": {
          "negchance": 4
        }
      },
      "ability": {
        "rarity": 4,
        "extra": {
          "negchance": 4
        }
      },
      "vars": [
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "spectralzipper",
      "atlas": "TOGAConsumables",
      "pos": {
        "x": 6,
        "y": 1
      },
      "raw": "key = 'spectralzipper',\n\tpos = { x = 6, y = 1 },\n\tatlas = 'TOGAConsumables',\n\tunlocked = true,\n\tcost = 20,\n\trarity = 4,\n\tconfig = { rarity = 4, extra = { odds = 500 } },\n\trequires = {'v_omen_globe'},\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.p_toga_togaziparchivepack\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.p_toga_togararpack\n\t\treturn {vars = { G.GAME.probabilities.normal or 1, card.ability.extra.odds } }\n\tend,\n\tredeem = function(self, card)\n\t\tG.GAME.spectralzipper_chance = (card and card.ability.extra or self.config.extra).odds or 500\n\t\tif togabalatro.config.DoMoreLogging then sendInfoMessage(\"Spectral Zipper chance set to \"..G.GAME.spectralzipper_chance..\".\", \"TOGAPack\") end\n\tend,",
      "config": {
        "rarity": 4,
        "extra": {
          "odds": 500
        }
      },
      "ability": {
        "rarity": 4,
        "extra": {
          "odds": 500
        }
      },
      "vars": [
        1,
        500
      ],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersMain",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersMain\", path = \"togajokers.png\", px = 72, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersOther",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersOther\", path = \"togajokersother.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersOtherDiffSize",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersOtherDiffSize\", path = \"togajokersothersize.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersWindows",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersWindows\", path = \"togajokerswinos.png\", px = 72, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersMac",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersMac\", path = \"togamacos.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersLinux",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersLinux\", path = \"togalinuxos.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokersUpdate",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokersUpdate\", path = \"togajokerupdate.png\", px = 72, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJokerRover",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJokerRover\", path = \"togarover.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGABoosterPack",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGABoosterPack\", path = \"togabooster.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAConsumables",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAConsumables\", path = \"togacons.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGADeckBack",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGADeckBack\", path = \"togadeck.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGATags",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGATags\", path = \"togatags.png\", px = 34, py = 34",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGASeals",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGASeals\", path = \"togaseal.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAEnhancements",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAEnhancements\", path = \"togaenh.png\", px = 71, py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGADialUpBlind",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGADialUpBlind\", path = \"togadialupblind.png\", px = 34, py = 34, atlas_table = 'ANIMATION_ATLAS', frames = 24",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAWWWBlind",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAWWWBlind\", path = \"togawwwblind.png\", px = 34, py = 34, atlas_table = 'ANIMATION_ATLAS', frames = 32",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAJoyStickBlind",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAJoyStickBlind\", path = \"togajoystickblind.png\", px = 34, py = 34, atlas_table = 'ANIMATION_ATLAS', frames = 1",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAMoreIcons",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAMoreIcons\", path = \"togamoricons.png\", px = 36, py = 36, disable_mipmap = true",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAFunny",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAFunny\", path = \"togazefunny.png\", px = 64, py = 64, atlas_table = 'ANIMATION_ATLAS', frames = 9",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "TOGAFunnyStatic",
      "atlas": null,
      "pos": null,
      "raw": "key = \"TOGAFunnyStatic\", path = \"togazefunny.png\", px = 64, py = 64",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "modicon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"modicon\", path = \"togaicon.png\", px = 32, py = 32",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95start",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95start\", path = \"win95start.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95tada",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95tada\", path = \"win95tada.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "bells",
      "atlas": null,
      "pos": null,
      "raw": "key = \"bells\", path = \"startup/bells.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "w96",
      "atlas": null,
      "pos": null,
      "raw": "key = \"w96\", path = \"startup/w96.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "w94",
      "atlas": null,
      "pos": null,
      "raw": "key = \"w94\", path = \"startup/w94.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "ntreskit",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ntreskit\", path = \"startup/ntreskit.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "chordold",
      "atlas": null,
      "pos": null,
      "raw": "key = \"chordold\", path = \"chordold.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "chord",
      "atlas": null,
      "pos": null,
      "raw": "key = \"chord\", path = \"chord.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win98start",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win98start\", path = \"win98start.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win98tada",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win98tada\", path = \"win98tada.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winme2000start",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winme2000start\", path = \"winmestart.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winme2000shutdown",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winme2000shutdown\", path = \"winmeshutdown.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winnt4start",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winnt4start\", path = \"winnt4start.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winnt4shutdown",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winnt4shutdown\", path = \"winnt4shutdown.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxplogon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxplogon\", path = \"Windows XP Logon Sound.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxplogoff",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxplogoff\", path = \"Windows XP Logoff Sound.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxpyesyoucan",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxpyesyoucan\", path = \"theexperience.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxpcritstop",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxpcritstop\", path = \"Windows XP Critical Stop.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxpballoon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxpballoon\", path = \"Windows XP Balloon.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winxpinfobar",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winxpinfobar\", path = \"Windows XP Information Bar.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winvista78logon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winvista78logon\", path = \"winvista78logon.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winvista78logoff",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winvista78logoff\", path = \"winvista78logoff.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "winvista7critstop",
      "atlas": null,
      "pos": null,
      "raw": "key = \"winvista7critstop\", path = \"winvista7critstop.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win8error",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win8error\", path = \"win8bg.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "ssb64crowdohh",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ssb64crowdohh\", path = \"Crowd Ohhh.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "duck",
      "atlas": null,
      "pos": null,
      "raw": "key = \"duck\", path = \"duck.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "kcud",
      "atlas": null,
      "pos": null,
      "raw": "key = \"kcud\", path = \"kcud.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "ie31",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ie31\", path = \"1.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "access97",
      "atlas": null,
      "pos": null,
      "raw": "key = \"access97\", path = \"Microsoft Access 97 Sound.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "recyclebinsfx",
      "atlas": null,
      "pos": null,
      "raw": "key = \"recyclebinsfx\", path = \"recycle.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "plus98emptybin",
      "atlas": null,
      "pos": null,
      "raw": "key = \"plus98emptybin\", path = \"WI_EMPTY.WAV\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "infraredbegin",
      "atlas": null,
      "pos": null,
      "raw": "key = \"infraredbegin\", path = \"ir_begin.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "infraredend",
      "atlas": null,
      "pos": null,
      "raw": "key = \"infraredend\", path = \"ir_end.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "o97doorbell",
      "atlas": null,
      "pos": null,
      "raw": "key = \"o97doorbell\", path = \"doorbell.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "o97glide",
      "atlas": null,
      "pos": null,
      "raw": "key = \"o97glide\", path = \"glide.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "mmeclap",
      "atlas": null,
      "pos": null,
      "raw": "key = \"mmeclap\", path = \"CLAP.WAV\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "officehammer",
      "atlas": null,
      "pos": null,
      "raw": "key = \"officehammer\", path = \"HAMMER.WAV\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "roverbark",
      "atlas": null,
      "pos": null,
      "raw": "key = \"roverbark\", path = \"roverbark.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "mscmenucmd",
      "atlas": null,
      "pos": null,
      "raw": "key = \"mscmenucmd\", path = \"Musica Menu Command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "spb",
      "atlas": null,
      "pos": null,
      "raw": "key = \"spb\", path = \"kc57.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "thundershield",
      "atlas": null,
      "pos": null,
      "raw": "key = \"thundershield\", path = \"DSZIO3.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "anviluse",
      "atlas": null,
      "pos": null,
      "raw": "key = \"anviluse\", path = \"mcanviluse.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "xporb",
      "atlas": null,
      "pos": null,
      "raw": "key = \"xporb\", path = \"mcxp.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "pinballstart",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pinballstart\", path = \"SOUND4.WAV\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "pinballloseball",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pinballloseball\", path = \"SOUND27.WAV\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "rosenclick",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rosenclick\", path = \"rosenclick.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "rosenhello",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rosenhello\", path = \"rosenhello.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "rosenbye",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rosenbye\", path = \"rosenthatsashame.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "rosenah",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rosenah\", path = \"rosenah.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "scalesofjustice",
      "atlas": null,
      "pos": null,
      "raw": "key = \"scalesofjustice\", path = \"ScalesOfJustice.wav\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "failsfx",
      "atlas": null,
      "pos": null,
      "raw": "key = \"failsfx\", path = \"comedicfail.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "goldenhit",
      "atlas": null,
      "pos": null,
      "raw": "key = \"goldenhit\", path = \"Saxxy_impact_gen_06.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "jaratehit",
      "atlas": null,
      "pos": null,
      "raw": "key = \"jaratehit\", path = \"jar_explode.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "soldierscream",
      "atlas": null,
      "pos": null,
      "raw": "key = \"soldierscream\", path = \"screm.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "w95restup",
      "atlas": null,
      "pos": null,
      "raw": "key = \"w95restup\", path = \"Windows 95 restore up.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "bass",
      "atlas": null,
      "pos": null,
      "raw": "key = \"bass\", path = \"bass.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd1\", path = \"plus95/Dangerous Creatures menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd2\", path = \"plus95/Inside your Computer menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd3\", path = \"plus95/Jungle menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd4",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd4\", path = \"plus95/Leonardo da Vinci menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd5",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd5\", path = \"plus95/Mystery menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd6",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd6\", path = \"plus95/Nature menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd7",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd7\", path = \"plus95/Science menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd8",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd8\", path = \"plus95/Space menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd9",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd9\", path = \"plus95/Sports menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd10",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd10\", path = \"plus95/The 60's USA menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd11",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd11\", path = \"plus95/The Golden Era menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "win95pluscmd12",
      "atlas": null,
      "pos": null,
      "raw": "key = \"win95pluscmd12\", path = \"plus95/Windows 95 menu command.ogg\"",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "music_balatro98",
      "atlas": null,
      "pos": null,
      "raw": "key = \"music_balatro98\",\n\tpath = \"balatro98.ogg\",\n\tselect_music_track = function()\n\t\treturn togabalatro.config.UseCustomMMMusic and G.STAGE == G.STAGES.MAIN_MENU\n\t\tor togabalatro.config.BoosterPackMusic and G.pack_cards and not G.screenwipe and G.STATE == G.STATES.SMODS_BOOSTER_OPENED and SMODS.OPENED_BOOSTER\n\t\tand (SMODS.OPENED_BOOSTER.config.center.key == 'p_toga_togazipboosterpack' or SMODS.OPENED_BOOSTER.config.center.key == 'p_toga_togaziparchivepack'\n\t\tor SMODS.OPENED_BOOSTER.config.center.key == 'p_toga_togararpack' or SMODS.OPENED_BOOSTER.config.center.key == 'p_toga_togacardcabpack'\n\t\tor SMODS.OPENED_BOOSTER.config.center.key == 'p_toga_togaxcopydnapack') and 2\n\tend,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ObjectType",
      "key": "TOGAJKR",
      "atlas": null,
      "pos": null,
      "raw": "object_type = \"ObjectType\",\n\tkey = \"TOGAJKR\",\n\tdefault = \"j_toga_win95\",\n\tcards = {\n\t\t[\"j_toga_y2kbug\"] = true, [\"j_toga_controlpanel\"] = true, [\"j_toga_mcanvil\"] = true,\n\t\t[\"j_toga_taskmgr\"] = true, [\"j_toga_solitairejoker\"] = true, [\"j_toga_win95\"] = true,\n\t\t[\"j_toga_win98\"] = true, [\"j_toga_winmillenium\"] = true, [\"j_toga_winnt4\"] = true,\n\t\t[\"j_toga_win2000\"] = true, [\"j_toga_winvista\"] = true, [\"j_toga_win7\"] = true,\n\t\t[\"j_toga_win8\"] = true, [\"j_toga_useraccounts\"] = true, [\"j_toga_virtualmemory\"] = true,\n\t\t[\"j_toga_computerlock\"] = true, [\"j_toga_recyclebin\"] = true, [\"j_toga_theinternet\"] = true,\n\t\t[\"j_toga_bonusducks\"] = true, [\"j_toga_spacecadetpinball\"] = true, [\"j_toga_jokersrb2kart\"] = true,\n\t\t[\"j_toga_heartyspades\"] = true, [\"j_toga_systemrestore\"] = true, [\"j_toga_mcanvil\"] = true, \n\t\t[\"j_toga_bonusducks\"] = true, [\"j_toga_speedsneakers\"] = true, [\"j_toga_internetexplorer\"] = true,\n\t\t[\"j_toga_megasxlr\"] = true, [\"j_toga_asterism\"] = true, [\"j_toga_theinternet\"] = true,\n\t\t[\"j_toga_binaryjkr\"] = true, [\"j_toga_hexadecimaljkr\"] = true, [\"j_toga_y2ksticker\"] = true,\n\t\t[\"j_toga_jimboplus\"] = true, [\"j_toga_tomscott\"] = true, [\"j_toga_goldenwrench\"] = true,\n\t\t[\"j_toga_skype\"] = true, [\"j_toga_msn\"] = true, [\"j_toga_mac_os_9\"] = true, \n\t\t[\"j_toga_mac_os_x\"] = true, [\"j_toga_linux_ubuntu\"] = true, [\"j_toga_linux_debian\"] = true,\n\t\t[\"j_toga_linux_slackware\"] = true, [\"j_toga_linux_redhat\"] = true,\n\t}",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    }
  ],
  "version": "no-tag"
}