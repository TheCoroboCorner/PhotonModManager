{
  "locMap": {
    "b_mxms_autographed": {
      "name": "Autographed Deck",
      "text": [
        "Starting deck consists of",
        "{C:attention}three{} Aces, Kings, Queens,",
        "and Jacks {C:attention}per suit{}"
      ],
      "type": "Back"
    },
    "b_mxms_destiny": {
      "name": "Destiny Deck",
      "text": [
        "Start run with ",
        "{C:horoscope,T:v_mxms_multitask}#1#{},",
        "Opens a {C:horoscope}#2#{}",
        "at the end of every ante"
      ],
      "type": "Back"
    },
    "b_mxms_grilled": {
      "name": "Grilled Deck",
      "text": [
        "{C:attention}Even{} rank cards give",
        "{C:mult}Mult{} instead of {C:chips}Chips"
      ],
      "type": "Back"
    },
    "b_mxms_nirvana": {
      "name": "Nirvana Deck",
      "text": [
        "Rerolls start at {C:money}$0{}",
        "Shop items cost {X:mult,C:white}X1.5{} as much"
      ],
      "type": "Back"
    },
    "b_mxms_nuclear": {
      "name": "Nuclear Deck",
      "text": [
        "{C:attention}-4{} Joker slots",
        "{C:mult}Mult{} is now an {C:attention}exponent{} of {C:chips}Chips{}",
        "Blind Sizes are multiplied",
        "to the {C:red}ante-th power{}",
        "{C:inactive}This deck will not count towards best hand scores",
        "{C:inactive}or score-based unlocks",
        "{s:0.8,C:inactive}Works best with Talisman installed"
      ],
      "type": "Back"
    },
    "b_mxms_professional": {
      "name": "Professional Deck",
      "text": [
        "Skipping blinds is {C:red}disabled",
        "{C:red}X1.25{} base Blind size"
      ],
      "type": "Back"
    },
    "b_mxms_sixth_finger": {
      "name": "Sixth Finger Deck",
      "text": [
        "Allows {C:attention}6 playing cards",
        "to be playe and discarded"
      ],
      "type": "Back"
    },
    "bl_mxms_bird": {
      "name": "The Bird",
      "text": [
        "Hands are -2",
        "levels weaker"
      ],
      "type": "Blind"
    },
    "bl_mxms_cheat": {
      "name": "The Cheat",
      "text": [
        "All playing cards with an enhancement,",
        "edition, or seal are debuffed"
      ],
      "type": "Blind"
    },
    "bl_mxms_envy": {
      "name": "The Envy",
      "text": [
        "{C:money}-$1{} for every",
        "Joker trigger"
      ],
      "type": "Blind"
    },
    "bl_mxms_flame": {
      "name": "The Flame",
      "text": [
        "All scored cards are",
        "destroyed after scoring"
      ],
      "type": "Blind"
    },
    "bl_mxms_grinder": {
      "name": "The Grinder",
      "text": [
        "Enhancements, Seals, and Editions of",
        "scored cards are removed after scoring"
      ],
      "type": "Blind"
    },
    "bl_mxms_hurdle": {
      "name": "The Hurdle",
      "text": [
        "The first scoring card in",
        "played hand is debuffed"
      ],
      "type": "Blind"
    },
    "bl_mxms_maze": {
      "name": "The Maze",
      "text": [
        "Cards held in hand are",
        "debuffed after scoring"
      ],
      "type": "Blind"
    },
    "bl_mxms_rot": {
      "name": "The Rot",
      "text": [
        "1/4 of cards in deck",
        "are debuffed at random"
      ],
      "type": "Blind"
    },
    "bl_mxms_rule": {
      "name": "The Rule",
      "text": [
        "All playing cards without an enhancement,",
        "edition, or seal are debuffed"
      ],
      "type": "Blind"
    },
    "bl_mxms_spring": {
      "name": "The Spring",
      "text": [
        "-1 hand size",
        "per hand played"
      ],
      "type": "Blind"
    },
    "m_mxms_footprint": {
      "name": "Footprint",
      "text": [
        "{C:green}0 in 5{} chance to",
        "upgrade played {C:attention}Poker Hand",
        "by {C:attention}+#1#{} level",
        "Chance increases by {C:green}1{} for",
        "each {C:attention}Footprint{} played",
        "{s:0.8,C:inactive}Only one Footprint can trigger per hand"
      ],
      "type": "Enhanced"
    },
    "c_mxms_aquarius": {
      "name": "Aquarius",
      "text": [
        "Use {C:attention}#1#{} {C:planet}Planet{} cards",
        "within the ante",
        "to receive a {C:spectral}Black Hole{}",
        "{C:inactive}Currently: #2#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_aries": {
      "name": "Aries",
      "text": [
        "{C:attention}Trigger{} the Boss Blind",
        "to receive a {C:attention}Ram Tag"
      ],
      "type": "Horoscope"
    },
    "c_mxms_cancer": {
      "name": "Cancer",
      "text": [
        "Defeat the next blind with",
        "{C:blue}0{} {C:attention}remaining hands{} to",
        "receive a {C:attention}Crab Tag{}"
      ],
      "type": "Horoscope"
    },
    "c_mxms_capricorn": {
      "name": "Capricorn",
      "text": [
        "Destroy {C:attention}#1#{} cards within",
        "the ante to",
        "receive an {C:spectral}Immolate{}",
        "{C:inactive}Currently: #2#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_gemini": {
      "name": "Gemini",
      "text": [
        "For the next {C:blue}#1#{} hands,",
        "play {C:red}no repeat hand types{} to",
        "receive {C:attention}+#2#{} levels for",
        "each played hand type",
        "{C:inactive}Currently: #3#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_leo": {
      "name": "Leo",
      "text": [
        "Defeat the next blind in",
        "{C:blue}1{} hand to receive",
        "a {C:attention}Lion Tag{}"
      ],
      "type": "Horoscope"
    },
    "c_mxms_libra": {
      "name": "Libra",
      "text": [
        "Spend at least {C:money}$#1#{} during the",
        "next shop to receive",
        "a {C:attention}Scale Tag",
        "{C:inactive}Currently: #2#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_pisces": {
      "name": "Pisces",
      "text": [
        "Use {C:attention}#1#{} {C:tarot}Tarot{} cards within",
        "the ante to receive",
        "a random {C:spectral}Spectral{} Card",
        "{C:inactive}Currently: #2#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_sagittarius": {
      "name": "Sagittarius",
      "text": [
        "Do not use any",
        "{C:red}discards{} next blind to",
        "make the next shop's,",
        "rerolls start at {C:money}$0{}"
      ],
      "type": "Horoscope"
    },
    "c_mxms_scorpio": {
      "name": "Scorpio",
      "text": [
        "Do not play your",
        "{C:attention}most played hand{} for",
        "the next {C:blue}#1#{} hands to",
        "receive {C:attention}+#2#{} levels for",
        "your {C:attention}most played hand{}",
        "{C:inactive}Currently: #3#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_taurus": {
      "name": "Taurus",
      "text": [
        "Play the same {C:attention}hand type{}",
        "#1# times in a row to receive",
        "{C:attention}+#2#{} levels for that hand type",
        "{C:inactive}Currently: #3#/#1#"
      ],
      "type": "Horoscope"
    },
    "c_mxms_virgo": {
      "name": "Virgo",
      "text": [
        "Defeat the next blind with a score",
        "within {C:attention}25%{} of requirement to",
        "receive a {C:attention}Maiden Tag",
        "{C:inactive}Requirement: <= #1# Chips"
      ],
      "type": "Horoscope"
    },
    "j_egg": {
      "name": "Egg",
      "text": [
        "Gains {C:money}$#1#{} of",
        "{C:attention}sell value{} at",
        "end of round",
        "{s:0.8,C:inactive}Just maybe don't leave it",
        "{s:0.8,C:inactive} in the microwave for too long..."
      ],
      "type": "Joker"
    },
    "j_trading": {
      "name": "Trading Card",
      "text": [
        "If {C:attention}first discard{} of round",
        "has only {C:attention}#2#{} card(s), destroy",
        "it and earn {C:money}$#1#"
      ],
      "type": "Joker"
    },
    "j_sixth_sense": {
      "name": "Sixth Sense",
      "text": [
        "If {C:attention}first hand{} of round is",
        "at most #1# {C:attention}Six(es){}, destroy the card(s)",
        "and create a {C:spectral}Spectral{} card",
        "{C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_mxms_4d": {
      "name": "4D Joker",
      "text": [
        "{X:mult,C:white}X#1#{} Mult,",
        "decreases by {X:mult,C:white}X#2#{}",
        "{C:attention}every second"
      ],
      "type": "Joker"
    },
    "j_mxms_abyss_angel": {
      "name": "Abyss Angel",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult for every",
        "{C:chips}#2#{} Chips scored",
        "from playing cards",
        "{C:inactive}(Currently: {C:chips}#3#{C:inactive}/#2# Chips,",
        "{X:mult,C:white}X#4#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_abyss": {
      "name": "Abyss",
      "text": [
        "When blind is selected, {C:green}50/50{}",
        "{C:green}chance{} of making a {C:green}random{} held",
        "non-negative Joker {C:dark_edition}Negative{} or",
        "{C:red}destroying{} a {C;green}random",
        "held non-negative Joker",
        "{s:0.8,C:inactive}Can override other editions{}"
      ],
      "type": "Joker"
    },
    "j_mxms_bankrupt": {
      "name": "Bankrupt",
      "text": [
        "Gains {C:mult}+#1#{} Mult",
        "every time {C:tarot}Wheel",
        "{C:tarot}of Fortune{} fails",
        "{C:inactive}(Currently: {C:mult}+#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_bear": {
      "name": "Bear",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult",
        "for every {C:money}$1",
        "you are in debt",
        "{C:inactive}(Currently: {X:mult,C:white}X#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_bell_curve": {
      "name": "Bell Curve",
      "text": [
        "Approximately {X:mult,C:white}X#1#{} Mult,",
        "Changes {C:attention}sigmoidially",
        "according to deck size's",
        "deviation from {C:attention}52{}"
      ],
      "type": "Joker"
    },
    "j_mxms_blackjack": {
      "name": "Blackjack",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult if scored cards",
        "ranks add up to less than {C:attention}21",
        "Gains {X:mult,C:white}X#2#{} Mult if scored cards",
        "ranks add up to exactly {C:attention}21",
        "{C:red}Resets{} if scored cards ranks",
        "add up to more than {C:attention}21",
        "{C:inactive}(Currently: {X:mult,C:white}X#3#{C:inactive} Mult)",
        "{s:0.8,C:inactive}Aces always count as 11"
      ],
      "type": "Joker"
    },
    "j_mxms_boar_bank": {
      "name": "Boar Bank",
      "text": [
        "{C:money}Reward money{} is {C:red}halved",
        "Add the other half to",
        "this Joker's {C:money}sell value"
      ],
      "type": "Joker"
    },
    "j_mxms_bones_jr": {
      "name": "Bones Jr.",
      "text": [
        "If played hand scores less than",
        "blind requirement divided by {C:blue}#1#{},",
        "gives {C:blue}+#2#{} hand for the {C:attention}current",
        "{C:attention}round{} and {C:red}self destructs"
      ],
      "type": "Joker"
    },
    "j_mxms_bootleg": {
      "name": "Bootleg",
      "text": [
        "Copies the effect of the",
        "{C:attention}most recently purchased Joker",
        "Current effect: {C:red}#1#{}"
      ],
      "type": "Joker"
    },
    "j_mxms_brainwashed": {
      "name": "Brainwashed",
      "text": [
        "If played hand contains a {C:attention}Flush{},",
        "{C:green}#1# in #2#{} chance to convert",
        "a {C:green}random {C:attention}card held in hand{} to",
        "flush's suit after scoring"
      ],
      "type": "Joker"
    },
    "j_mxms_breadsticks": {
      "name": "Endless Breadsticks",
      "text": [
        "Gains {C:chips}+#3#{} Chips every {C:attention}#1#{} cards",
        "{C:red}discarded{} this round",
        "{C:red}Discard{} requirement increases",
        "by {C:attention}1{} and resets",
        "{C:chips}Chips{} each round",
        "{C:inactive}(Currently: {C:chips}+#2# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_brown": {
      "name": "Brown Joker",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult per",
        "hand size below {C:attention}#2#",
        "{C:inactive}(Currently: {X:mult,C:white}X#3#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_bullseye": {
      "name": "Bullseye",
      "text": [
        "If blind's {C:chips}Chip {C:attention}requirement",
        "is met {C:attention}exactly{}, this joker",
        "gains {C:chips}+#1#{} Chips",
        "{s:0.8,C:inactive}Gain is equal to 100 x Round",
        "{C:inactive}(Currently: {C:chips}+#2# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_butterfly": {
      "name": "Butterfly",
      "text": [
        "Creates a {C:spectral}Spectral{} Card",
        "every {C:attention}#2#{} consumables used",
        "{C:inactive}(Currently: #1#/#2#)"
      ],
      "type": "Joker"
    },
    "j_mxms_caterpillar": {
      "name": "Caterpillar",
      "text": [
        "After using {C:attention}#2# {C:tarot}Tarot{} Cards,",
        "this Joker turns into a",
        "{C:attention}Chrysalis",
        "{C:inactive}(Currently: #1#/#2#)"
      ],
      "type": "Joker"
    },
    "j_mxms_celestial_deity": {
      "name": "Celestial Deity",
      "text": [
        "{C:planet}Planet{} cards give",
        "{C:attention}+#1#{} extra level"
      ],
      "type": "Joker"
    },
    "j_mxms_change": {
      "name": "Pocket Change",
      "text": [
        "{C:money}Reward Money{} is rounded",
        "up to the next multiple of {C:attention}5"
      ],
      "type": "Joker"
    },
    "j_mxms_cheat_day": {
      "name": "Cheat Day",
      "text": [
        "{C:horoscope}Horoscope{} cards do",
        "not get destroyed",
        "after failing"
      ],
      "type": "Joker"
    },
    "j_mxms_chef": {
      "name": "Chef",
      "text": [
        "Creates a {C:green}random",
        "{C:attention}Food{} Joker",
        "when blind",
        "is selected"
      ],
      "type": "Joker"
    },
    "j_mxms_chekhov": {
      "name": "Chekhov's Gun",
      "text": [
        "{X:mult,C:white}Xante{} Mult on antes",
        "with a {C:attention}final boss"
      ],
      "type": "Joker"
    },
    "j_mxms_chihuahua": {
      "name": "Chihuahua",
      "text": [
        "{C:attention}Retriggers{} cards with ranks that appear",
        "the {C:attention}least{} number of times in the deck the",
        "same number of times that rank appears",
        "{s:0.8,C:inactive}Does not activate if there is a tie",
        "{s:0.8,C:inactive}Limit of 10 retriggers"
      ],
      "type": "Joker"
    },
    "j_mxms_chrysalis": {
      "name": "Chrysalis",
      "text": [
        "After using {C:attention}#2# {C:planet}Planet{} Cards,",
        "this Joker turns into a",
        "{C:attention}Butterfly",
        "{C:inactive}(Currently: #1#/#2#)"
      ],
      "type": "Joker"
    },
    "j_mxms_cleaner": {
      "name": "The Cleaner",
      "text": [
        "Selling this Joker {C:attention}rerolls",
        "the edition of one",
        "{C:green}random{} held Joker",
        "{C:inactive,s:0.8}(Will not choose current edition)"
      ],
      "type": "Joker"
    },
    "j_mxms_clown_car": {
      "name": "Clown Car",
      "text": [
        "Gains {C:mult}+#2#{} Mult each time",
        "a Joker is {C:attention}added{} to hand",
        "{C:inactive}(Currently: {C:mult}+#1# {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_combo_breaker": {
      "name": "Combo Breaker",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult",
        "per retrigger",
        "{s:0.8,C:inactive}Starts at {s:0.8,X:mult,C:white}X1{s:0.8,C:inactive} Mult",
        "{s:0.8,C:inactive}Resets every hand"
      ],
      "type": "Joker"
    },
    "j_mxms_comedian": {
      "name": "Comedian",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult",
        "after every round",
        "{C:green}#3# in #4# chance{} this",
        "card is destroyed at",
        "end of round",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_conveyor_belt": {
      "name": "Conveyor Belt",
      "text": [
        "Gives {C:attention}15%{} of {C:chips}Chips{} and {C:mult}Mult{}",
        "from previous hand",
        "{C:inactive}(Currently: {C:chips}+#1#{C:inactive} Chips,",
        "{C:mult}+#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_coronation": {
      "name": "Coronation",
      "text": [
        "If {C:attention}Joker{} is in hand after",
        "{C:attention}#2# rounds{} without skipping,",
        "upgrade {C:attention}Joker{} to {C:attention}Crowned Joker{}",
        "{C:inactive}(Currently: #1#/#2#)"
      ],
      "type": "Joker"
    },
    "j_mxms_coupon": {
      "name": "Coupon",
      "text": [
        "{C:green}#1# in #2#{} chance for shop",
        "Jokers to be {C:attention}free"
      ],
      "type": "Joker"
    },
    "j_mxms_crowned": {
      "name": "Crowned Joker",
      "text": [
        "{X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_mxms_dark_room": {
      "name": "Dark Room",
      "text": [
        "After {C:attention}#2# rounds{}, sell this",
        "Joker to upgrade a {C:green}random",
        "owned {C:attention}voucher",
        "{C:inactive}(Currently: #1#/#2#)"
      ],
      "type": "Joker"
    },
    "j_mxms_detective": {
      "name": "Detective",
      "text": [
        "{C:blue}+#1#{} Hand Size",
        "Every first {C:attention}#1#{} cards drawn",
        "will be drawn {C:attention}face-down"
      ],
      "type": "Joker"
    },
    "j_mxms_dmiid": {
      "name": "Don't Mind if I Do",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult for every",
        "card scored {C:attention}with a seal{} at the",
        "cost of {C:red}removing{} the seal",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_employee": {
      "name": "Employee",
      "text": [
        "{C:money}$#1#{} at end of round",
        "for every held",
        "{C:horoscope}Horoscope{} card"
      ],
      "type": "Joker"
    },
    "j_mxms_faded": {
      "name": "Faded Joker",
      "text": [
        "{C:diamonds}Diamonds{} and {C:spades}Spades{}",
        "count as the same suit,",
        "{C:hearts}Hearts{} and {C:clubs}Clubs{}",
        "count as the same suit"
      ],
      "type": "Joker"
    },
    "j_mxms_first_aid_kit": {
      "name": "First Aid Kit",
      "text": [
        "Sell this card for",
        "{C:blue}+#1#{} hands and {C:red}+#2#{} discards",
        "for the {C:attention}current round"
      ],
      "type": "Joker"
    },
    "j_mxms_fog": {
      "name": "Fog",
      "text": [
        "{C:attention}Four of a Kinds",
        "contain {C:attention}Two Pairs",
        "Two Pairs with a {C:attention}1-rank",
        "{C:attention}difference{} count",
        "as Four of a Kinds",
        "{C:inactive}(ex. 6 6 5 5)"
      ],
      "type": "Joker"
    },
    "j_mxms_fools_gold": {
      "name": "Fool's Gold",
      "text": [
        "Earn {C:money}$#1#{} for every {C:attention}2",
        "{C:money}Gold{} Cards in your {C:attention}full deck",
        "at end of round",
        "{C:inactive}(Currently {C:money}$#2#{}{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_mxms_fortune_cookie": {
      "name": "Fortune Cookie",
      "text": [
        "{C:green}#1# out of #2#{} chance to",
        "receive a {C:green}random {C:tarot}Tarot{}",
        "card when playing a hand",
        "{s:0.8,C:inactive}(Must have room)",
        "{s:0.8,C:inactive}Chance reduces by #3#",
        "{s:0.8,C:inactive}for every played hand"
      ],
      "type": "Joker"
    },
    "j_mxms_four_course_meal": {
      "name": "Four Course Meal",
      "text": [
        "For the next {C:attention}4{} hands,",
        "give {C:chips}+#1#{} Chips, {C:mult}+#2#{} Mult,",
        "{X:mult,C:white}X#3#{} Mult, and {C:money}$#4#{}",
        "respectively"
      ],
      "type": "Joker"
    },
    "j_mxms_four_leaf_clover": {
      "name": "Four-Leaf Clover",
      "text": [
        "If scored hand has exactly",
        "{C:attention}4 cards, convert them",
        "all to {C:attention}Lucky"
      ],
      "type": "Joker"
    },
    "j_mxms_galifianakis": {
      "name": "Galifianakis",
      "text": [
        "The {C:attention}last scoring card",
        "in a played hand",
        "becomes {C:dark_edition}Negative{}"
      ],
      "type": "Joker"
    },
    "j_mxms_gambler": {
      "name": "Gambler",
      "text": [
        "Capped sources of",
        "money generation",
        "have their limits",
        "{C:attention}doubled{}"
      ],
      "type": "Joker"
    },
    "j_mxms_review": {
      "name": "Game Review",
      "text": [
        "Retrigger each played",
        "{C:attention}6{}, {C:attention}7{}, {C:attention}8{}, {C:attention}9{}, or {C:attention}10"
      ],
      "type": "Joker"
    },
    "j_mxms_galaxy_brain": {
      "name": "Galaxy Brain",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult for",
        "every consecutive {C:attention}played hand",
        "that is a {C:attention}higher tier{} than",
        "the last played hand",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)",
        "{C:inactive}(Last Hand: {C:red}#3#{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_mxms_gangster_love": {
      "name": "Gangster of Love",
      "text": [
        "If played hand contains a",
        "{C:attention}Flush{}, convert all scored",
        "cards into {C:hearts}Hearts"
      ],
      "type": "Joker"
    },
    "j_mxms_gelatin": {
      "name": "Gelatin",
      "text": [
        "Retriggers the next",
        "{C:attention}#1#{} scored {V:1}#2#{}",
        "{s:0.8,C:inactive}Suit changes each round"
      ],
      "type": "Joker"
    },
    "j_mxms_glass_cannon": {
      "name": "Glass Cannon",
      "text": [
        "All Joker {X:mult,C:white}XMult",
        "is {C:attention}retriggered",
        "{C:attention}Shatters{} if blind isn't",
        "beaten in 2 hands"
      ],
      "type": "Joker"
    },
    "j_mxms_go_fish": {
      "name": "Go Fish",
      "text": [
        "{C:mult}+2{} Mult for each {C:attention}#1#{}",
        "in full deck",
        "at start of round",
        "{s:0.8,C:inactive}Rank changes every round",
        "{C:inactive}(Currently: {C:mult}+#2# {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_god_hand": {
      "name": "God Hand",
      "text": [
        "Chooses a {C:green}random{} playing card",
        "in full deck when added to hand",
        "While a card with that rank and",
        "suit is {C:attention}held in hand, {X:mult,C:white}X#1#{} Mult",
        "Otherwise, {X:mult,C:white}X#2#{} Mult",
        "{C:inactive}Target:{} #3##4#{V:1}#5#{}"
      ],
      "type": "Joker"
    },
    "j_mxms_golden_rings": {
      "name": "Five Golden Rings",
      "text": [
        "A hand made entirely",
        "of {C:attention}enhanced cards{}",
        "counts as a {C:attention}Flush{}"
      ],
      "type": "Joker"
    },
    "j_mxms_gravity": {
      "name": "Gravity",
      "text": [
        "{C:attention}+#1#{} levels to {C:attention}all Poker hands",
        "{C:red}-1{} level every round"
      ],
      "type": "Joker"
    },
    "j_mxms_group_chat": {
      "name": "Group Chat",
      "text": [
        "Gains {C:chips}+#2#{} Chips",
        "whenever another",
        "Joker scales",
        "{C:inactive}(Currently: {C:chips}+#1# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_guillotine": {
      "name": "Guillotine",
      "text": [
        "Scored {C:attention}Face{} or {C:attention}Ace",
        "cards have their",
        "rank set to {C:attention}10{}"
      ],
      "type": "Joker"
    },
    "j_mxms_gutbuster": {
      "name": "Gutbuster",
      "text": [
        "Creates a new {C:attention}Joker{}",
        "at the beginning of every round",
        "{C:red}Destroy{} the created Joker at",
        "the end of the round",
        "{s:0.8,C:inactive}(Must have room)",
        "Current card: {C:red}#1#{}"
      ],
      "type": "Joker"
    },
    "j_mxms_hamill": {
      "name": "Hamill",
      "text": [
        "{C:attention}+#1#{} level for your",
        "{C:attention}most played hand",
        "every time it is played",
        "{C:inactive}(Currently: {C:red}#2#{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_mxms_hammer_and_chisel": {
      "name": "Hammer and Chisel",
      "text": [
        "Stone cards retain",
        "{C:attention}rank{} and {C:attention}suit{}"
      ],
      "type": "Joker"
    },
    "j_mxms_harmony": {
      "name": "Harmony",
      "text": [
        "{C:mult}+#1#{} Mult if played",
        "hand contains at least",
        "{C:attention}3{} different scoring ranks"
      ],
      "type": "Joker"
    },
    "j_mxms_hedonist": {
      "name": "Hedonist",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult",
        "if shop is {C:attention}cleared",
        "when {C:attention}exiting",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_high_dive": {
      "name": "High Dive",
      "text": [
        "If played hand is a {C:attention}High Card,",
        "{C:attention}score{} and {C:attention}retrigger{}",
        "every played card"
      ],
      "type": "Joker"
    },
    "j_mxms_hippie": {
      "name": "Hippie",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult",
        "after a {C:horoscope}Horoscope",
        "card is fulfilled",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_honorable": {
      "name": "Honorable Joker",
      "text": [
        "{C:mult}+#1#{} Mult for every",
        "Joker created with {C:tarot}Judgement",
        "{C:red}Destroys{} the created Joker",
        "{C:inactive}(Currently: {C:mult}+#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_hopscotch": {
      "name": "Hopscotch",
      "text": [
        "When selecting blind,",
        "{C:green}#1# in #2#{} chance to",
        "receive associated {C:attention}skip tag{}"
      ],
      "type": "Joker"
    },
    "j_mxms_hugo": {
      "name": "Hugo",
      "text": [
        "Blind sizes do not exceed",
        "{C:attention}Small Blind",
        "{C:green}#1# in #2#{} chance to",
        "{C:red}skip blinds{} when selected"
      ],
      "type": "Joker"
    },
    "j_mxms_hypeman": {
      "name": "Hype Man",
      "text": [
        "Gives {C:money}$#1#{} every",
        "time a card is",
        "{C:attention}enhanced{}"
      ],
      "type": "Joker"
    },
    "j_mxms_icosahedron": {
      "name": "Icosahedron",
      "text": [
        "Every {C:attention}#1#th{} scored {C:diamonds}Diamond",
        "card permanently gains",
        "{X:mult,C:white}X#2#{} Mult when scored",
        "{C:inactive}(Currently: {C:diamonds}#3#{C:inactive}/#1#)"
      ],
      "type": "Joker"
    },
    "j_mxms_impractical_joker": {
      "name": "Impractical Joker",
      "text": [
        "If a {C:attention}#4#{} is played,",
        "{X:mult,C:white}X#2#{} Mult. If three hands in a",
        "row are not this hand",
        "type, {X:mult,C:white}X#3#{} Mult",
        "{s:0.8,C:inactive}Hand rotates every round",
        "{C:inactive}(Fail streak: #1#)"
      ],
      "type": "Joker"
    },
    "j_mxms_jackpot": {
      "name": "Jackpot",
      "text": [
        "Played hands containing",
        "at least {C:attention}three 7s{} have",
        "a {C:green}#1# in #2#{} chance",
        "to give {C:money}$#3#"
      ],
      "type": "Joker"
    },
    "j_mxms_jestcoin": {
      "name": "JestCoin",
      "text": [
        "Earn {C:money}$#1#{} at end of round",
        "Cash out scales by {X:mult,C:white}^2{} after each round",
        "{C:green}#2# in #3#{} chance of setting money",
        "to {C:money}$0{} and resetting cash out"
      ],
      "type": "Joker"
    },
    "j_mxms_jobber": {
      "name": "Jobber",
      "text": [
        "If hand is played with only",
        "{C:red}debuffed{} cards, {C:red}destroy{} this",
        "Joker and create a {C:attention}copy",
        "of {C:green}random {C:attention}held Joker",
        "{s:0.8,C:inactive}Removes negative from copy"
      ],
      "type": "Joker"
    },
    "j_mxms_joker_plus": {
      "name": "Joker+",
      "text": [
        "{C:mult}+#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_mxms_kings_rook": {
      "name": "King's Rook",
      "text": [
        "The first scoring {C:attention}King{} or {C:attention}5{}",
        "in a hand gives {X:mult,C:white}X#1#{} Mult",
        "Mult increases to {X:mult,C:white}X#2#{} if",
        "{C:attention}both{} ranks are scoring"
      ],
      "type": "Joker"
    },
    "j_mxms_lazy": {
      "name": "Lazy Joker",
      "text": [
        "{C:chips}+#1#{} Chips if played",
        "hand is",
        "a {C:attention}#2#"
      ],
      "type": "Joker"
    },
    "j_mxms_ledger": {
      "name": "Ledger",
      "text": [
        "At the end of every",
        "ante, {C:attention}one {C:green}random {C:attention}Joker",
        "becomes {C:dark_edition}Negative{}"
      ],
      "type": "Joker"
    },
    "j_mxms_leftovers": {
      "name": "Leftovers",
      "text": [
        "Creates a new copy of",
        "a {C:attention}Food{} Joker when",
        "depleted or destroyed",
        "{s:0.8,C:inactive}Self-destructs on copy"
      ],
      "type": "Joker"
    },
    "j_mxms_leto": {
      "name": "Leto",
      "text": [
        "At the start",
        "of each round,",
        "add a {C:green}randomly",
        "enhanced {C:attention}Queen{}",
        "to the deck"
      ],
      "type": "Joker"
    },
    "j_mxms_letter": {
      "name": "",
      "text": [
        "Creates a random {C:horoscope}Horoscope{}",
        "card after one {C:attention}succeeds{}"
      ],
      "type": "Joker"
    },
    "j_mxms_light_show": {
      "name": "Light Show",
      "text": [
        "Retriggers all {C:mult}Mult{}",
        "and {C:chips}Bonus{} cards"
      ],
      "type": "Joker"
    },
    "j_mxms_lint": {
      "name": "Pocket Lint",
      "text": [
        "When a {C:attention}consumable{} is sold,",
        "reduce price of current",
        "shop offerings by {C:money}$#1#"
      ],
      "type": "Joker"
    },
    "j_mxms_little_brother": {
      "name": "Little Brother",
      "text": [
        "Copies ability of {C:attention}Joker{} to the left",
        "up to {C:attention}#1#{} time(s) per hand",
        "Times copied {C:attention}raises by 1{} for",
        "every hand played in a row that",
        "copies {C:attention}the same Joker{}"
      ],
      "type": "Joker"
    },
    "j_mxms_loaded_gun": {
      "name": "Loaded Gun",
      "text": [
        "Scoring {C:attention}Steel Cards{}",
        "give {X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_mxms_loony": {
      "name": "Loony Joker",
      "text": [
        "{C:mult}+#1#{} Mult if played",
        "hand is",
        "a {C:attention}#2#"
      ],
      "type": "Joker"
    },
    "j_mxms_lucy": {
      "name": "Lucy in the Sky",
      "text": [
        "{C:green}0 in #2#{} chance to",
        "create the {C:planet}Planet{} card",
        "of played {C:attention}poker hand{}",
        "Scoring {C:diamonds}Diamond{} cards",
        "{C:attention}increase{} creation chance by {C:green}+#1#"
      ],
      "type": "Joker"
    },
    "j_mxms_man_in_the_mirror": {
      "name": "Man in the Mirror",
      "text": [
        "Selling this joker",
        "creates {C:dark_edition}Negative{} copies of",
        "all non-Negative held consumables"
      ],
      "type": "Joker"
    },
    "j_mxms_marco_polo": {
      "name": "Marco Polo",
      "text": [
        "{C:mult}+#1#{} Mult if card is at {C:attention}secret",
        "{C:attention}placement{} in Joker hand order",
        "{C:mult}Mult{} is {C:red}subtracted by #2#{} for",
        "each card out of place",
        "{s:0.8,C:inactive}Position changes every round{}"
      ],
      "type": "Joker"
    },
    "j_mxms_maurice": {
      "name": "Enter Maurice",
      "text": [
        "Played {C:attention}Wild{} Cards",
        "are added back to your {C:attention}Deck",
        "instead of being discarded"
      ],
      "type": "Joker"
    },
    "j_mxms_memory_game": {
      "name": "Memory Game",
      "text": [
        "If played hand is",
        "a {C:attention}Pair{}, convert",
        "the {C:attention}first scoring",
        "{C:attention}card{} into the {C:attention}second",
        "{C:attention}scoring card"
      ],
      "type": "Joker"
    },
    "j_mxms_messiah": {
      "name": "Messiah",
      "text": [
        "Gains {C:mult}+#1#{} Mult every",
        "time {C:tarot}The Sun{} is used",
        "{C:inactive}(Currently: {C:mult}+#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_microwave": {
      "name": "Microwave",
      "text": [
        "{C:red}Food{} Jokers are",
        "{C:attention}retriggered"
      ],
      "type": "Joker"
    },
    "j_mxms_minimalist": {
      "name": "Minimalist",
      "text": [
        "{C:chips}+#1#{} Chips, {C:chips}-#3#{} for",
        "every {C:attention}enhanced card{}",
        "in full deck",
        "{C:inactive}(Currently: {C:chips}+#2# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_monk": {
      "name": "Monk",
      "text": [
        "Gains {C:chips}+#2#{} Chips for every",
        "shop exited {C:attention}without{}",
        "making a purchase",
        "{C:inactive}(Currently: {C:chips}+#1# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_moon_landing": {
      "name": "Moon Landing",
      "text": [
        "The {C:attention}second highest level{} hand",
        "type gives {C:chips}Chips{} and {C:mult}Mult{} equal to",
        "the {C:attention}highest level{} hand type"
      ],
      "type": "Joker"
    },
    "j_mxms_nicholson": {
      "name": "Nicholson",
      "text": [
        "Retrigger any card",
        "with an {C:attention}Edition{}"
      ],
      "type": "Joker"
    },
    "j_mxms_nomai": {
      "name": "Nomai",
      "text": [
        "Generates a {C:horoscope}Horoscope{} Card",
        "when a {C:planet}Planet{} Card is used",
        "{s:0.8,C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_mxms_normal": {
      "name": "Normal Joker",
      "text": [
        "Played cards without an",
        "{C:attention}enchancement{}, {C:attention}edition{}, or {C:attention}seal",
        "give {C:mult}+#1#{} Mult and {C:chips}+#2#{} Chips"
      ],
      "type": "Joker"
    },
    "j_mxms_obelisk": {
      "name": "",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult for every",
        "{C:attention}#3#{} played and unscored cards",
        "{s:0.8,C:inactive}Mult resets at end of round{}",
        "{C:inactive}(Currently: {X:mult,C:white}X#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_occam": {
      "name": "Occam's Razor",
      "text": [
        "{X:mult,C:white}X#1#{} Mult",
        "Minus {X:mult,C:white}X1{} Mult for",
        "{C:attention}every{} played card",
        "{C:inactive}(Resets every hand)",
        "{C:inactive,s:0.8}Base Xmult depends on card play limit"
      ],
      "type": "Joker"
    },
    "j_mxms_old_man_jimbo": {
      "name": "Old Man Jimbo",
      "text": [
        "{X:mult,C:white}X1{} Mult plus {X:mult,C:white}X#1#{}",
        "for each remaining {C:blue}hand{}"
      ],
      "type": "Joker"
    },
    "j_mxms_perspective": {
      "name": "Perspective",
      "text": [
        "{C:attention}6's{} are treated as {C:attention}9's{}",
        "and vice-versa"
      ],
      "type": "Joker"
    },
    "j_mxms_pessimistic": {
      "name": "Pessimistic Joker",
      "text": [
        "After each {C:red}failed{} probability check,",
        "this Joker gains {C:mult}Mult{} equal to the",
        "odds of failing the check",
        "{s:0.8,C:inactive}+#2# for missed Lucky Card",
        "{C:inactive}(Currently: {C:mult}+#1# {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_phoenix": {
      "name": "Phoenix",
      "text": [
        "After scoring, all scored",
        "{C:attention}Face{} cards are {C:red}destroyed{}",
        "If any face cards are,",
        "{C:red}destroyed{}, give a {C:attention}Red Seal",
        "to all other scoring cards"
      ],
      "type": "Joker"
    },
    "j_mxms_piggy_bank": {
      "name": "Piggy Bank",
      "text": [
        "When earning {C:money}money,",
        "store {C:money}$1{} in this card",
        "and gain {C:chips}+#1#{} Chips",
        "When {C:money}money{} reaches {C:money}$0{},",
        "{C:red}destroy{} this card and",
        "return all stored {C:money}money{}",
        "{C:inactive}(Currently: {C:money}$#2# {C:inactive}Stored,",
        "{C:chips}+#3#{C:inactive} Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_pizza": {
      "name": "Pizza",
      "text": [
        "Adds a {C:green}random{} seal to",
        "every {C:attention}scoring{} card",
        "Gets eaten after {C:attention}#1#{} cards"
      ],
      "type": "Joker"
    },
    "j_mxms_pngoker": {
      "name": "PNGoker",
      "text": [
        "All cards in your",
        "{C:attention}first played hand{}",
        "become {C:attention}glass{}"
      ],
      "type": "Joker"
    },
    "j_mxms_poet": {
      "name": "Poet",
      "text": [
        "If hand type is played",
        "{C:attention}exclusively{} with number ranks",
        "matching the {C:attention}hand name,",
        "give {X:mult,C:white}Xmult{} equal to that rank",
        "{s:0.8,C:inactive}Two Pair must be played with a pair",
        "{s:0.8,C:inactive}of 2s and a pair of faces or aces"
      ],
      "type": "Joker"
    },
    "j_mxms_poindexter": {
      "name": "Poindexter",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult for every",
        "scoring {C:attention}Glass Card{} that",
        "remains intact",
        "{s:0.8,C:inactive}Resets on Glass Card break",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_power_creep": {
      "name": "Power Creep",
      "text": [
        "{C:attention}Scoring Editions{} are",
        "{C:attention}twice{} as potent",
        "Shop prices are {C:attention}doubled"
      ],
      "type": "Joker"
    },
    "j_mxms_prince": {
      "name": "The Prince",
      "text": [
        "{C:dark_edition}Polychrome{} {C:attention}face{} cards held",
        "in hand give {X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_mxms_prospector": {
      "name": "Prospector",
      "text": [
        "{C:attention}Gold{} Cards gain",
        "{C:money}$#1#{} to their",
        "effect when triggered",
        "in hand"
      ],
      "type": "Joker"
    },
    "j_mxms_ra": {
      "name": "",
      "text": [
        "If played hand is a {C:attention}High Card{},",
        "gains {X:mult,C:white}X#1#{} per scoring card and",
        "{C:red}destroys{} all scoring cards",
        "{C:inactive}(Currently: {X:mult,C:white}X#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_random_encounter": {
      "name": "Random Encounter",
      "text": [
        "{C:green}#1# in #2#{} chance of",
        "scored playing cards",
        "gaining permanent",
        "{C:mult}+#3#{} Bonus Mult"
      ],
      "type": "Joker"
    },
    "j_mxms_refrigerator": {
      "name": "Refrigerator",
      "text": [
        "{C:attention}Food{} Jokers degrade",
        "half as fast"
      ],
      "type": "Joker"
    },
    "j_mxms_rock_candy": {
      "name": "Rock Candy",
      "text": [
        "{C:attention}Stone{} Cards can",
        "be used as any suit"
      ],
      "type": "Joker"
    },
    "j_mxms_rock_slide": {
      "name": "Rock Slide",
      "text": [
        "If played hand is",
        "{C:attention}5 Stone Cards,{} add",
        "{C:attention}#1# random Stone Cards",
        "to the deck"
      ],
      "type": "Joker"
    },
    "j_mxms_romero": {
      "name": "Romero",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult",
        "every time a Joker",
        "is added to hand",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_salt_circle": {
      "name": "Salt Circle",
      "text": [
        "Gains {C:chips}+#2#{} Chips for",
        "for every {C:spectral}Spectral{} card used",
        "{C:inactive}(Currently: {C:chips}+#1# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_screaming": {
      "name": "Screaming Joker",
      "text": [
        "{C:attention}Face{} cards are",
        "counted as {C:attention}Aces{}"
      ],
      "type": "Joker"
    },
    "j_mxms_severed_floor": {
      "name": "Severed Floor",
      "text": [
        "Earn {C:money}$#1#{} at end of round",
        "Shop is {C:attention}skipped{}"
      ],
      "type": "Joker"
    },
    "j_mxms_schrodinger": {
      "name": "Schrodinger's Cat",
      "text": [
        "{C:green}50/50 chance{} for each joker",
        "to be {C:attention}retriggered{} or",
        "{C:red}not trigger at all "
      ],
      "type": "Joker"
    },
    "j_mxms_secret_society": {
      "name": "Secret Society",
      "text": [
        "{C:chips}Chip{} values of ranks",
        "are {C:attention}swapped{} and {C:attention}doubled{}"
      ],
      "type": "Joker"
    },
    "j_mxms_sisyphus": {
      "name": "Sisyphus",
      "text": [
        "Gains {X:mult,C:white}X#1#{} Mult for",
        "every hand played",
        "{s:0.8,C:inactive}Resets at end of round",
        "{C:inactive}(Currently: {X:mult,C:white}X#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_sleuth": {
      "name": "Sleuth",
      "text": [
        "{C:attention}+#1# card slot{}",
        "available in the shop"
      ],
      "type": "Joker"
    },
    "j_mxms_slifer": {
      "name": "",
      "text": [
        "Gives {X:mult,C:white}Xmult",
        "equal to the number",
        "of cards {C:attention}held",
        "in your hand"
      ],
      "type": "Joker"
    },
    "j_mxms_slippery_slope": {
      "name": "Slippery Slope",
      "text": [
        "If hand contains {C:attention}more than one{} hand",
        "type, add {C:chips}Chips{} and {C:mult}Mult{} from {C:attention}all{}",
        "contained hand types to score"
      ],
      "type": "Joker"
    },
    "j_mxms_smoker": {
      "name": "Smoker",
      "text": [
        "If played hand is a {C:attention}High Card{},",
        "gains {C:chips}Chips{} equal to each scoring",
        "card's {C:chips}Chip{} value",
        "{C:inactive}(Currently: {C:chips}+#1# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_sneaky_spirit": {
      "name": "Sneaky Spirit",
      "text": [
        "Gives {X:mult,C:white}X#1#{} Mult when {C:attention}exactly",
        "{C:attention}#2# cards{} have been discarded",
        "Count resets on",
        "trigger or miss",
        "{C:inactive}(Currently: {C:red}#3#{C:inactive}/#2# discards)"
      ],
      "type": "Joker"
    },
    "j_mxms_soil": {
      "name": "Soil Joker",
      "text": [
        "Scaling Jokers gain",
        "{C:attention}twice{} as much scaling value"
      ],
      "type": "Joker"
    },
    "j_mxms_soyjoke": {
      "name": "Soyjoke",
      "text": [
        "Gains {X:mult,C:white}X#2#{} Mult",
        "every time a Joker",
        "is {C:attention}re-added{} to hand",
        "during this run",
        "{C:inactive}(Currently: {X:mult,C:white}X#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_space_cowboy": {
      "name": "Space Cowboy",
      "text": [
        "Creates a {C:green}random",
        "{C:planet}Planet{} card when",
        "blind is defeated",
        "{s:0.8,C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_mxms_space_race": {
      "name": "Space Race",
      "text": [
        "If played hand is",
        "{C:red}not{} the highest",
        "level hand, {C:attention}upgrade",
        "hand by {C:attention}1{} level",
        "{s:0.8,C:inactive}Hands tied for highest",
        "{s:0.8,C:inactive}level do not upgrade"
      ],
      "type": "Joker"
    },
    "j_mxms_spam": {
      "name": "Spam",
      "text": [
        "Hand size is set to {C:attention}1{},",
        "Gain {C:blue}hands{} equal to amount",
        "of hand size lost"
      ],
      "type": "Joker"
    },
    "j_mxms_spare_tire": {
      "name": "Spare Tire",
      "text": [
        "{C:green}#1# in #2#{} chance to create",
        "a {C:tarot}Wheel of Fortune{} when",
        "another {C:tarot}Wheel of Fortune{} fails",
        "{s:0.8,C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_mxms_spider": {
      "name": "Spider Joker",
      "text": [
        "{C:mult}+#1#{} Mult for every {C:attention}Spider{}"
      ],
      "type": "Joker"
    },
    "j_mxms_stone_thrower": {
      "name": "Stone Thrower",
      "text": [
        "Gains {C:chips}+#2#{} Chips for every",
        "scored {C:attention}glass card{}",
        "Glass cards are",
        "{C:attention}guaranteed{} to break",
        "{C:inactive}(Currently: {C:chips}+#1# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_mxms_stop_sign": {
      "name": "Stop Sign",
      "text": [
        "Jokers that have rotating",
        "requirements {C:attention}no longer change"
      ],
      "type": "Joker"
    },
    "j_mxms_streaker": {
      "name": "Streaker",
      "text": [
        "Gains {C:chips}+#5#{} Chips and {C:mult}+#6#{} Mult",
        "for each consecutive {C:attention}blind{}",
        "beaten in {C:attention}one hand{}",
        "{C:red}Resets{} when streak is broken",
        "{C:inactive}(Current streak: #1#)",
        "{C:inactive}(Currently: {C:chips}+#3# {C:inactive}Chips, {C:mult}+#4# {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_tar_pit": {
      "name": "Tar Pit",
      "text": [
        "If scored card has",
        "a {C:attention}Seal{}, replace it",
        "with a {X:black,C:white}Black{} {X:black,C:white}Seal{}"
      ],
      "type": "Joker"
    },
    "j_mxms_teddy_bear": {
      "name": "Teddy Bear",
      "text": [
        "On {C:attention}final hand{} of round",
        "create a {C:planet}Planet{} card",
        "of the played hand",
        "{s:0.8,C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_mxms_tofu": {
      "name": "Tofu",
      "text": [
        "Copies ability of",
        "the rightmost {C:attention}Joker{}",
        "for the next {C:attention}#1#{} hands"
      ],
      "type": "Joker"
    },
    "j_mxms_trashman": {
      "name": "Trashman",
      "text": [
        "Played and unscored",
        "cards give {C:money}$#1#{}"
      ],
      "type": "Joker"
    },
    "j_mxms_trick_or_treat": {
      "name": "Trick or Treat",
      "text": [
        "When held, {C:attention}Booster packs{}",
        "now let you take {C:attention}#1#{} more",
        "card than usual"
      ],
      "type": "Joker"
    },
    "j_mxms_unpleasant_gradient": {
      "name": "Unpleasant Gradient",
      "text": [
        "If scored hand has exactly {C:attention}4{} cards,",
        "convert each card into {C:clubs}Clubs{},",
        "{C:hearts}Hearts{}, {C:diamonds}Diamonds{}, and {C:spades}Spades",
        "respectively from left to right"
      ],
      "type": "Joker"
    },
    "j_mxms_vinyl_record": {
      "name": "Vinyl Record",
      "text": [
        "{C:attention}#1#:{} {V:1}+#2#{} #3#",
        "Changes side every {C:attention}#5#{} hands",
        "{C:inactive}(Currently: #4#/#5#)"
      ],
      "type": "Joker"
    },
    "j_mxms_virus": {
      "name": "Virus",
      "text": [
        "All {C:attention}single-suit hands",
        "with {C:attention}more than one card",
        "are treated as a {C:attention}Flush"
      ],
      "type": "Joker"
    },
    "j_mxms_vulture": {
      "name": "Vulture",
      "text": [
        "If a {C:red}destroyed card",
        "has a seal,",
        "apply the seal to",
        "a {C:green}random {C:attention}held Joker"
      ],
      "type": "Joker"
    },
    "j_mxms_war": {
      "name": "War",
      "text": [
        "Means of {C:red}destroying{} cards",
        "have their limits {C:attention}doubled"
      ],
      "type": "Joker"
    },
    "j_mxms_welder": {
      "name": "Welder",
      "text": [
        "{C:attention}Steel{} Cards gain",
        "{X:mult,C:white}X#1#{} Mult to their",
        "effect when triggered",
        "in hand"
      ],
      "type": "Joker"
    },
    "j_mxms_werewolf": {
      "name": "Werewolf",
      "text": [
        "Gains {C:mult}+#1#{} Mult every",
        "time {C:tarot}The Moon{} is used",
        "{C:inactive}(Currently: {C:mult}+#2#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_mxms_whos_on_first": {
      "name": "Who's on First?",
      "text": [
        "Jokers trigger {C:attention}before{}",
        "card scoring"
      ],
      "type": "Joker"
    },
    "j_mxms_wild_buddy": {
      "name": "Wild Buddy",
      "text": [
        "{X:mult,C:white}X#1#{} Mult during",
        "{C:attention}non-Boss{} Blinds"
      ],
      "type": "Joker"
    },
    "j_mxms_zombie": {
      "name": "Zombie",
      "text": [
        "Copies the effect of {C:attention}one random Joker{}",
        "each round. The target Joker will {C:attention}turn into",
        "{C:attention}another Zombie{} at the end of the round",
        "{s:0.8,C:inactive}All zombies target the same Joker",
        "{s:0.8,C:inactive}Zombification can be stopped by selling all other zombies",
        "{C:inactive}Current target: {C:red}#1#"
      ],
      "type": "Joker"
    },
    "p_mxms_horoscope_jumbo_1": {
      "name": "Jumbo Zodiac Pack",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{C:horoscope} Horoscope{} cards to",
        "be used immediately"
      ],
      "type": "Other"
    },
    "p_mxms_horoscope_mega_1": {
      "name": "Mega Zodiac Pack",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{C:horoscope} Horoscope{} cards to",
        "be used immediately"
      ],
      "type": "Other"
    },
    "p_mxms_horoscope_normal_1": {
      "name": "Zodiac Pack",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{C:horoscope} Horoscope{} cards to",
        "be used immediately"
      ],
      "type": "Other"
    },
    "p_mxms_horoscope_normal_2": {
      "name": "Zodiac Pack",
      "text": [
        "Choose {C:attention}#1#{} of up to",
        "{C:attention}#2#{C:horoscope} Horoscope{} cards to",
        "be used immediately"
      ],
      "type": "Other"
    },
    "mxms_posted": {
      "name": "Posted",
      "text": [
        "This Joker stays",
        "posted to the",
        "rightmost position"
      ],
      "type": "Other"
    },
    "purple_seal": {
      "name": "Purple Seal",
      "text": [
        "Creates a {C:tarot}Tarot{} card",
        "when {C:attention}discarded",
        "{C:inactive}(Must have room)",
        "{s:0.8,C:inactive}Activates on trigger for Jokers"
      ],
      "type": "Other"
    },
    "gold_seal": {
      "name": "Gold Seal",
      "text": [
        "Earn {C:money}$3{} when this",
        "card is played",
        "and scores",
        "{s:0.8,C:inactive}Activates on trigger for Jokers"
      ],
      "type": "Other"
    },
    "mxms_black_seal": {
      "name": "Black Seal",
      "text": [
        "{X:mult,C:white}X#1#{} Mult,",
        "Card cannot be {C:attention}modified",
        "and is {C:eternal}eternal"
      ],
      "type": "Other"
    },
    "mxms_credits": {
      "name": "",
      "text": [
        "{C:dark_edition,E:1,s:4}M A X I M U S",
        " ",
        "{X:purple,C:white}Lead{} {X:purple,C:white}Programmer:{} {C:purple}theAstra",
        "{X:attention,C:white}Lead{} {X:attention,C:white}Artist:{} {C:attention}Maxiss02",
        " ",
        "{X:green,C:white}Supporting{} {X:green,C:white}Artists:{} {C:green}pinkzigzagoon, anerdymous, PsyAlola, SadCube",
        " ",
        "{X:planet,C:white}Contributors:{} {C:planet}sup3p, DigitalDetective47, The CoroboCorner",
        " ",
        "{X:gold,C:white}Special{} {X:gold,C:white}Thanks:{} All the awesome people in the Balatro Discord!",
        "{C:white}You all helped make this project possible. Thank you guys for everything!"
      ],
      "type": "Other"
    },
    "undiscovered_horoscope": {
      "name": "Not Discovered",
      "text": [
        "Purchase this",
        "card in an",
        "unseeded run to",
        "learn what it does"
      ],
      "type": "Other"
    },
    "c_mxms_cancri": {
      "name": "Cancri",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_corot": {
      "name": "Corot",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_gliese": {
      "name": "Gliese",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_kepler": {
      "name": "Kepler",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_microscopii": {
      "name": "Microscopii",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_pegasi": {
      "name": "Pegasi",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_phobetor": {
      "name": "Phobetor",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_poltergeist": {
      "name": "Poltergeist",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_proxima": {
      "name": "Proxima Centauri",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_trappist": {
      "name": "Trappist",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "c_mxms_wasp": {
      "name": "Wasp",
      "text": [
        "{S:0.8}({S:0.8,V:1}lvl.#1#{S:0.8}){} Level up",
        "{C:attention}#2#",
        "{C:mult}+#3#{} Mult and",
        "{C:chips}+#4#{} chips"
      ],
      "type": "Planet"
    },
    "sleeve_mxms_autographed": {
      "name": "Autographed Sleeve",
      "text": [
        "Starting deck consists of",
        "{C:attention}three{} Aces, Kings, Queens,",
        "and Jacks {C:attention}per suit{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_autographed_alt": {
      "name": "Autographed Sleeve",
      "text": [
        "Starting deck contains",
        "an extra {C:attention}#1# Stone Cards{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_destiny": {
      "name": "Destiny Sleeve",
      "text": [
        "Start run with ",
        "{C:horoscope,T:v_mxms_multitask}#1#{},",
        "Opens a {C:horoscope}#2#{}",
        "at the end of every ante"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_destiny_alt": {
      "name": "Destiny Sleeve",
      "text": [
        "Start run with ",
        "{C:horoscope,T:v_mxms_workaholic}#1#{}"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_grilled": {
      "name": "Grilled Sleeve",
      "text": [
        "{C:attention}Even{} rank cards give",
        "{C:mult}Mult{} instead of {C:chips}Chips"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_grilled_alt": {
      "name": "Grilled Sleeve",
      "text": [
        "{C:attention}Face{} cards give",
        "{X:mult,C:white}X1.25{} Mult instead of {C:chips}Chips"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_nirvana": {
      "name": "Nirvana Sleeve",
      "text": [
        "Rerolls start at {C:money}$0{}",
        "Shop items cost {X:mult,C:white}X1.5{} as much"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_nirvana_alt": {
      "name": "Nirvana Sleeve",
      "text": [
        "{C:attention}2{} extra free {C:green}Rerolls{} per shop"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_nuclear": {
      "name": "Nuclear Sleeve",
      "text": [
        "{C:attention}-4{} Joker slots",
        "{C:mult}Mult{} is now an {C:attention}exponent{} of {C:chips}Chips{}",
        "Blind Sizes are multiplied",
        "to the {C:red}ante-th power{}",
        "{C:inactive}This sleeve will not count towards best hand scores",
        "{C:inactive}or score-based unlocks",
        "{s:0.8,C:inactive}Works best with Talisman installed"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_nuclear_alt": {
      "name": "Nuclear Sleeve",
      "text": [
        "{C:attention}+1{} Joker slot"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_professional": {
      "name": "Professional Sleeve",
      "text": [
        "Skipping blinds is {C:red}disabled",
        "{C:red}X1.25{} base Blind size"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_professional_alt": {
      "name": "Professional Sleeve",
      "text": [
        "All hand types start at {V:1}Level 2"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_sixth_finger": {
      "name": "Sixth Finger Sleeve",
      "text": [
        "Allows {C:attention}6 playing cards",
        "to be played and discarded"
      ],
      "type": "Sleeve"
    },
    "sleeve_mxms_sixth_finger_alt": {
      "name": "Sixth Finger Sleeve",
      "text": [
        "{C:dark_edition,E:1}Maximus{} {C:planet}Exoplanet{} cards give",
        "{C:attention}+2{} levels instead of {C:attention}+1{}"
      ],
      "type": "Sleeve"
    },
    "c_ankh": {
      "name": "Ankh",
      "text": [
        "Create a copy of a",
        "random {C:attention}Joker{},",
        "{C:green}#1# in #2#{} chance to destroy",
        "each remaining Joker"
      ],
      "type": "Spectral"
    },
    "c_mxms_doppelganger": {
      "name": "Doppelganger",
      "text": [
        "{C:attention}Immediately{} fulfill {C:attention}all{} held",
        "{C:horoscope}Horoscope{} card requirements"
      ],
      "type": "Spectral"
    },
    "c_familiar": {
      "name": "Familiar",
      "text": [
        "Destroy {C:attention}#2#{} random",
        "card(s) in your hand, add",
        "{C:attention}#1#{} random {C:attention}Enhanced face",
        "{C:attention}cards{} to your hand"
      ],
      "type": "Spectral"
    },
    "c_grim": {
      "name": "Grim",
      "text": [
        "Destroy {C:attention}#2#{} random",
        "card(s) in your hand, add",
        "add {C:attention}#1#{} random {C:attention}Enhanced",
        "{C:attention}Aces{} to your hand"
      ],
      "type": "Spectral"
    },
    "c_hex": {
      "name": "Hex",
      "text": [
        "Add {C:dark_edition}Polychrome{} to a",
        "random {C:attention}Joker{},",
        "{C:green}#1# in #2#{} chance to destroy",
        "each remaining Joker"
      ],
      "type": "Spectral"
    },
    "c_mxms_immortality": {
      "name": "Immortality",
      "text": [
        "Add a {X:black,C:white}Black{} {X:black,C:white}Seal{}",
        "to {C:attention}1{} selected",
        "card in your hand"
      ],
      "type": "Spectral"
    },
    "c_incantation": {
      "name": "Incantation",
      "text": [
        "Destroy {C:attention}#2#{} random",
        "card(s) in your hand, add {C:attention}#1#",
        "random {C:attention}Enhanced numbered",
        "{C:attention}cards{} to your hand"
      ],
      "type": "Spectral"
    },
    "c_mxms_ophiucus": {
      "name": "Ophiucus",
      "text": [
        "Play every non-secret hand type",
        "within the next {C:attention}#2#{} antes to",
        "create a {C:dark_edition}Negative {C:spectral}Soul",
        "{C:inactive}Currently: #1#/9"
      ],
      "type": "Spectral"
    },
    "tag_mxms_crab": {
      "name": "Crab Tag",
      "text": [
        "{C:blue}+2{} hands next ante"
      ],
      "type": "Tag"
    },
    "tag_mxms_lion": {
      "name": "Lion Tag",
      "text": [
        "{C:attention}+3 hand size{} next ante"
      ],
      "type": "Tag"
    },
    "tag_mxms_maiden": {
      "name": "Maiden Tag",
      "text": [
        "{C:red}+3{} discards next ante"
      ],
      "type": "Tag"
    },
    "tag_mxms_ram": {
      "name": "Ram Tag",
      "text": [
        "Cuts {C:attention}15%{} off all blind",
        "requirements next ante"
      ],
      "type": "Tag"
    },
    "tag_mxms_scale": {
      "name": "Scale Tag",
      "text": [
        "Makes the next",
        "shop's offerings {C:money}free{}"
      ],
      "type": "Tag"
    },
    "tag_mxms_star": {
      "name": "Star Tag",
      "text": [
        "Gives a free",
        "{C:horoscope}Mega Zodiac Pack"
      ],
      "type": "Tag"
    },
    "c_mxms_aeon": {
      "name": "Aeon",
      "text": [
        "Enhances {C:attention}#1#{}",
        "selected cards to",
        "{C:attention}#2#s"
      ],
      "type": "Tarot"
    },
    "v_mxms_best_dressed": {
      "name": "Best Dressed",
      "text": [
        "Suit-Changing {C:tarot}Tarot{} cards in",
        "your {C:attention}consumable{} area give",
        "{X:mult,C:white}X1{} Mult plus {X:red,C:white}X#1#{}",
        "for each {C:attention}played card{}",
        "matching its suit"
      ],
      "type": "Voucher"
    },
    "v_mxms_guardian": {
      "name": "Guardian",
      "text": [
        "{C:spectral}Spectral{} cards that",
        "destroy Jokers",
        "no longer do so"
      ],
      "type": "Voucher"
    },
    "v_mxms_launch_code": {
      "name": "Launch Code",
      "text": [
        "{C:attention}+#1#{} ante,",
        "{C:blue}+#2#{} hand and",
        "{C:red}+#2#{} discard",
        "each round"
      ],
      "type": "Voucher"
    },
    "v_mxms_multitask": {
      "name": "Multitask",
      "text": [
        "{C:attention}+1{} horoscope slot"
      ],
      "type": "Voucher"
    },
    "v_mxms_sharp_suit": {
      "name": "Sharp Suit",
      "text": [
        "{C:attention}Arcana Packs{} always",
        "contain the {C:tarot}Tarot{}",
        "card for the {C:attention}most",
        "{C:attention}numerous suit{} in",
        "your deck"
      ],
      "type": "Voucher"
    },
    "v_mxms_shield": {
      "name": "Shield",
      "text": [
        "{C:spectral}Spectral{} cards that destroy Jokers",
        "only have a {C:green}1 in 2{} chance",
        "to destroy each Joker"
      ],
      "type": "Voucher"
    },
    "v_mxms_warp_drive": {
      "name": "Warp Drive",
      "text": [
        "{C:attention}+#1#{} ante,",
        "{C:blue}+#2#{} hands and",
        "{C:red}+#2#{} discards",
        "each round"
      ],
      "type": "Voucher"
    },
    "v_mxms_workaholic": {
      "name": "Workaholic",
      "text": [
        "{C:attention}+1{} horoscope slot"
      ],
      "type": "Voucher"
    },
    "ach_mxms_apocalypse": {
      "name": "\"Have a full Joker roster consisting only of Zombies\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_behind": {
      "name": "\"Encounter a Spider... somewhere...\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_commitment": {
      "name": "\"Have a deck consisting entirely of cards with a Black Seal\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_copy": {
      "name": "\"Have a Bootleg target either a Blueprint or a Brainstorm\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_disciple": {
      "name": "\"Discover every Maximus Joker\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_flushaholic": {
      "name": "\"Make a Flush with all four suits (Wild Cards do not count)\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_infinity": {
      "name": "\"Discover every Sixth Finger Planet Card\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_king": {
      "name": "\"Use a Coronation to create a Crowned Joker\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_laughing": {
      "name": "\"Eat an exotic snack to find and purchase a Comedian\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_maximum_effort": {
      "name": "\"Beat every Maximus challenge\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_metamorphosis": {
      "name": "\"Create a Butterfly\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_naturally": {
      "name": "\"Beat a blind in one hand before any playing cards are triggered\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_stargazer": {
      "name": "\"Complete each Horoscope card at least once\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_stuffed": {
      "name": "\"Scale Endless Breadsticks 25 times in one run\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_unfortunate": {
      "name": "\"Overcook an Egg\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "ach_mxms_win_plus": {
      "name": "\"Win a run with Joker+\"",
      "text": [],
      "type": "achievement_descriptions"
    },
    "c_mxms_52_commandments": {
      "name": "\"52 Commandments\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_all_stars": {
      "name": "\"All Stars\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_biggest_loser": {
      "name": "\"Tonight\\'s Biggest Loser\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_crusaders": {
      "name": "\"Stardust Crusaders\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_despite": {
      "name": "\"Despite Everything\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_drain": {
      "name": "\"Down the Drain\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_fashion": {
      "name": "\"Fashion Disaster\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_gambling": {
      "name": "\"Let\\'s Go Gambling!\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_killer": {
      "name": "\"Zodiac Killer\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_love_and_war": {
      "name": "\"All\\'s Fair in Love and War\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_overgrowth": {
      "name": "\"Overgrowth\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_p2w": {
      "name": "\"Pay To Win\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_picky": {
      "name": "\"Picky Eater\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_square": {
      "name": "\"It\\'s Hip to be Square\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_target_practice": {
      "name": "\"Target Practice\"",
      "text": [],
      "type": "challenge_names"
    },
    "c_mxms_thought": {
      "name": "\"Thought Experiment\"",
      "text": [],
      "type": "challenge_names"
    },
    "b_horoscope_cards": {
      "name": "\"Horoscope Cards\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_4d_ticking": {
      "name": "\"Enable 4D Joker Ticking Sounds\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_credits": {
      "name": "\"Credits\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_custom_menu": {
      "name": "\"Enable Custom Menu\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_enable_handtypes": {
      "name": "\"Enable New Handtypes\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_enable_horoscopes": {
      "name": "\"Enable Horoscopes\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_only_maximus_jokers": {
      "name": "\"Toggle Maximus Only Jokers\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_reset_achievements": {
      "name": "\"Reset Maximus Achievements\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_restart_settings": {
      "name": "\"(Must restart to apply changes)\"",
      "text": [],
      "type": "dictionary"
    },
    "b_mxms_stat_horoscopes": {
      "name": "\"Horoscopes\"",
      "text": [],
      "type": "dictionary"
    },
    "k_horoscope": {
      "name": "\"Horoscope\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_a_side": {
      "name": "\"A-Side\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_a_side_ex": {
      "name": "\"A-Side!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_b_side": {
      "name": "\"B-Side\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_b_side_ex": {
      "name": "\"B-Side!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_blackjack_ex": {
      "name": "\"Blackjack!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_bust_ex": {
      "name": "\"Bust!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_consumed": {
      "name": "\"Consumed\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_crashed_ex": {
      "name": "\"Crashed!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_crowned": {
      "name": "\"Crowned\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_crumbled": {
      "name": "\"Crumbled\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_deserved_ex": {
      "name": "\"Deserved!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_destroy_block_ex": {
      "name": "\"Destroy blocked!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_erm_el": {
      "name": "\"Errrrmmm...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_eureka_ex": {
      "name": "\"Eureka!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_exploded_el": {
      "name": "\"Exploded...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_exoplanet": {
      "name": "\"Exoplanet\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_fail": {
      "name": "\"Fail\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_failed_ex": {
      "name": "\"Failed!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_fortunate_ex": {
      "name": "\"Fortunate!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_free_ex": {
      "name": "\"Free!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_glassed": {
      "name": "\"Glassed\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_halved": {
      "name": "\"Halved\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_infected_ex": {
      "name": "\"Infected!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_jackpot_ex": {
      "name": "\"Jackpot!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_jobbed": {
      "name": "\"Jobbed\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_left_el": {
      "name": "\"Left...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_loser": {
      "name": "\"Tonight\\'s Biggest Loser\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_love_ex": {
      "name": "\"Love!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_lucky": {
      "name": "\"Lucky\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_more_ex": {
      "name": "\"More Please!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_no_target_el": {
      "name": "\"No Target...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_plucked_ex": {
      "name": "\"Plucked!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_plus_hand": {
      "name": "\"+1 Hand\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_plus_horoscope": {
      "name": "\"+1 Horoscope\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_pushed_ex": {
      "name": "\"Pushed!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_r_mult_ex": {
      "name": "\"A random Mult appears!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_sacrifice_ex": {
      "name": "\"Sacrifice!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_saved_later_ex": {
      "name": "\"Saved for later!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_serious_q": {
      "name": "\"Why so serious?\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_splat_ex": {
      "name": "\"Splat!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_step_el": {
      "name": "\"One Small Step...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_streaked_ex": {
      "name": "\"Streaked!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_success_ex": {
      "name": "\"Success!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_tribute_ex": {
      "name": "\"Tribute!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_turned_ex": {
      "name": "\"Turned!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_unpleasant": {
      "name": "\"how Unpleasant\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_void_touched_ex": {
      "name": "\"Void-Touched!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_wasted": {
      "name": "\"Wasted\"",
      "text": [],
      "type": "dictionary"
    },
    "k_mxms_zodiac_pack": {
      "name": "\"Zodiac Pack\"",
      "text": [],
      "type": "dictionary"
    },
    "ph_mxms_stat_horoscope": {
      "name": "\"Number of times this card has been fulfilled\"",
      "text": [],
      "type": "dictionary"
    },
    "ph_mxms_stat_horoscope_disabled": {
      "name": "\"Horoscopes disabled",
      "text": [],
      "type": "dictionary"
    }
  },
  "atlases": {
    "Placeholder": {
      "path": "placeholders.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/placeholders.png",
      "resolvedGitHubPath": "assets/1x/placeholders.png"
    },
    "Modifiers": {
      "path": "Modifiers.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Modifiers.png",
      "resolvedGitHubPath": "assets/1x/Modifiers.png"
    },
    "modicon": {
      "path": "modicon.png",
      "px": 32,
      "py": 32,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/modicon.png",
      "resolvedGitHubPath": "assets/1x/modicon.png"
    },
    "logo": {
      "path": "Maximus_Logo.png",
      "px": 173,
      "py": 61,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Maximus_Logo.png",
      "resolvedGitHubPath": "assets/1x/Maximus_Logo.png"
    },
    "poker_hands": {
      "path": "Poker Hands.png",
      "px": 53,
      "py": 13,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Poker%20Hands.png",
      "resolvedGitHubPath": "assets/1x/Poker Hands.png"
    },
    "Sleeves": {
      "path": "Sleeves.png",
      "px": 73,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Sleeves.png",
      "resolvedGitHubPath": "assets/1x/Sleeves.png"
    },
    "Blinds": {
      "path": "Blinds.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Blinds.png",
      "resolvedGitHubPath": "assets/1x/Blinds.png"
    },
    "Boosters": {
      "path": "Boosters.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/boosters.png",
      "resolvedGitHubPath": "assets/1x/Boosters.png"
    },
    "Consumables": {
      "path": "Consumables.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Consumables.png",
      "resolvedGitHubPath": "assets/1x/Consumables.png"
    },
    "Jokers": {
      "path": "Jokers.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/jokers.png",
      "resolvedGitHubPath": "assets/1x/Jokers.png"
    },
    "4D": {
      "path": "4d_joker.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/4d_joker.png",
      "resolvedGitHubPath": "assets/1x/4d_joker.png"
    },
    "Tags": {
      "path": "Tags.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Tags.png",
      "resolvedGitHubPath": "assets/1x/Tags.png"
    },
    "Vouchers": {
      "path": "Vouchers.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Maximus@the-Astra/v1.1.1/Vouchers.png",
      "resolvedGitHubPath": "assets/1x/Vouchers.png"
    }
  },
  "cards": [
    {
      "type": "Achievement",
      "key": "stargazer",
      "atlas": null,
      "pos": null,
      "raw": "key = 'stargazer',\n    hidden_name = false,\n    unlock_condition = function(self, args)\n        if args.type == \"all_horoscopes\" then\n            local horoscopeTallies = getMaximusTallies(G.P_CENTER_POOLS[\"Horoscope\"])\n            -- +1 to account for Ophiucus\n            if #G.PROFILES[G.SETTINGS.profile].horoscope_completions / (horoscopeTallies.of + 1) >= 1 then\n                return true\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "maximum_effort",
      "atlas": null,
      "pos": null,
      "raw": "key = 'maximum_effort',\n    hidden_name = false,\n    unlock_condition = function(self, args)\n        if args.type == 'win_challenge' then\n            local _c = true\n            local maximus_challenges = {\n                '52_commandments',\n                'crusaders',\n                'overgrowth',\n                'square',\n                'gambling',\n                'target_practice',\n                'biggest_loser',\n                'picky',\n                'fashion',\n                'all_stars',\n                'p2w',\n                'killer',\n                'drain',\n                'thought',\n                'love_and_war',\n            }\n            for k, v in pairs(maximus_challenges) do\n                if not G.PROFILES[G.SETTINGS.profile].challenge_progress.completed[v] then\n                    _c = false\n                    break\n                end\n            end\n            return _c\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "king",
      "atlas": null,
      "pos": null,
      "raw": "key = 'king',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'crowned' then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "apocalypse",
      "atlas": null,
      "pos": null,
      "raw": "key = 'apocalypse',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'zombified' then\n            return #SMODS.find_card('j_mxms_zombie') == G.jokers.config.card_limit\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "disciple",
      "atlas": null,
      "pos": null,
      "raw": "key = 'disciple',\n    hidden_name = false,\n    unlock_condition = function(self, args)\n        if args.type == 'discover_amount' then\n            local mxmsTallies = getMaximusTallies(G.P_CENTER_POOLS[\"Joker\"])\n            if mxmsTallies.tally / mxmsTallies.of >= 1 then\n                return true\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "metamorphosis",
      "atlas": null,
      "pos": null,
      "raw": "key = 'metamorphosis',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'modify_jokers' and G.jokers then\n            return next(SMODS.find_card('j_mxms_butterfly'))\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "commitment",
      "atlas": null,
      "pos": null,
      "raw": "key = 'commitment',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'black_seal' then\n            for k, v in pairs(G.playing_cards) do\n                if not v.seal or v.seal and v.seal ~= 'mxms_Black' then\n                    return false\n                end\n            end\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "flushaholic",
      "atlas": null,
      "pos": null,
      "raw": "key = 'flushaholic',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'flushaholic' then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "unfortunate",
      "atlas": null,
      "pos": null,
      "raw": "key = 'unfortunate',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'eggsplosion' then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "infinity",
      "atlas": null,
      "pos": null,
      "raw": "key = 'infinity',\n    hidden_name = false,\n    unlock_condition = function(self, args)\n        if args.type == 'discover_amount' then\n            local mxmsTallies = getMaximusTallies(G.P_CENTER_POOLS[\"Planet\"])\n            if mxmsTallies.tally / mxmsTallies.of >= 1 then\n                return true\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "win_plus",
      "atlas": null,
      "pos": null,
      "raw": "key = 'win_plus',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'win' then\n            return next(SMODS.find_card('j_mxms_joker_plus'))\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "laughing",
      "atlas": null,
      "pos": null,
      "raw": "key = 'laughing',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'modify_jokers' and G.jokers then\n            return next(SMODS.find_card('j_mxms_comedian'))\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "copy",
      "atlas": null,
      "pos": null,
      "raw": "key = 'copy',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'bootleg_copy' and (args.card == 'j_blueprint' or args.card == 'j_brainstorm') then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "stuffed",
      "atlas": null,
      "pos": null,
      "raw": "key = 'stuffed',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'breadsticks' and args.scales == 25 then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "naturally",
      "atlas": null,
      "pos": null,
      "raw": "key = 'naturally',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'beat_before_playing_cards' then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Achievement",
      "key": "behind",
      "atlas": null,
      "pos": null,
      "raw": "key = 'behind',\n    hidden_name = false,\n    hidden_text = true,\n    unlock_condition = function(self, args)\n        if args.type == 'spider_trigger' then\n            return true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "autographed",
      "atlas": "Modifiers",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'autographed',\n    atlas = 'Modifiers',\n    pos = {\n        x = 5,\n        y = 0\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    apply = function(self, back)\n        local extra_cards = {}\n        for i, v in pairs(SMODS.Suits) do\n            if type(v) == 'table' and type(v.in_pool) == 'function' and v.in_pool then\n                if v:in_pool({ initial_deck = true }) then\n                    for j = 1, 2 do\n                        extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'J' }\n                        extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'Q' }\n                        extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'K' }\n                        extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'A' }\n                    end\n                    --Extra Ace since they are not face cards\n                    extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'A' }\n                end\n            else\n                for j = 1, 2 do\n                    extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'J' }\n                    extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'Q' }\n                    extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'K' }\n                    extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'A' }\n                end\n                --Extra Ace since they are not face cards\n                extra_cards[#extra_cards + 1] = { s = v.card_key, r = 'A' }\n            end\n        end\n        G.GAME.starting_params.extra_cards = extra_cards\n        G.GAME.starting_params.mxms_all_faces = true\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "destiny",
      "atlas": "Modifiers",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'destiny',\n        atlas = 'Modifiers',\n        pos = {\n            x = 6,\n            y = 0\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        config = {\n            voucher = 'v_mxms_multitask',\n            booster = 'p_mxms_horoscope_mega_1'\n        },\n        loc_vars = function(self, info_queue, back)\n            return {\n                vars = {\n                    localize { type = 'name_text', key = self.config.voucher, set = 'Voucher' },\n                    localize { type = 'name_text', key = self.config.booster, set = 'Other' }\n                }\n            }\n        end,\n        apply = function(self, back)\n            G.GAME.modifiers.mxms_horoscope_ante_end = true\n        end",
      "config": {
        "voucher": "v_mxms_multitask",
        "booster": "p_mxms_horoscope_mega_1"
      },
      "ability": {
        "voucher": "v_mxms_multitask",
        "booster": "p_mxms_horoscope_mega_1"
      },
      "vars": [
        "localize { type = 'name_text'",
        "key = self.config.voucher",
        "set = 'Voucher'"
      ],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "grilled",
      "atlas": "Modifiers",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'grilled',\n    atlas = 'Modifiers',\n    pos = {\n        x = 4,\n        y = 0\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    apply = function(self, back)\n        --Change card scoring\n        G.GAME.modifiers.mxms_even_card_mult = true\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "nirvana",
      "atlas": "Modifiers",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'nirvana',\n    atlas = 'Modifiers',\n    pos = {\n        x = 1,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    apply = function(self, back)\n        --Change shop prices\n        G.GAME.mxms_shop_price_multiplier = 1.5\n\n        -- Change reroll starting price\n        G.GAME.starting_params.reroll_cost = 0\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "nuclear",
      "atlas": "Modifiers",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'nuclear',\n    atlas = 'Modifiers',\n    pos = {\n        x = 2,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    apply = function(self, back)\n        --Change blind scaling\n        G.GAME.modifiers.mxms_nuclear_size = true\n\n        --Change joker slots\n        G.GAME.starting_params.joker_slots = G.GAME.starting_params.joker_slots - 4\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "professional",
      "atlas": "Modifiers",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'professional',\n    atlas = 'Modifiers',\n    pos = {\n        x = 3,\n        y = 0\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    apply = function(self, back)\n        --Disable skipping\n        G.GAME.modifiers.disable_blind_skips = true\n\n        -- Change blind size\n        G.GAME.starting_params.ante_scaling = 1.25\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Back",
      "key": "sixth_finger",
      "atlas": "Modifiers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'sixth_finger',\n    atlas = 'Modifiers',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    apply = function(self, back)\n        --Change limits\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                SMODS.change_play_limit(1)\n                SMODS.change_discard_limit(1)\n                return true;\n            end\n        }))\n\n        if Maximus_config.new_handtypes then\n            -- Make non-secret hands visible\n            G.GAME.hands.mxms_three_pair.visible = true\n            G.GAME.hands.mxms_double_triple.visible = true\n            G.GAME.hands.mxms_s_straight.visible = true\n            G.GAME.hands.mxms_s_flush.visible = true\n            G.GAME.hands.mxms_house_party.visible = true\n            G.GAME.hands.mxms_s_straight_f.visible = true\n        end\n    end",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "bird",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 8
      },
      "raw": "key = 'bird',\n    boss = {\n        min = 4,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 8\n    },\n    config = {\n        extra = {\n            hands_removed = 0\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    boss_colour = HEX('BFFF3A'),\n    modify_hand = function(self, cards, poker_hands, text, mult, hand_chips)\n        self.triggered = true\n        return math.max(mult - (G.GAME.hands[text].l_mult * 2), G.GAME.hands[text].s_mult),\n            math.max(hand_chips - (G.GAME.hands[text].l_chips * 2), G.GAME.hands[text].s_chips),\n            true\n    end",
      "config": {
        "extra": {
          "hands_removed": 0
        }
      },
      "ability": {
        "extra": {
          "hands_removed": 0
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "cheat",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 5
      },
      "raw": "key = 'cheat',\n    boss = {\n        min = 4,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 5\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    boss_colour = HEX('4E4C76'),\n    recalc_debuff = function(self, card, from_blind)\n        if card.ability.set == 'Enhanced' or\n            card.edition and (card.ability.set == 'Enhanced' or card.ability.set == 'Default') or\n            card.seal and (card.ability.set == 'Enhanced' or card.ability.set == 'Default') then\n            self.triggered = true\n            card.debuffed_by_blind = true\n            return true\n        else\n            card.debuffed_by_blind = false\n            return false\n        end\n    end,\n    disable = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    defeat = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    in_pool = function(self, args)\n        if not (G.GAME.bosses_used['bl_mxms_rule'] > 0) and self.boss.min <= math.max(1, G.GAME.round_resets.ante) then\n            return true\n        end\n\n        return false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "envy",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'envy',\n    boss = {\n        min = 5,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    boss_colour = HEX('4CCAA9'),\n    calculate = function(self, card, context)\n        if context.post_trigger and context.cardarea == G.jokers and context.other_ret\n        and not (context.other_context.end_of_round or context.other_context.setting_blind)\n        and not G.GAME.blind.disabled then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.1,\n                func = function()\n                    SMODS.juice_up_blind()\n                    return true;\n                end\n            }))\n            delay(0.23)\n            ease_dollars(-1)\n            self.triggered = true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "flame",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 'flame',\n    boss = {\n        min = 6,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 3\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    boss_colour = HEX('E87250'),\n    calculate = function(self, card, context)\n        if context.destroy_card and context.cardarea == G.play then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    self.triggered = true\n                    SMODS.juice_up_blind()\n                    return true;\n                end\n            }))\n            return {\n                remove = true\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "grinder",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "--The Grinder\n    key = 'grinder',\n    boss = {\n        min = 3,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    boss_colour = HEX('D9638D'),\n    after_scoring = function(self)\n        for k, v in ipairs(G.play.cards) do\n            if v.ability.set == 'Enhanced' or v.seal or v.edition then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.5,\n                    func = function()\n                        v:set_ability(G.P_CENTERS.c_base)\n                        v:set_seal(nil, nil, true)\n                        v:set_edition(nil, true)\n                        v:juice_up(0.3, 0.4)\n                        play_sound('tarot2')\n                        self.triggered = true\n                        return true\n                    end\n                }))\n                SMODS.calculate_effect({ message = \"Grinded\" }, v)\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "hurdle",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 6
      },
      "raw": "key = 'hurdle',\n    boss = {\n        min = 1,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 6\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    boss_colour = HEX('EE6672'),\n    calculate = function(self, card, context)\n        if context.before and not G.GAME.blind.disabled then\n            local first_card = context.scoring_hand[1]\n            if first_card then\n                first_card.debuffed_by_blind = true\n                first_card:set_debuff(true)\n                self.triggered = true\n            end\n        end\n    end,\n    disable = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    defeat = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "maze",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 9
      },
      "raw": "key = 'maze',\n    boss = {\n        min = 5,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 9\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    boss_colour = HEX('110E47'),\n    calculate = function(self, card, context)\n        if context.after and not G.GAME.blind.disabled then\n            for i, v in ipairs(G.hand.cards) do\n                if not v.debuffed_by_blind then\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'after',\n                        delay = 0.25,\n                        func = function()\n                            v:set_debuff(true)\n                            v.debuffed_by_blind = true\n                            v:juice_up(0.3, 0.4)\n                            play_sound('tarot2', 0.85 + (i - 0.999) / (#G.hand.cards - 0.998) * 0.3)\n                            SMODS.juice_up_blind()\n                            self.triggered = true\n                            return true;\n                        end\n                    }))\n                end\n            end\n        end\n    end,\n    disable = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    defeat = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "rot",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'rot',\n    boss = {\n        min = 1,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    boss_colour = HEX('A2CA4C'),\n    set_blind = function(self)\n        for i = 1, #G.playing_cards / 4 do\n            local card = G.playing_cards[pseudorandom(pseudoseed('rotcard' .. i), 1, #G.playing_cards)]\n            local j = 1\n            while card.debuffed_by_blind do\n                card = G.playing_cards[pseudorandom(pseudoseed('rotcard_reroll' .. j), 1, #G.playing_cards)]\n                j = j + 1\n            end\n            card.debuffed_by_blind = true\n            self.triggered = true\n            card:set_debuff(true)\n        end\n    end,\n    recalc_debuff = function(self, card, from_blind)\n        if card.debuffed_by_blind then\n            return true\n        else\n            return false\n        end\n    end,\n    disable = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    defeat = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "rule",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 'rule',\n    boss = {\n        min = 4,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 4\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    boss_colour = HEX('EABEDB'),\n    recalc_debuff = function(self, card, from_blind)\n        if card.ability.set == 'Default' and not card.edition and not card.seal then\n            card.debuffed_by_blind = true\n            self.triggered = true\n            return true\n        else\n            card.debuffed_by_blind = false\n            return false\n        end\n    end,\n    disable = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    defeat = function(self)\n        for k, v in pairs(G.playing_cards) do\n            if v.debuffed_by_blind then\n                v:set_debuff(); v.debuffed_by_blind = nil\n            end\n        end\n        self.triggered = false\n    end,\n    in_pool = function(self, args)\n        if not (G.GAME.bosses_used['bl_mxms_cheat'] > 0) and self.boss.min <= math.max(1, G.GAME.round_resets.ante) then\n            return true\n        end\n\n        return false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Blind",
      "key": "spring",
      "atlas": "Blinds",
      "pos": {
        "x": 0,
        "y": 7
      },
      "raw": "key = 'spring',\n    boss = {\n        min = 1,\n        max = 10\n    },\n    atlas = 'Blinds',\n    pos = {\n        x = 0,\n        y = 7\n    },\n    config = {\n        extra = {\n            hands_removed = 0\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    boss_colour = HEX('BDB087'),\n    set_blind = function(self)\n        self.config.extra.hands_removed = 0\n    end,\n    after_scoring = function(self)\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                SMODS.juice_up_blind()\n                G.hand:change_size(-1)\n                self.config.extra.hands_removed = self.config.extra.hands_removed + 1\n                self.triggered = true\n                return true;\n            end\n        }))\n    end,\n    disable = function(self)\n        G.hand:change_size(self.config.extra.hands_removed)\n        G.FUNCS.draw_from_deck_to_hand(self.config.extra.hands_removed)\n    end,\n    defeat = function(self)\n        if not G.GAME.blind.disabled then\n            G.hand:change_size(self.config.extra.hands_removed)\n        end\n    end",
      "config": {
        "extra": {
          "hands_removed": 0
        }
      },
      "ability": {
        "extra": {
          "hands_removed": 0
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "horoscope_jumbo_1",
      "atlas": "Boosters",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = \"horoscope_jumbo_1\",\n    kind = \"Horoscope\",\n    atlas = \"Boosters\",\n    group_key = \"k_mxms_zodiac_pack\",\n    pos = {\n        x = 2,\n        y = 0\n    },\n    config = {\n        extra = 4,\n        choose = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"N/A\"\n    },\n    cost = 6,\n    weight = 0.48,\n    select_card = 'mxms_horoscope',\n    create_card = function(self, card)\n        return create_card(\"Horoscope\", G.pack_cards, nil, nil, true, true, nil, \"mxms_zodiac\")\n    end,\n    ease_background_colour = function(self)\n        ease_colour(G.C.DYN_UI.MAIN, Maximus.C.SET.Horoscope)\n        ease_background_colour({ new_colour = Maximus.C.SET.Horoscope, special_colour = G.C.BLACK, contrast = 2 })\n    end,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.config.center.config.choose + G.GAME.mxms_choose_mod, card.ability.extra } }\n    end",
      "config": {
        "extra": 4,
        "choose": 1
      },
      "ability": {
        "extra": 4,
        "choose": 1
      },
      "vars": [
        null,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "horoscope_mega_1",
      "atlas": "Boosters",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = \"horoscope_mega_1\",\n    kind = \"Horoscope\",\n    atlas = \"Boosters\",\n    group_key = \"k_mxms_zodiac_pack\",\n    pos = {\n        x = 3,\n        y = 0\n    },\n    config = {\n        extra = 4,\n        choose = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"N/A\"\n    },\n    cost = 8,\n    weight = 0.12,\n    select_card = 'mxms_horoscope',\n    create_card = function(self, card)\n        return create_card(\"Horoscope\", G.pack_cards, nil, nil, true, true, nil, \"mxms_zodiac\")\n    end,\n    ease_background_colour = function(self)\n        ease_colour(G.C.DYN_UI.MAIN, Maximus.C.SET.Horoscope)\n        ease_background_colour({ new_colour = Maximus.C.SET.Horoscope, special_colour = G.C.BLACK, contrast = 2 })\n    end,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.config.center.config.choose + (G.GAME.mxms_choose_mod or 0), card.ability.extra } }\n    end,\n    in_pool = function(self, args)\n        if G.mxms_horoscope.config.highlighted_limit > 1 then\n            return true\n        end\n\n        return false\n    end",
      "config": {
        "extra": 4,
        "choose": 2
      },
      "ability": {
        "extra": 4,
        "choose": 2
      },
      "vars": [
        null,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "horoscope_normal_1",
      "atlas": "Boosters",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"horoscope_normal_1\",\n    kind = \"Horoscope\",\n    atlas = \"Boosters\",\n    group_key = \"k_mxms_zodiac_pack\",\n    pos = {\n        x = 0,\n        y = 0\n    },\n    config = {\n        extra = 2,\n        choose = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"N/A\"\n    },\n    cost = 4,\n    weight = 0.96,\n    select_card = 'mxms_horoscope',\n    create_card = function(self, card)\n        return create_card(\"Horoscope\", G.pack_cards, nil, nil, true, true, nil, \"mxms_zodiac\")\n    end,\n    ease_background_colour = function(self)\n        ease_colour(G.C.DYN_UI.MAIN, Maximus.C.SET.Horoscope)\n        ease_background_colour({ new_colour = Maximus.C.SET.Horoscope, special_colour = G.C.BLACK, contrast = 2 })\n    end,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.config.center.config.choose + G.GAME.mxms_choose_mod, card.ability.extra } }\n    end",
      "config": {
        "extra": 2,
        "choose": 1
      },
      "ability": {
        "extra": 2,
        "choose": 1
      },
      "vars": [
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Booster",
      "key": "horoscope_normal_2",
      "atlas": "Boosters",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = \"horoscope_normal_2\",\n    kind = \"Horoscope\",\n    atlas = \"Boosters\",\n    group_key = \"k_mxms_zodiac_pack\",\n    pos = {\n        x = 1,\n        y = 0\n    },\n    config = {\n        extra = 2,\n        choose = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"N/A\"\n    },\n    cost = 4,\n    weight = 0.96,\n    select_card = 'mxms_horoscope',\n    create_card = function(self, card)\n        return create_card(\"Horoscope\", G.pack_cards, nil, nil, true, true, nil, \"mxms_zodiac\")\n    end,\n    ease_background_colour = function(self)\n        ease_colour(G.C.DYN_UI.MAIN, Maximus.C.SET.Horoscope)\n        ease_background_colour({ new_colour = Maximus.C.SET.Horoscope, special_colour = G.C.BLACK, contrast = 2 })\n    end,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.config.center.config.choose + G.GAME.mxms_choose_mod, card.ability.extra } }\n    end",
      "config": {
        "extra": 2,
        "choose": 1
      },
      "ability": {
        "extra": 2,
        "choose": 1
      },
      "vars": [
        null,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "52_commandments",
      "atlas": null,
      "pos": null,
      "raw": "key = '52_commandments',\n    rules = {\n        custom = {\n            { id = 'mxms_X_blind_size', value = 2 }\n        }\n    },\n    jokers = {\n        { id = 'j_mxms_hammer_and_chisel', eternal = true }\n    },\n    deck = {\n        type = 'Challenge Deck',\n        enhancement = 'm_stone'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "all_stars",
      "atlas": null,
      "pos": null,
      "raw": "key = 'all_stars',\n    rules = {\n        custom = {\n            { id = 'mxms_all_rare' }\n        }\n    },\n    jokers = {},\n    restrictions = {\n        banned_cards = {\n            { id = 'p_standard_normal_1', ids = {\n                'p_standard_normal_1', 'p_standard_normal_2',\n                'p_standard_normal_3', 'p_standard_normal_4',\n                'p_standard_jumbo_1', 'p_standard_jumbo_2',\n                'p_standard_mega_1', 'p_standard_mega_2' }\n            },\n            { id = 'p_arcana_normal_1', ids = {\n                'p_arcana_normal_1', 'p_arcana_normal_2',\n                'p_arcana_normal_3', 'p_arcana_normal_4',\n                'p_arcana_jumbo_1', 'p_arcana_jumbo_2',\n                'p_arcana_mega_1', 'p_arcana_mega_2' }\n            },\n            { id = 'p_celestial_normal_1', ids = {\n                'p_celestial_normal_1', 'p_celestial_normal_2',\n                'p_celestial_normal_3', 'p_celestial_normal_4',\n                'p_celestial_jumbo_1', 'p_celestial_jumbo_2',\n                'p_celestial_mega_1', 'p_celestial_mega_2' }\n            },\n            { id = 'p_buffoon_normal_1', ids = {\n                'p_buffoon_normal_1', 'p_buffoon_normal_2',\n                'p_buffoon_jumbo_1', 'p_buffoon_mega_1' }\n            },\n            { id = 'p_mxms_horoscope_normal_1', ids = {\n                'p_mxms_horoscope_normal_1', 'p_mxms_horoscope_normal_2',\n                'p_mxms_horoscope_jumbo_1', 'p_mxms_horoscope_mega_1' }\n            },\n        }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "biggest_loser",
      "atlas": null,
      "pos": null,
      "raw": "key = 'biggest_loser',\n    rules = {\n        custom = {\n            { id = 'mxms_biggest_loser' }\n        }\n    },\n    jokers = {\n        { id = 'j_mxms_stop_sign',         edition = 'negative', eternal = true },\n        { id = 'j_mxms_impractical_joker', edition = 'negative', eternal = true, mxms_posted = true }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "crusaders",
      "atlas": null,
      "pos": null,
      "raw": "key = 'crusaders',\n    rules = {},\n    jokers = {},\n    vouchers = {\n        { id = 'v_tarot_merchant' }\n    },\n    restrictions = {\n        banned_cards = {\n            { id = 'v_magic_trick' },\n            { id = 'v_illusion' },\n            { id = 'p_standard_normal_1', ids = {\n                'p_standard_normal_1', 'p_standard_normal_2',\n                'p_standard_normal_3', 'p_standard_normal_4',\n                'p_standard_jumbo_1', 'p_standard_jumbo_2',\n                'p_standard_mega_1', 'p_standard_mega_2' }\n            },\n            { id = 'j_dna' },\n            { id = 'j_certificate' },\n            { id = 'j_marble' },\n            { id = 'j_mxms_rock_slide' },\n            { id = 'j_mxms_leto' },\n            { id = 'c_cryptid' },\n            { id = 'c_grim' },\n            { id = 'c_familiar' },\n            { id = 'c_incantation' },\n        }\n    },\n    deck = {\n        type = 'Challenge Deck',\n        cards = {\n            { s = \"D\", r = \"K\" },\n            { s = \"D\", r = \"K\" },\n            { s = \"D\", r = \"K\" },\n            { s = \"D\", r = \"K\" },\n            { s = \"D\", r = \"K\" }\n        }\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "despite",
      "atlas": null,
      "pos": null,
      "raw": "key = 'despite',\n    rules = {\n        custom = {\n            { id = 'mxms_ante_sell' }\n        }\n    },\n    jokers = {\n        { id = 'j_joker', edition = 'negative', eternal = true }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "drain",
      "atlas": null,
      "pos": null,
      "raw": "key = 'drain',\n    rules = {\n        custom = {\n            { id = 'mxms_hand_decay', value = \"Flush\" }\n        }\n    },\n    jokers = {\n        { id = 'j_smeared',    eternal = true },\n        { id = 'j_mxms_faded', eternal = true }\n    },\n    vouchers = {\n        { id = 'v_telescope' }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "fashion",
      "atlas": null,
      "pos": null,
      "raw": "key = 'fashion',\n    rules = {\n        custom = {\n            { id = 'mxms_random_suit_debuff' }\n        }\n    },\n    jokers = {},\n    restrictions = {\n        banned_other = {\n            { id = 'bl_club',   type = 'blind' },\n            { id = 'bl_goad',   type = 'blind' },\n            { id = 'bl_head',   type = 'blind' },\n            { id = 'bl_window', type = 'blind' }\n        }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "gambling",
      "atlas": null,
      "pos": null,
      "raw": "key = 'gambling',\n    rules = {\n        custom = {\n            { id = 'no_extra_hand_money' },\n            { id = 'no_reward' },\n            { id = 'no_interest' }\n        },\n        modifiers = {\n            { id = 'dollars', value = 10 }\n        }\n    },\n    jokers = {},\n    restrictions = {\n        banned_cards = {\n            { id = 'c_temperance' },\n            { id = 'c_hermit' },\n            { id = 'c_devil' },\n            { id = 'c_magician' },\n            { id = 'c_immolate' },\n            { id = 'c_talisman' },\n            { id = 'j_egg' },\n            { id = 'j_matador' },\n            { id = 'j_midas_mask' },\n            { id = 'j_golden' },\n            { id = 'j_delayed_grat' },\n            { id = 'j_business' },\n            { id = 'j_faceless' },\n            { id = 'j_todo_list' },\n            { id = 'j_cloud_9' },\n            { id = 'j_rocket' },\n            { id = 'j_gift' },\n            { id = 'j_reserved_parking' },\n            { id = 'j_mail' },\n            { id = 'j_to_the_moon' },\n            { id = 'j_trading' },\n            { id = 'j_ticket' },\n            { id = 'j_rough_gem' },\n            { id = 'j_satellite' },\n            { id = 'j_mxms_bear' },\n            { id = 'j_mxms_employee' },\n            { id = 'j_mxms_fools_gold' },\n            { id = 'j_mxms_four_course_meal' },\n            { id = 'j_mxms_gambler' },\n            { id = 'j_mxms_hypeman' },\n            { id = 'j_mxms_jackpot' },\n            { id = 'j_mxms_jestcoin' },\n            { id = 'j_mxms_prospector' },\n            { id = 'j_mxms_severed_floor' },\n            { id = 'j_mxms_trashman' },\n            { id = 'c_mxms_capricorn' },\n            { id = 'c_mxms_aquarius' },\n            { id = 'v_seed_money' },\n            { id = 'v_money_tree' },\n        },\n        banned_tags = {\n            { id = 'tag_uncommon' },\n            { id = 'tag_rare' },\n            { id = 'tag_negative' },\n            { id = 'tag_foil' },\n            { id = 'tag_holo' },\n            { id = 'tag_polychrome' },\n            { id = 'tag_voucher' },\n            { id = 'tag_boss' },\n            { id = 'tag_standard' },\n            { id = 'tag_charm' },\n            { id = 'tag_meteor' },\n            { id = 'tag_buffoon' },\n            { id = 'tag_handy' },\n            { id = 'tag_garbage' },\n            { id = 'tag_ethereal' },\n            { id = 'tag_coupon' },\n            { id = 'tag_double' },\n            { id = 'tag_juggle' },\n            { id = 'tag_d_six' },\n            { id = 'tag_top_up' },\n            { id = 'tag_orbital' },\n            { id = 'tag_mxms_star' },\n        }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "killer",
      "atlas": null,
      "pos": null,
      "raw": "-- Zodiac Killer\n        key = 'killer',\n        rules = {\n            custom = {\n                { id = 'mxms_zodiac_killer' }\n            }\n        },\n        jokers = {},\n        restrictions = {\n            banned_cards = {\n                { id = 'p_mxms_horoscope_normal_1', ids = {\n                    'p_mxms_horoscope_normal_1', 'p_mxms_horoscope_normal_2',\n                    'p_mxms_horoscope_jumbo_1', 'p_mxms_horoscope_mega_1' }\n                },\n                { id = 'j_mxms_cheat_day' },\n                { id = 'j_mxms_letter' },\n                { id = 'j_mxms_nomai' },\n                { id = 'c_mxms_ophiucus' },\n            },\n            banned_tags = {\n                { id = 'tag_mxms_star' },\n            }\n        },\n        deck = {\n            type = 'Challenge Deck'\n        }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "love_and_war",
      "atlas": null,
      "pos": null,
      "raw": "key = 'love_and_war',\n    rules = {\n        custom = {\n            { id = 'mxms_deck_size_req', value = 1 }\n        }\n    },\n    jokers = {\n        { id = 'j_mxms_war', edition = 'negative', eternal = true }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "overgrowth",
      "atlas": null,
      "pos": null,
      "raw": "key = 'overgrowth',\n    rules = {\n        custom = {\n            { id = 'mxms_X_blind_scale', value = 8 }\n        }\n    },\n    jokers = {\n        { id = 'j_mxms_soil', edition = 'negative', eternal = true }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "p2w",
      "atlas": null,
      "pos": null,
      "raw": "key = 'p2w',\n    rules = {},\n    jokers = {\n        { id = 'j_mxms_power_creep', eternal = true }\n    },\n    restrictions = {\n        banned_cards = {\n            { id = 'c_fool' },\n            { id = 'c_magician' },\n            { id = 'c_high_priestess' },\n            { id = 'c_empress' },\n            { id = 'c_emperor' },\n            { id = 'c_heirophant' },\n            { id = 'c_lovers' },\n            { id = 'c_chariot' },\n            { id = 'c_justice' },\n            { id = 'c_hermit' },\n            { id = 'c_strength' },\n            { id = 'c_hanged_man' },\n            { id = 'c_death' },\n            { id = 'c_temperance' },\n            { id = 'c_devil' },\n            { id = 'c_tower' },\n            { id = 'c_star' },\n            { id = 'c_moon' },\n            { id = 'c_sun' },\n            { id = 'c_judgement' },\n            { id = 'c_world' },\n            { id = 'c_familiar' },\n            { id = 'c_grim' },\n            { id = 'c_incantation' },\n            { id = 'c_talisman' },\n            { id = 'c_wraith' },\n            { id = 'c_sigil' },\n            { id = 'c_ouija' },\n            { id = 'c_ectoplasm' },\n            { id = 'c_immolate' },\n            { id = 'c_ankh' },\n            { id = 'c_deja_vu' },\n            { id = 'c_hex' },\n            { id = 'c_trance' },\n            { id = 'c_medium' },\n            { id = 'c_cryptid' },\n            { id = 'c_soul' },\n            { id = 'c_black_hole' },\n            { id = 'c_mxms_capricorn' },\n            { id = 'c_mxms_aquarius' },\n            { id = 'c_mxms_pisces' },\n            { id = 'c_mxms_doppelganger' },\n            { id = 'c_mxms_immortality' },\n        },\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "picky",
      "atlas": null,
      "pos": null,
      "raw": "key = 'picky',\n    rules = {\n        custom = {\n            { id = 'mxms_picky' }\n        }\n    },\n    jokers = {},\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "square",
      "atlas": null,
      "pos": null,
      "raw": "key = 'square',\n    rules = {\n        custom = {\n            { id = 'mxms_highlight_limit', value = 4 }\n        }\n    },\n    jokers = {},\n    restrictions = {\n        banned_other = {\n            { id = 'bl_psychic', type = 'blind' }\n        }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "target_practice",
      "atlas": null,
      "pos": null,
      "raw": "key = 'target_practice',\n    rules = {\n        custom = {\n            { id = 'mxms_bullseye_requirement', value = 500 }\n        }\n    },\n    jokers = {\n        { id = 'j_mr_bones',      edition = 'negative' },\n        { id = 'j_mxms_bullseye', edition = 'negative', eternal = true }\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Challenge",
      "key": "thought",
      "atlas": null,
      "pos": null,
      "raw": "key = 'thought',\n    rules = {},\n    jokers = {\n        { id = 'j_mxms_schrodinger', eternal = true, edition = 'negative' },\n        { id = 'j_mxms_occam',       eternal = true },\n        { id = 'j_mxms_chekhov',     eternal = true },\n    },\n    deck = {\n        type = 'Challenge Deck'\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "aeon",
      "atlas": "Consumables",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 'aeon',\n    set = 'Tarot',\n    atlas = 'Consumables',\n    pos = {\n        x = 0,\n        y = 4\n    },\n    config = {\n        max_highlighted = 2,\n        mod_conv = 'm_mxms_footprint'\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS['mxms_footprint']\n        return { vars = { card.ability.max_highlighted, localize { type = 'name_text', set = 'Enhanced', key = card.ability.mod_conv } } }\n    end,\n    credit = {\n        art = \"SadCube\",\n        code = \"theAstra\",\n        concept = \"N/A\"\n    }",
      "config": {
        "max_highlighted": 2,
        "mod_conv": "m_mxms_footprint"
      },
      "ability": {
        "max_highlighted": 2,
        "mod_conv": "m_mxms_footprint"
      },
      "vars": [
        2,
        "localize { type = 'name_text'",
        "set = 'Enhanced'",
        "key = card.ability.mod_conv"
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "cancri",
      "atlas": "Consumables",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = 'cancri',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 7,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_f_double_triple',\n            mxms_exoplanet = true,\n            softlock = true\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, card)\n            return {\n                vars =\n                {\n                    G.GAME.hands[card.ability.hand_type].level,\n                    localize(card.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[card.ability.hand_type].l_mult,\n                    G.GAME.hands[card.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[card.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[card.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil,1.2)\n        end",
      "config": {
        "hand_type": "mxms_f_double_triple",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "ability": {
        "hand_type": "mxms_f_double_triple",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "vars": [
        null,
        "localize(card.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[card.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "corot",
      "atlas": "Consumables",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'corot',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 4,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_s_flush',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil,1.2)\n        end",
      "config": {
        "hand_type": "mxms_s_flush",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_s_flush",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "doppelganger",
      "atlas": "Consumables",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 'doppelganger',\n        set = 'Spectral',\n        atlas = 'Consumables',\n        pos = {\n            x = 0,\n            y = 3\n        },\n        cost = 4,\n        use = function(self, card, area, copier)\n            for k, v in pairs(G.mxms_horoscope.cards) do\n                v.config.center:succeed(v)\n            end\n        end,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        can_use = function(self, card)\n            if #G.mxms_horoscope.cards >= 1 then\n                return true\n            end\n            return false\n        end",
      "config": {
        "art": "Maxiss02",
        "code": "theAstra",
        "concept": "Maxiss02"
      },
      "ability": {
        "art": "Maxiss02",
        "code": "theAstra",
        "concept": "Maxiss02"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "gliese",
      "atlas": "Consumables",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'gliese',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 6,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_f_three_pair',\n            mxms_exoplanet = true,\n            softlock = true\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_f_three_pair",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "ability": {
        "hand_type": "mxms_f_three_pair",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "immortality",
      "atlas": "Consumables",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = 'immortality',\n    set = 'Spectral',\n    atlas = 'Consumables',\n    pos = {\n        x = 1,\n        y = 3\n    },\n    config = {\n        extra = 'mxms_black'\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_SEALS['mxms_black']\n    end,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    use = function(self, card, area, copier)\n        local conv_card = G.hand.highlighted[1]\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                play_sound('tarot1')\n                card:juice_up(0.3, 0.5)\n                return true\n            end\n        }))\n\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.1,\n            func = function()\n                conv_card:set_seal(card.ability.extra, nil, true)\n                return true\n            end\n        }))\n\n        delay(0.5)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.2,\n            func = function()\n                G.hand:unhighlight_all(); return true\n            end\n        }))\n    end,\n    can_use = function(self, card)\n        return #G.hand.highlighted == 1\n    end",
      "config": {
        "extra": "mxms_black"
      },
      "ability": {
        "extra": "mxms_black"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "kepler",
      "atlas": "Consumables",
      "pos": {
        "x": 10,
        "y": 0
      },
      "raw": "--Kepler\n        key = 'kepler',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 10,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_f_6oak',\n            mxms_exoplanet = true,\n            softlock = true\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_f_6oak",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "ability": {
        "hand_type": "mxms_f_6oak",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "microscopii",
      "atlas": "Consumables",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'microscopii',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 0,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_three_pair',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_three_pair",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_three_pair",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "pegasi",
      "atlas": "Consumables",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'pegasi',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 2,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_6oak',\n            mxms_exoplanet = true,\n            softlock = true\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_6oak",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "ability": {
        "hand_type": "mxms_6oak",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "phobetor",
      "atlas": "Consumables",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "key = 'phobetor',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 9,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_f_party',\n            mxms_exoplanet = true,\n            softlock = true\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_f_party",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "ability": {
        "hand_type": "mxms_f_party",
        "mxms_exoplanet": true,
        "softlock": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "poltergeist",
      "atlas": "Consumables",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'poltergeist',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 5,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_house_party',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_house_party",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_house_party",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "proxima",
      "atlas": "Consumables",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = 'proxima',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 8,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_s_straight_f',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_s_straight_f",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_s_straight_f",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "trappist",
      "atlas": "Consumables",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'trappist',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 3,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_s_straight',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_s_straight",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_s_straight",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "wasp",
      "atlas": "Consumables",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'wasp',\n        set = 'Planet',\n        atlas = 'Consumables',\n        pos = {\n            x = 1,\n            y = 0\n        },\n        config = {\n            hand_type = 'mxms_double_triple',\n            mxms_exoplanet = true,\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"N/A\"\n        },\n        cost = 4,\n        loc_vars = function(self, info_queue, center)\n            return {\n                vars =\n                {\n                    G.GAME.hands[center.ability.hand_type].level,\n                    localize(center.ability.hand_type, \"poker_hands\"),\n                    G.GAME.hands[center.ability.hand_type].l_mult,\n                    G.GAME.hands[center.ability.hand_type].l_chips,\n                    colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[center.ability.hand_type].level)])\n                    }\n                },\n            }\n        end,\n        in_pool = function(self, args)\n            if (G.GAME and G.GAME.starting_params.play_limit >= 6) then\n                return true\n            end\n\n            return false\n        end,\n        set_card_type_badge = function(self, card, badges)\n            badges[#badges + 1] = create_badge(localize('k_mxms_exoplanet'), get_type_colour(card.config.center, card), nil, 1.2)\n        end",
      "config": {
        "hand_type": "mxms_double_triple",
        "mxms_exoplanet": true
      },
      "ability": {
        "hand_type": "mxms_double_triple",
        "mxms_exoplanet": true
      },
      "vars": [
        null,
        "localize(center.ability.hand_type",
        "\"poker_hands\")",
        null,
        null,
        "colours = {\n                        (G.GAME.hands[center.ability.hand_type].level == 1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7",
        null
      ],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "6oak",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = '6oak',\n    mult = 18,\n    chips = 180,\n    l_mult = 4,\n    l_chips = 40,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 2 },\n    example = {\n\n        { 'S_K', true },\n        { 'D_K', true },\n        { 'C_K', true },\n        { 'H_K', true },\n        { 'S_K', true },\n        { 'D_K', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return next(parts.mxms_6) and parts.mxms_6 or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "double_triple",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'double_triple',\n    mult = 6,\n    chips = 60,\n    l_mult = 2,\n    l_chips = 35,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 1 },\n    example = {\n\n        { 'S_K', true },\n        { 'D_K', true },\n        { 'C_K', true },\n        { 'S_9', true },\n        { 'D_9', true },\n        { 'C_9', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return #parts._3 >= 2 and parts._all_pairs or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "f_6oak",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 10
      },
      "raw": "key = 'f_6oak',\n    mult = 22,\n    chips = 220,\n    l_mult = 5,\n    l_chips = 50,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 10 },\n    example = {\n\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_K', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return next(parts.mxms_6) and next(parts.mxms_s_flush)\n            and { SMODS.merge_lists(parts.mxms_6, parts.mxms_s_flush) } or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "f_double_triple",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 7
      },
      "raw": "key = 'f_double_triple',\n    mult = 16,\n    chips = 170,\n    l_mult = 4,\n    l_chips = 50,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 7 },\n    example = {\n\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_9', true },\n        { 'S_9', true },\n        { 'S_9', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return #parts._3 >= 2 and next(parts.mxms_s_flush)\n            and { SMODS.merge_lists(parts._all_pairs, parts.mxms_s_flush) } or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "f_party",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 9
      },
      "raw": "key = 'f_party',\n    mult = 16,\n    chips = 180,\n    l_mult = 4,\n    l_chips = 50,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 9 },\n    example = {\n\n        { 'S_A', true },\n        { 'S_A', true },\n        { 'S_A', true },\n        { 'S_A', true },\n        { 'S_T', true },\n        { 'S_T', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        if #parts._4 < 1 or #parts._2 < 2 then return {} end\n        return #hand >= 6 and next(parts._2) and next(parts._4) and next(parts.mxms_s_flush)\n            and { SMODS.merge_lists(parts._all_pairs, parts.mxms_s_flush) } or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "f_three_pair",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 6
      },
      "raw": "key = 'f_three_pair',\n    mult = 14,\n    chips = 150,\n    l_mult = 3,\n    l_chips = 30,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 6 },\n    example = {\n\n        { 'S_K', true },\n        { 'S_K', true },\n        { 'S_9', true },\n        { 'S_9', true },\n        { 'S_6', true },\n        { 'S_6', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return #parts._2 == 3 and next(parts.mxms_s_flush) and\n            { SMODS.merge_lists(parts._all_pairs, parts.mxms_s_flush) } or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "house_party",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 5
      },
      "raw": "key = 'house_party',\n    mult = 8,\n    chips = 70,\n    l_mult = 3,\n    l_chips = 40,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 5 },\n    example = {\n\n        { 'S_A', true },\n        { 'D_A', true },\n        { 'C_A', true },\n        { 'H_A', true },\n        { 'S_T', true },\n        { 'D_T', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        if #parts._4 < 1 or #parts._2 < 2 then return {} end\n        return #hand >= 6 and next(parts._2) and next(parts._4) and\n            { SMODS.merge_lists(parts._all_pairs) } or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHandPart",
      "key": "6",
      "atlas": null,
      "pos": null,
      "raw": "key = '6',\n    func = function(hand)\n        return get_X_same(6, hand)\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHandPart",
      "key": "s_flush",
      "atlas": null,
      "pos": null,
      "raw": "key = 's_flush',\n    func = function(hand)\n        if G.STAGE == G.STAGES.RUN and G.hand.config.highlighted_limit >= 6 then\n\n            if next(SMODS.find_card('j_mxms_golden_rings')) then\n                local all_enhanced = true\n                local rings_ret = {}\n                local rings_table = {}\n                for i = 1, #hand do\n                    if not next(SMODS.get_enhancements(hand[i])) then all_enhanced = false end\n                    rings_table[#rings_table + 1] = hand[i]\n                end\n                if all_enhanced and #hand >= (6 - (next(find_joker('Four Fingers')) and 1 or 0)) then\n                    table.insert(rings_ret, rings_table)\n                    return rings_ret\n                end\n            end\n\n            local ret = {}\n            local four_fingers = next(find_joker('Four Fingers'))\n            local suits = SMODS.Suit.obj_buffer\n            if #hand < (6 - (four_fingers and 1 or 0)) then\n                return ret\n            else\n                for j = 1, #suits do\n                    local t = {}\n                    local suit = suits[j]\n                    local flush_count = 0\n                    for i = 1, #hand do\n                        if hand[i]:is_suit(suit, nil, true) then\n                            flush_count = flush_count + 1; t[#t + 1] = hand[i]\n                        end\n                    end\n                    if flush_count >= (6 - (four_fingers and 1 or 0)) then\n                        table.insert(ret, t)\n                        return ret\n                    end\n                end\n                return {}\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHandPart",
      "key": "s_straight",
      "atlas": null,
      "pos": null,
      "raw": "key = 's_straight',\n    func = function(hand)\n        if G.STAGE == G.STAGES.RUN and G.hand.config.highlighted_limit >= 6 then\n            return get_straight(hand, next(SMODS.find_card('j_four_fingers')) and 5 or 6, not not next(SMODS.find_card('j_shortcut')))\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "s_flush",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 's_flush',\n    mult = 6,\n    chips = 55,\n    l_mult = 2,\n    l_chips = 25,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 4 },\n    example = {\n\n        { 'S_A', true },\n        { 'S_K', true },\n        { 'S_J', true },\n        { 'S_8', true },\n        { 'S_6', true },\n        { 'S_2', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return next(parts.mxms_s_flush) and parts.mxms_s_flush or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "s_straight",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 's_straight',\n    mult = 6,\n    chips = 50,\n    l_mult = 3,\n    l_chips = 50,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 3 },\n    example = {\n\n        { 'S_A', true },\n        { 'D_K', true },\n        { 'C_Q', true },\n        { 'H_J', true },\n        { 'S_T', true },\n        { 'D_9', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return next(parts.mxms_s_straight) and parts.mxms_s_straight or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "s_straight_f",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 8
      },
      "raw": "key = 's_straight_f',\n    mult = 20,\n    chips = 200,\n    l_mult = 5,\n    l_chips = 55,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 8 },\n    example = {\n\n        { 'S_A', true },\n        { 'S_K', true },\n        { 'S_Q', true },\n        { 'S_J', true },\n        { 'S_T', true },\n        { 'S_9', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return next(parts.mxms_s_straight) and next(parts.mxms_s_flush)\n            and { SMODS.merge_lists(parts.mxms_s_straight, parts.mxms_s_flush) } or {}\n    end,\n    modify_display_text = function(self, cards, scoring_hand)\n        local royal = true\n        for i = 1, #scoring_hand do\n            local rank = SMODS.Ranks[scoring_hand[i].base.value]\n            royal = royal and (rank.key == 'Ace' or rank.key == '10' or rank.key == '9' or rank.face)\n        end\n        if royal then\n            return 'mxms_super_royal'\n        else\n            return 'mxms_s_straight_f'\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "PokerHand",
      "key": "three_pair",
      "atlas": "poker_hands",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'three_pair',\n    mult = 4,\n    chips = 30,\n    l_mult = 1,\n    l_chips = 25,\n    atlas = 'poker_hands',\n    pos = { x = 0, y = 0 },\n    example = {\n\n        { 'S_K', true },\n        { 'D_K', true },\n        { 'S_9', true },\n        { 'D_9', true },\n        { 'S_6', true },\n        { 'D_6', true }\n\n    },\n    visible = false,\n    evaluate = function(parts, hand)\n        return #parts._2 >= 3 and parts._all_pairs or {}\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "aquarius",
      "atlas": "Consumables",
      "pos": {
        "x": 10,
        "y": 1
      },
      "raw": "key = 'aquarius',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 10,\n        y = 1\n    },\n    config = {\n        extra = {\n            tally = 0,\n            goal = 10\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_black_hole\n        return { vars = { stg.goal, stg.tally } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.using_consumeable and context.consumeable.ability.set == \"Planet\" then\n            stg.tally = stg.tally + 1\n            SMODS.calculate_effect({ message = stg.tally .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n\n            if stg.tally >= stg.goal then\n                self:succeed(card)\n            end\n        end\n\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind.boss then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Aquarius\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n            SMODS.calculate_effect(\n                {\n                    message = localize('k_mxms_success_ex'),\n                    colour = G.C.GREEN,\n                    sound = 'tarot1',\n                    func = function()\n                        set_horoscope_success(card)\n                        check_for_unlock({ type = \"all_horoscopes\" })\n                        if TheFamily then G.GAME.horoscope_alert = true end\n                    end\n                }, card)\n            G.E_MANAGER:add_event(Event({\n                trigger = 'before',\n                func = function()\n                    play_sound('tarot1')\n                    card:juice_up(0.3, 0.4)\n\n                    SMODS.add_card({\n                        set = 'Spectral',\n                        key = 'c_black_hole',\n                        key_append = 'aqu'\n                    })\n                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer - 1\n                    return true;\n                end\n            }))\n            zodiac_killer_pools[\"Aquarius\"] = false\n            SMODS.calculate_context({ mxms_beat_horoscope = true })\n        end\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            },\n            card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.tally = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {
        "extra": {
          "tally": 0,
          "goal": 10
        }
      },
      "ability": {
        "extra": {
          "tally": 0,
          "goal": 10
        }
      },
      "vars": [
        10,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "aries",
      "atlas": "Consumables",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'aries',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_TAGS['tag_mxms_ram']\n    end,\n    calculate = function(self, card, context)\n        if (context.joker_main or context.debuffed_hand) and G.GAME.blind.triggered then\n            self:succeed(card)\n        end\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind.boss then\n            self:fail(card)\n        end\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Aries\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            func = (function()\n                add_tag(Tag('tag_mxms_ram'))\n                play_sound('generic1', 0.9 + math.random() * 0.1, 0.8)\n                play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)\n                return true\n            end)\n        }))\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Aries\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "cancer",
      "atlas": "Consumables",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'cancer',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 3,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_TAGS['tag_mxms_crab']\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition then\n            if G.GAME.current_round.hands_left == 0 then\n                self:succeed(card)\n            else\n                self:fail(card)\n            end\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Cancer\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            func = (function()\n                add_tag(Tag('tag_mxms_crab'))\n                play_sound('generic1', 0.9 + math.random() * 0.1, 0.8)\n                play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)\n                return true\n            end)\n        }))\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Cancer\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "capricorn",
      "atlas": "Consumables",
      "pos": {
        "x": 9,
        "y": 1
      },
      "raw": "key = 'capricorn',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 9,\n        y = 1\n    },\n    config = {\n        extra = {\n            tally = 0,\n            goal = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_immolate\n        return { vars = { stg.goal, stg.tally } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.remove_playing_cards then\n            stg.tally = stg.tally + #context.removed\n            SMODS.calculate_effect({ message = stg.tally .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n\n            if stg.tally >= stg.goal then\n                self:succeed(card)\n            end\n        end\n\n        if context.cards_destroyed then\n            stg.tally = stg.tally + #context.glass_shattered\n            SMODS.calculate_effect({ message = stg.tally .. \"/3\", colour = Maximus.C.HOROSCOPE }, card)\n\n            if stg.tally == 3 then\n                self:succeed(card)\n            end\n        end\n\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind.boss then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Capricorn\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n            SMODS.calculate_effect(\n                {\n                    message = localize('k_mxms_success_ex'),\n                    colour = G.C.GREEN,\n                    sound = 'tarot1',\n                    func = function()\n                        set_horoscope_success(card)\n                        check_for_unlock({ type = \"all_horoscopes\" })\n                        if TheFamily then G.GAME.horoscope_alert = true end\n                    end\n                }, card)\n            G.E_MANAGER:add_event(Event({\n                trigger = 'before',\n                func = function()\n                    play_sound('tarot1')\n                    card:juice_up(0.3, 0.4)\n\n                    SMODS.add_card({\n                        set = 'Spectral',\n                        key = 'c_immolate',\n                        key_append = 'cap'\n                    })\n                    return true;\n                end\n            }))\n        end\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Capricorn\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.tally = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {
        "extra": {
          "tally": 0,
          "goal": 3
        }
      },
      "ability": {
        "extra": {
          "tally": 0,
          "goal": 3
        }
      },
      "vars": [
        3,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "gemini",
      "atlas": "Consumables",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'gemini',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 2,\n        y = 1\n    },\n    config = {\n        hands = {\n            [\"Flush Five\"] = false,\n            [\"Flush House\"] = false,\n            [\"Five of a Kind\"] = false,\n            [\"Straight Flush\"] = false,\n            [\"Four of a Kind\"] = false,\n            [\"Full House\"] = false,\n            [\"Flush\"] = false,\n            [\"Straight\"] = false,\n            [\"Three of a Kind\"] = false,\n            [\"Two Pair\"] = false,\n            [\"Pair\"] = false,\n            [\"High Card\"] = false,\n        },\n        extra = {\n            times = 0,\n            goal = 3,\n            upgrade = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.goal, stg.upgrade, stg.times } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before then\n            if card.ability.hands[context.scoring_name] then\n                self:fail(card)\n            else\n                card.ability.hands[context.scoring_name] = true\n                stg.times = stg.times + 1\n                SMODS.calculate_effect({ message = stg.times .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n            end\n\n            if stg.times == stg.goal then\n                self:succeed(card, context)\n            end\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Gemini\"]\n        end\n        return true\n    end,\n    succeed = function(self, card, context)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        for k, v in pairs(card.ability.hands) do\n            if v then\n                SMODS.smart_level_up_hand(card, k, false, stg.upgrade)\n            end\n        end\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Gemini\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.times = 0\n            card.ability.hands = {\n                [\"Flush Five\"] = false,\n                [\"Flush House\"] = false,\n                [\"Five of a Kind\"] = false,\n                [\"Straight Flush\"] = false,\n                [\"Four of a Kind\"] = false,\n                [\"Full House\"] = false,\n                [\"Flush\"] = false,\n                [\"Straight\"] = false,\n                [\"Three of a Kind\"] = false,\n                [\"Two Pair\"] = false,\n                [\"Pair\"] = false,\n                [\"High Card\"] = false,\n\n            }\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "leo",
      "atlas": "Consumables",
      "pos": {
        "x": 4,
        "y": 1
      },
      "raw": "key = 'leo',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 4,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_TAGS['tag_mxms_lion']\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition then\n            self:succeed(card)\n        end\n        if context.before and G.GAME.current_round.hands_left ~= G.GAME.round_resets.hands - 1 then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Leo\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            func = (function()\n                add_tag(Tag('tag_mxms_lion'))\n                play_sound('generic1', 0.9 + math.random() * 0.1, 0.8)\n                play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)\n                return true\n            end)\n        }))\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Leo\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "libra",
      "atlas": "Consumables",
      "pos": {
        "x": 6,
        "y": 1
      },
      "raw": "key = 'libra',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 6,\n        y = 1\n    },\n    config = {\n        extra = {\n            money_spent = 0,\n            goal = 15\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_TAGS['tag_mxms_scale']\n        return { vars = { stg.goal, stg.money_spent } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.buying_card or context.open_booster or context.reroll_shop then\n            if context.buying_card or context.open_booster then\n                stg.money_spent = stg.money_spent + context.card.cost\n            elseif context.reroll_shop then\n                stg.money_spent = stg.money_spent + context.cost\n            end\n\n            SMODS.calculate_effect({ message = stg.money_spent .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE },\n                card)\n\n            if stg.money_spent >= stg.goal then\n                self:succeed(card)\n            end\n        end\n\n        if context.ending_shop then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Libra\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            func = (function()\n                add_tag(Tag('tag_mxms_scale'))\n                play_sound('generic1', 0.9 + math.random() * 0.1, 0.8)\n                play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)\n                return true\n            end)\n        }))\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Libra\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.money_spent = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {
        "extra": {
          "money_spent": 0,
          "goal": 15
        }
      },
      "ability": {
        "extra": {
          "money_spent": 0,
          "goal": 15
        }
      },
      "vars": [
        15,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "ophiucus",
      "atlas": "Consumables",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'ophiucus',\n    set = 'Spectral',\n    atlas = 'Consumables',\n    pos = {\n        x = 1,\n        y = 2\n    },\n    config = {\n        hands = {\n            [\"Straight Flush\"] = false,\n            [\"Four of a Kind\"] = false,\n            [\"Full House\"] = false,\n            [\"Flush\"] = false,\n            [\"Straight\"] = false,\n            [\"Three of a Kind\"] = false,\n            [\"Two Pair\"] = false,\n            [\"Pair\"] = false,\n            [\"High Card\"] = false,\n        },\n        extra = {\n            antes = 0,\n            ante_limit = 2,\n            handtypes_played = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    hidden = true,\n    soul_set = 'Horoscope',\n    soul_rate = 0.003,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_soul\n        return { vars = { stg.extra.handtypes_played, stg.extra.ante_limit } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability\n        if context.before and not stg.hands[context.scoring_name] then\n            stg.hands[context.scoring_name] = true\n            stg.extra.handtypes_played = stg.extra.handtypes_played + 1\n            SMODS.calculate_effect({ message = stg.extra.handtypes_played .. \"/9\", colour = Maximus.C.HOROSCOPE }, card)\n\n            local all_hands = true\n            for k, v in pairs(stg.hands) do\n                if not v then\n                    all_hands = false\n                    break\n                end\n            end\n            if all_hands then\n                self:succeed(card)\n            end\n        end\n\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind.boss then\n            stg.extra.antes = stg.extra.antes + 1\n            if stg.extra.antes >= stg.extra.ante_limit then\n                self:fail(card)\n            else\n                SMODS.calculate_effect(\n                    { message = stg.extra.ante_limit - stg.extra.antes .. \" Ante Left...\", colour = Maximus.C.HOROSCOPE },\n                    card)\n            end\n        end\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'before',\n            func = function()\n                play_sound('tarot1')\n                card:juice_up(0.3, 0.4)\n\n                SMODS.add_card({\n                    set = 'Spectral',\n                    key = 'c_soul',\n                    edition = 'e_negative',\n                    key_append = 'oph'\n                })\n                return true;\n            end\n        }))\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n    end,\n    fail = function(self, card)\n        local stg = card.ability\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.hands = {\n                [\"Straight Flush\"] = false,\n                [\"Four of a Kind\"] = false,\n                [\"Full House\"] = false,\n                [\"Flush\"] = false,\n                [\"Straight\"] = false,\n                [\"Three of a Kind\"] = false,\n                [\"Two Pair\"] = false,\n                [\"Pair\"] = false,\n                [\"High Card\"] = false,\n            }\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability\n        stg.hands = {\n            [\"Straight Flush\"] = false,\n            [\"Four of a Kind\"] = false,\n            [\"Full House\"] = false,\n            [\"Flush\"] = false,\n            [\"Straight\"] = false,\n            [\"Three of a Kind\"] = false,\n            [\"Two Pair\"] = false,\n            [\"Pair\"] = false,\n            [\"High Card\"] = false,\n        }\n    end,\n    set_badges = function(self, card, badges)\n        if self.discovered then\n            badges[#badges + 1] = create_badge(localize('k_horoscope'), Maximus.C.SET.Horoscope, G.C.WHITE, 1.2)\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "pisces",
      "atlas": "Consumables",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'pisces',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 0,\n        y = 2\n    },\n    config = {\n        extra = {\n            tally = 0,\n            goal = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.goal, stg.tally } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.using_consumeable and context.consumeable.ability.set == \"Tarot\" then\n            stg.tally = stg.tally + 1\n            SMODS.calculate_effect({ message = stg.tally .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n\n            if stg.tally >= stg.goal then\n                self:succeed(card)\n            end\n        end\n\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind.boss then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Pisces\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n            SMODS.calculate_effect(\n                {\n                    message = localize('k_mxms_success_ex'),\n                    colour = G.C.GREEN,\n                    sound = 'tarot1',\n                    func = function()\n                        set_horoscope_success(card)\n                        check_for_unlock({ type = \"all_horoscopes\" })\n                        if TheFamily then G.GAME.horoscope_alert = true end\n                    end\n                }, card)\n            G.E_MANAGER:add_event(Event({\n                trigger = 'before',\n                func = function()\n                    play_sound('tarot1')\n                    card:juice_up(0.3, 0.4)\n\n                    SMODS.add_card({\n                        set = 'Spectral',\n                        key_append = 'pis'\n                    })\n                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer - 1\n                    return true;\n                end\n            }))\n        end\n        G.E_MANAGER:add_event(Event({\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Pisces\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.tally = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {
        "extra": {
          "tally": 0,
          "goal": 5
        }
      },
      "ability": {
        "extra": {
          "tally": 0,
          "goal": 5
        }
      },
      "vars": [
        5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "sagittarius",
      "atlas": "Consumables",
      "pos": {
        "x": 8,
        "y": 1
      },
      "raw": "key = 'sagittarius',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 8,\n        y = 1\n    },\n    cost = 4,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition then\n            self:succeed(card)\n        end\n        if context.pre_discard then\n            self:fail(card)\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Sagittarius\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        G.GAME.mxms_sagittarius_bonus = true\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Sagittarius\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "scorpio",
      "atlas": "Consumables",
      "pos": {
        "x": 7,
        "y": 1
      },
      "raw": "key = 'scorpio',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 7,\n        y = 1\n    },\n    config = {\n        extra = {\n            hands = 0,\n            goal = 4,\n            upgrade = 5,\n            most_played_hand = 'High Card'\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        if G.GAME.hands then\n            local _handname, _played, _order = 'High Card', -1, 100\n            for k, v in pairs(G.GAME.hands) do\n                if v.played > _played or (v.played == _played and _order > v.order) then\n                    _played = v.played\n                    _handname = k\n                end\n            end\n            stg.most_played_hand = _handname\n        end\n\n        return { vars = { stg.goal, stg.upgrade, stg.hands } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before then\n            local _handname, _played, _order = 'High Card', -1, 100\n            for k, v in pairs(G.GAME.hands) do\n                if v.played > _played or (v.played == _played and _order > v.order) then\n                    _played = v.played\n                    _handname = k\n                end\n            end\n            stg.most_played_hand = _handname\n\n            if stg.most_played_hand == context.scoring_name then\n                self:fail(card)\n            else\n                stg.hands = stg.hands + 1\n                SMODS.calculate_effect({ message = stg.hands .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n\n                if stg.hands >= stg.goal then\n                    self:succeed(card, context)\n                end\n            end\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Scorpio\"]\n        end\n        return true\n    end,\n    succeed = function(self, card, context)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        SMODS.smart_level_up_hand(card, stg.most_played_hand, false, stg.upgrade)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Scorpio\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.hands = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {
        "extra": {
          "hands": 0,
          "goal": 4,
          "upgrade": 5,
          "most_played_hand": "High Card"
        }
      },
      "ability": {
        "extra": {
          "hands": 0,
          "goal": 4,
          "upgrade": 5,
          "most_played_hand": "High Card"
        }
      },
      "vars": [
        4,
        5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "taurus",
      "atlas": "Consumables",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'taurus',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 1,\n        y = 1\n    },\n    config = {\n        extra = {\n            hand_type = nil,\n            times = 0,\n            goal = 3,\n            upgrade = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.goal, stg.upgrade, stg.times } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before then\n            if not stg.hand_type then\n                stg.hand_type = context.scoring_name\n                stg.times = stg.times + 1\n                SMODS.calculate_effect({ message = stg.times .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n            elseif stg.hand_type == context.scoring_name then\n                stg.times = stg.times + 1\n                SMODS.calculate_effect({ message = stg.times .. \"/\" .. stg.goal, colour = Maximus.C.HOROSCOPE }, card)\n            else\n                self:fail(card)\n            end\n\n            if stg.times == stg.goal then\n                self:succeed(card, context)\n            end\n\n            if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.2,\n                    func = function()\n                        G.STATE = G.STATES.GAME_OVER\n                        if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                            G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                        end\n                        G:save_settings()\n                        G.FILE_HANDLER.force = true\n                        G.STATE_COMPLETE = false\n                        return true\n                    end\n                }))\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Taurus\"]\n        end\n        return true\n    end,\n    succeed = function(self, card, context)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        SMODS.smart_level_up_hand(card, stg.hand_type, false, stg.upgrade)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Taurus\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        local stg = card.ability.extra\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        else\n            stg.times = 0\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Consumable",
      "key": "virgo",
      "atlas": "Consumables",
      "pos": {
        "x": 5,
        "y": 1
      },
      "raw": "key = 'virgo',\n    set = 'Horoscope',\n    atlas = 'Consumables',\n    pos = {\n        x = 5,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_TAGS['tag_mxms_maiden']\n        local ceiling = G.GAME.blind and to_big(G.GAME.blind.chips) * 1.25 or 0\n        return { vars = { ceiling } }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition then\n            if to_big(G.GAME.blind.chips) / to_big(G.GAME.chips) >= to_big(0.75) then\n                self:succeed(card)\n            else\n                self:fail(card)\n            end\n        end\n\n        if context.selling_self and G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            return zodiac_killer_pools[\"Virgo\"]\n        end\n        return true\n    end,\n    succeed = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_success_ex'),\n                colour = G.C.GREEN,\n                sound = 'tarot1',\n                func = function()\n                    set_horoscope_success(card)\n                    check_for_unlock({ type = \"all_horoscopes\" })\n                    if TheFamily then G.GAME.horoscope_alert = true end\n                end\n            }, card)\n        G.E_MANAGER:add_event(Event({\n            func = (function()\n                add_tag(Tag('tag_mxms_maiden'))\n                play_sound('generic1', 0.9 + math.random() * 0.1, 0.8)\n                play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)\n                return true\n            end)\n        }))\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            func = function()\n                card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                return true\n            end\n        }))\n        zodiac_killer_pools[\"Virgo\"] = false\n        SMODS.calculate_context({ mxms_beat_horoscope = true })\n    end,\n    fail = function(self, card)\n        SMODS.calculate_effect(\n            {\n                message = localize('k_mxms_failed_ex'),\n                colour = G.C.RED,\n                sound = 'tarot2',\n                func = function() if TheFamily then G.GAME.horoscope_alert = true end end\n            }, card)\n        if not next(SMODS.find_card('j_mxms_cheat_day')) then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:start_dissolve({ Maximus.C.HOROSCOPE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n        if G.GAME.modifiers.mxms_zodiac_killer then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    G.STATE = G.STATES.GAME_OVER\n                    if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then\n                        G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0\n                    end\n                    G:save_settings()\n                    G.FILE_HANDLER.force = true\n                    G.STATE_COMPLETE = false\n                    return true\n                end\n            }))\n        end\n        SMODS.calculate_context({ mxms_failed_horoscope = true })\n    end",
      "config": {},
      "ability": {},
      "vars": [
        "ceiling"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "4d",
      "atlas": "4D",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = '4d',\n    atlas = '4D',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    soul_pos = {\n        x = 1,\n        y = 7\n    },\n    rarity = 2,\n    perishable_compat = false,\n    eternal_compat = false,\n    blueprint_compat = true,\n    cost = 6,\n    config = {\n        extra = {\n            Xmult = 4,\n            dXmult = 0.01\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.dXmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult,\n            }\n        end\n\n        if stg.Xmult <= 1 and not context.blueprint then\n            card:start_dissolve({ G.C.BLUE }, nil, 1.6)\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 4,
          "dXmult": 0.01
        }
      },
      "ability": {
        "extra": {
          "Xmult": 4,
          "dXmult": 0.01
        }
      },
      "vars": [
        4,
        0.01
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "abyss",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'abyss',\n    atlas = 'Jokers',\n    rarity = 3,\n    pos = {\n        x = 2,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 9,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.e_negative\n    end,\n    calculate = function(self, card, context)\n        if context.setting_blind then\n            -- Store all eligible jokers in table\n            -- Code derived Madness\n            local eligible_jokers = {}\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] ~= card and not SMODS.is_eternal(G.jokers.cards[i])and\n                    not (G.jokers.cards[i].edition and G.jokers.cards[i].edition.negative) and\n                    not G.jokers.cards[i].getting_sliced then\n                    eligible_jokers[#eligible_jokers + 1] = G.jokers.cards[i]\n                end\n            end\n\n            -- Fail if no held jokers are eligible\n            if not next(eligible_jokers) then\n                return {\n                    message = localize('k_mxms_no_target_el'),\n                    colour = G.C.PURPLE\n                }\n            else\n                -- Choose Joker to affect\n                local chosen_joker = pseudorandom_element(eligible_jokers,\n                    pseudoseed('abyss' .. G.GAME.round_resets.ante))\n\n                -- \"Flip a coin\" to decide what to do with the target\n                local flip = pseudorandom(pseudoseed('aby' .. G.GAME.round_resets.ante), 1, 2)\n\n                -- Add negative edition to random held joker\n                if flip == 1 then\n                    (context.blueprint_card or card):juice_up(0.3, 0.4)\n                    chosen_joker:set_edition({ negative = true }, true)\n                    return {\n                        message = localize('k_mxms_void_touched_ex'),\n                        colour = G.C.PURPLE\n                    }\n\n                    -- Destroy a random non-negative joker\n                elseif flip == 2 then\n                    -- Double check the target is not self\n                    -- Code derived Madness\n                    if chosen_joker and not (context.blueprint_card or card).getting_sliced then\n                        chosen_joker.getting_sliced = true\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                (context.blueprint_card or card):juice_up(0.8, 0.8)\n                                chosen_joker:start_dissolve({ G.C.PURPLE }, nil, 1.6)\n                                return true;\n                            end\n                        }))\n                    end\n                    return {\n                        message = localize('k_mxms_consumed'),\n                        colour = G.C.PURPLE\n                    }\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "abyss_angel",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 13
      },
      "raw": "key = 'abyss_angel',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 13\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            gain = 0.25,\n            target_chips = 200,\n            accrued_chips = 0,\n            Xmult = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain, stg.target_chips, stg.accrued_chips, stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and context.cardarea == G.play and not context.blueprint then\n            stg.accrued_chips = stg.accrued_chips + context.other_card:get_chip_bonus()\n            return {\n                message = stg.accrued_chips .. '/' .. stg.target_chips,\n                colour = G.C.CHIPS,\n                message_card = card,\n                func = function()\n                    if stg.accrued_chips >= stg.target_chips then\n                        stg.accrued_chips = stg.accrued_chips - stg.target_chips\n                        stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                        SMODS.calculate_effect({ message = localize('k_upgrade_ex'), colour = G.C.attention }, card)\n                        SMODS.calculate_context({ mxms_scaling_card = true })\n                    end\n                end\n            }\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.25,
          "target_chips": 200,
          "accrued_chips": 0,
          "Xmult": 1
        }
      },
      "ability": {
        "extra": {
          "gain": 0.25,
          "target_chips": 200,
          "accrued_chips": 0,
          "Xmult": 1
        }
      },
      "vars": [
        0.25,
        200,
        0,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bankrupt",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 16
      },
      "raw": "key = 'bankrupt',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 16\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            gain = 10,\n            mult = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_wheel_of_fortune\n        return {\n            vars = { stg.gain, stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.pseudorandom_result and not context.result and context.identifier == 'wheel_of_fortune' and not context.blueprint then\n            stg.mult = stg.mult + stg.gain * G.GAME.mxms_soil_mod\n            return {\n                message = localize { type = 'variable', key = 'a_mult', vars = { stg.mult } },\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n\n        if context.joker_main then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 10,
          "mult": 0
        }
      },
      "ability": {
        "extra": {
          "gain": 10,
          "mult": 0
        }
      },
      "vars": [
        10,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bear",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 14
      },
      "raw": "key = 'bear',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 14\n    },\n    rarity = 1,\n    blueprint_compat = true,\n    cost = 4,\n    config = {\n        extra = {\n            gain = 0.5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        local xmult = 1\n\n        if to_big(G.GAME.dollars) < to_big(0) then\n            xmult = xmult + (math.abs(G.GAME.dollars) * stg.gain)\n        end\n\n        return {\n            vars = { stg.gain, xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and to_big(G.GAME.dollars) < to_big(0) then\n            return {\n                x_mult = 1 + math.abs(G.GAME.dollars) * stg.gain\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.5
        }
      },
      "ability": {
        "extra": {
          "gain": 0.5
        }
      },
      "vars": [
        0.5,
        "xmult"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bell_curve",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 3
      },
      "raw": "key = 'bell_curve',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 3\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local calc = 3\n        if G.playing_cards ~= nil then\n            calc = 2 * math.exp(-(((#G.playing_cards - 52) ^ 2) / 250)) + 1\n        end\n        return {\n            vars = { calc }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            stg.Xmult = 2 * math.exp(-(((#G.playing_cards - 52) ^ 2) / 250)) + 1\n            return {\n                x_mult = stg.Xmult,\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 3
        }
      },
      "ability": {
        "extra": {
          "Xmult": 3
        }
      },
      "vars": [
        "calc"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "blackjack",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 16
      },
      "raw": "key = 'blackjack',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 16\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain_norm = 0.1,\n            gain_best = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain_norm, stg.gain_best, stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before and not context.blueprint then\n            local hand_value = 0\n            for k, v in pairs(context.scoring_hand) do\n                local card_value = v:get_id()\n                if card_value > 0 then\n                    if card_value > 10 then\n                        if v:is_face() then\n                            card_value = 10\n                        else\n                            card_value = 11\n                        end\n                    end\n                    hand_value = hand_value + card_value\n                end\n            end\n\n            if hand_value > 21 and stg.Xmult > 1 then\n                stg.Xmult = 1\n                return {\n                    message = localize('k_mxms_bust_ex'),\n                    colour = G.C.RED\n                }\n            elseif hand_value == 21 then\n                stg.Xmult = stg.Xmult + stg.gain_best\n                return {\n                    message = localize('k_mxms_blackjack_ex'),\n                    colour = G.C.GREEN\n                }\n            else\n                stg.Xmult = stg.Xmult + stg.gain_norm\n                return {\n                    message = localize('k_upgrade_ex')\n                }\n            end\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain_norm": 0.1,
          "gain_best": 1
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain_norm": 0.1,
          "gain_best": 1
        }
      },
      "vars": [
        0.1,
        1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "boar_bank",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 17
      },
      "raw": "key = 'boar_bank',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 17\n    },\n    rarity = 1,\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 5",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bones_jr",
      "atlas": null,
      "pos": {
        "x": 3,
        "y": 4
      },
      "raw": "key = 'bones_jr',\n    pos = {\n        x = 3,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            extra_hands = 1\n        }\n    },\n    credit = {\n        art = \"LocalThunk\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        local hands = G.GAME.starting_params.hands\n        if not hands then\n            hands = 4\n        end\n\n        return {\n            vars = { hands, stg.extra_hands }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.after and not context.blueprint and\n            hand_chips * mult < G.GAME.blind.chips / G.GAME.starting_params.hands then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    G.hand_text_area.blind_chips:juice_up()\n                    G.hand_text_area.game_chips:juice_up()\n                    play_sound('tarot1')\n                    ease_hands_played(stg.extra_hands, true)\n                    card:start_dissolve()\n                    return true\n                end\n            }))\n            return {\n                message = localize('k_mxms_plus_hand'),\n                colour = G.C.BLUE\n            }\n        end\n    end,\n    set_ability = function(self, card, inital, delay_sprites)\n        if card.config.center.discovered or card.bypass_discovery_center then\n            local W, H = card.T.w, card.T.h\n            H = H * 0.7\n            W = W * 0.7\n            card.T.h = H\n            card.T.w = W\n        end\n    end,\n    load = function(self, card, card_table, other_card)\n        local W, H, scale = card.T.w, card.T.h, 1\n\n        card.T.h = H * scale * 0.7 * scale\n        card.T.w = W * scale * 0.7 * scale\n    end",
      "config": {
        "extra": {
          "extra_hands": 1
        }
      },
      "ability": {
        "extra": {
          "extra_hands": 1
        }
      },
      "vars": [
        "hands",
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bootleg",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 6
      },
      "raw": "key = 'bootleg',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 6\n    },\n    rarity = 3,\n    config = {},\n    blueprint_compat = true,\n    cost = 3,\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    loc_vars = function(self, info_queue, card)\n        if G.GAME.mxms_last_bought.card ~= nil then\n            local copied_key = G.GAME.mxms_last_bought.card.config.center.key\n            info_queue[#info_queue + 1] = G.P_CENTERS[copied_key]\n            return {\n                vars = { G.localization.descriptions.Joker[copied_key].name }\n            }\n        else\n            return {\n                vars = { localize('k_none') }\n            }\n        end\n    end,\n    calculate = function(self, card, context)\n        if G.GAME.mxms_last_bought.card and not context.no_blueprint then\n            context.blueprint = (context.blueprint and (context.blueprint + 1)) or 1\n            context.blueprint_card = context.blueprint_card or card\n            local bootleg_target_ret = G.GAME.mxms_last_bought.card:calculate_joker(context)\n            context.blueprint = nil\n            local eff_card = context.blueprint_card or card\n            context.blueprint_card = nil\n            if bootleg_target_ret then\n                bootleg_target_ret.card = eff_card\n                bootleg_target_ret.colour = G.C.YELLOW\n                return bootleg_target_ret\n            end\n        end\n\n        if context.buying_card and context.card.config.center.blueprint_compat\n            and (context.card ~= card or context.card.config.center.key ~= \"j_mxms_bootleg\") then\n            G.GAME.mxms_last_bought.card = context.card\n            card:juice_up(0.3, 0.4)\n            check_for_unlock({type = 'bootleg_copy', card = context.card.config.center.key})\n        end\n    end,\n    remove_from_deck = function(self, card, context)\n        if not next(SMODS.find_card('j_mxms_bootleg')) then\n            G.GAME.mxms_last_bought.card = nil\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "brainwashed",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 13
      },
      "raw": "key = 'brainwashed',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 13\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            prob = 1,\n            odds = 2\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'bwash') }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.after and SMODS.pseudorandom_probability(card, 'bwash', stg.prob, stg.odds) and next(context.poker_hands['Flush']) then\n            local valid_cards = {}\n            local flush_suit = G.play.cards[1].base.suit\n\n            for k, v in pairs(G.hand.cards) do\n                if not v:is_suit(flush_suit, true) then\n                    valid_cards[#valid_cards + 1] = v\n                end\n            end\n\n            if next(valid_cards) then\n                local chosen_card = pseudorandom_element(valid_cards, pseudoseed('bwash_card'))\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.3,\n                    func = function()\n                        (context.blueprint_card or card):juice_up(0.3, 0.4)\n                        play_sound('tarot1')\n                        delay(0.3)\n                        chosen_card:flip()\n                        play_sound('card1', 1.15)\n                        return true;\n                    end\n                }))\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.2,\n                    func = function()\n                        SMODS.change_base(chosen_card, flush_suit, nil)\n                        return true;\n                    end\n                }))\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.3,\n                    func = function()\n                        chosen_card:flip()\n                        play_sound('card1', 0.85)\n                        return true;\n                    end\n                }))\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 2
        }
      },
      "vars": [
        0,
        1,
        1,
        2,
        "'bwash')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "breadsticks",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 6
      },
      "raw": "key = 'breadsticks',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 6\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            d_requirement = 2,\n            d_tally = 0,\n            chips = 0,\n            dChips = 25\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 4,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.d_requirement, stg.chips, stg.dChips }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.discard and not context.blueprint and not context.other_card.debuff then\n            stg.d_tally = stg.d_tally + 1\n            if stg.d_tally < stg.d_requirement then\n                return {\n                    delay = 0.2,\n                    message = stg.d_tally .. '/' .. stg.d_requirement,\n                    colour = G.C.CHIPS,\n                    card = card\n                }\n            else\n                stg.chips = stg.chips + stg.dChips * G.GAME.mxms_soil_mod\n                stg.d_tally = 0\n                return {\n                    delay = 0.2,\n                    message = localize('k_upgrade_ex'),\n                    colour = G.C.CHIPS,\n                    card = card,\n                    func = function()\n                        SMODS.calculate_context({ mxms_scaling_card = true })\n                        G.GAME.mxms_breadstick_scales = G.GAME.mxms_breadstick_scales + 1\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                check_for_unlock({type = 'stuffed', scales = G.GAME.mxms_breadstick_scales})\n                                return true;\n                            end\n                        }))\n                    end\n                }\n            end\n        end\n\n        if context.joker_main and stg.chips > 0 then\n            return {\n                chips = stg.chips\n            }\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            stg.d_tally = 0\n            stg.chips = 0\n            stg.d_requirement = stg.d_requirement + 1\n            return {\n                message = localize('k_mxms_more_ex'),\n                colour = G.C.CHIPS,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "d_requirement": 2,
          "d_tally": 0,
          "chips": 0,
          "dChips": 25
        }
      },
      "ability": {
        "extra": {
          "d_requirement": 2,
          "d_tally": 0,
          "chips": 0,
          "dChips": 25
        }
      },
      "vars": [
        2,
        0,
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "brown",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 17
      },
      "raw": "key = 'brown',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 17\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            gain = 0.5,\n            Xmult = 1\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        if G.hand then\n            if G.GAME.starting_params.hand_size - G.hand.config.card_limit < 0 then\n                stg.Xmult = 1\n            else\n                stg.Xmult = stg.gain * (G.GAME.starting_params.hand_size - G.hand.config.card_limit) + 1\n            end\n        end\n\n        return {\n            vars = { stg.gain, G.GAME.starting_params.hand_size or 8, stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and stg.Xmult > 1 then\n            if G.GAME.starting_params.hand_size - G.hand.config.card_limit < 0 then\n                stg.Xmult = 1\n            else\n                stg.Xmult = stg.gain * (G.GAME.starting_params.hand_size - G.hand.config.card_limit) + 1\n            end\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.5,
          "Xmult": 1
        }
      },
      "ability": {
        "extra": {
          "gain": 0.5,
          "Xmult": 1
        }
      },
      "vars": [
        0.5,
        null,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "bullseye",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 2
      },
      "raw": "key = 'bullseye',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 2\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            chips = 0,\n            base_gain = 100\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        local gain = stg.base_gain * G.GAME.round\n        if gain < stg.base_gain then\n            gain = stg.base_gain\n        end\n        return {\n            vars = { gain, stg.chips }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.chips > 0 then\n            return {\n                chips = stg.chips\n            }\n        end\n\n        if context.end_of_round and not context.repetition and not context.individual and not context.blueprint and\n            to_big(G.GAME.blind.chips) == to_big(G.GAME.chips) then\n            stg.chips = stg.chips + stg.base_gain * G.GAME.round\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.CHIPS,\n                card = card,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "chips": 0,
          "base_gain": 100
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "base_gain": 100
        }
      },
      "vars": [
        "gain",
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "butterfly",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 17
      },
      "raw": "key = 'butterfly',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 17\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            consumables = 0,\n            goal = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    unlocked = false,\n    cost = 2,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.consumables, stg.goal }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.using_consumeable then\n            if not context.blueprint then\n                stg.consumables = stg.consumables + 1\n                SMODS.calculate_effect({ message = stg.consumables .. '/' .. stg.goal, colour = G.C.PLANET }, card)\n            end\n\n            if stg.consumables >= stg.goal then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    func = function()\n                        SMODS.add_card({\n                            set = 'Spectral',\n                            key_append = 'butterfly'\n                        })\n\n                        stg.consumables = 0\n\n                        return true;\n                    end\n                }))\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        return false\n    end,\n    check_for_unlock = function(self, args)\n        return next(SMODS.find_card('j_mxms_butterfly'))\n    end",
      "config": {
        "extra": {
          "consumables": 0,
          "goal": 5
        }
      },
      "ability": {
        "extra": {
          "consumables": 0,
          "goal": 5
        }
      },
      "vars": [
        0,
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "caterpillar",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 16
      },
      "raw": "key = 'caterpillar',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 16\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            tarots = 0,\n            goal = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 2,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.j_mxms_chrysalis\n        return {\n            vars = { stg.tarots, stg.goal }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.using_consumeable and context.consumeable.ability.set == 'Tarot' and not context.blueprint then\n            stg.tarots = stg.tarots + 1\n            SMODS.calculate_effect({ message = stg.tarots .. '/' .. stg.goal, colour = G.C.TAROT }, card)\n\n            if stg.tarots >= stg.goal then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    func = function()\n                        card:set_ability('j_mxms_chrysalis')\n                        card:juice_up(0.8, 0.8)\n                        play_sound('tarot1')\n                        return true;\n                    end\n                }))\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        local lineage = next(SMODS.find_card('j_mxms_chrysalis')) and next(SMODS.find_card('j_mxms_butterfly'))\n        if lineage then\n            lineage = not next(SMODS.find_card('j_ring_master'))\n        end\n        return not lineage\n    end,",
      "config": {
        "extra": {
          "tarots": 0,
          "goal": 3
        }
      },
      "ability": {
        "extra": {
          "tarots": 0,
          "goal": 3
        }
      },
      "vars": [
        0,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "celestial_deity",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 12
      },
      "raw": "key = 'celestial_deity',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 12\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            extra_levels = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = false,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.extra_levels }\n        }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        G.GAME.mxms_base_planet_levels = G.GAME.mxms_base_planet_levels + stg.extra_levels\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        G.GAME.mxms_base_planet_levels = G.GAME.mxms_base_planet_levels - stg.extra_levels\n    end",
      "config": {
        "extra": {
          "extra_levels": 1
        }
      },
      "ability": {
        "extra": {
          "extra_levels": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "change",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 16
      },
      "raw": "key = 'change',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 16\n    },\n    rarity = 2,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 5",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "cheat_day",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 11
      },
      "raw": "key = 'cheat_day',\n        atlas = 'Jokers',\n        pos = {\n            x = 0,\n            y = 11\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        rarity = 2,\n        blueprint_compat = false,\n        cost = 4,\n        calculate = function(self, card, context)\n            if context.mxms_failed_horoscope and not context.blueprint then\n                SMODS.calculate_effect({ message = localize('k_saved_ex'), colour = Maximus.C.HOROSCOPE, sound = 'tarot1' }, card)\n            end\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chef",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'chef',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 1,\n    blueprint_compat = true,\n    cost = 5,\n    calculate = function(self, card, context)\n        if context.setting_blind and #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n            G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    SMODS.add_card({\n                        set = 'Food',\n                    })\n                    card:juice_up(0.3, 0.4)\n                    G.GAME.joker_buffer = G.GAME.joker_buffer - 1\n                    return true;\n                end\n            }))\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chekhov",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 10
      },
      "raw": "key = 'chekhov',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 10\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = true,\n    cost = 6,\n    calculate = function(self, card, context)\n        if context.joker_main and G.P_BLINDS[G.GAME.round_resets.blind_choices.Boss].boss.showdown then\n            return {\n                Xmult_mod = G.GAME.round_resets.blind_ante,\n                message = 'x' .. G.GAME.round_resets.blind_ante,\n                colour = G.C.MULT,\n                card = card\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        if G.GAME.round_resets.blind_ante <= 4 then\n            return true\n        end\n\n        return false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chihuahua",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 6
      },
      "raw": "key = 'chihuahua',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 6\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            least_id = '0',\n            least_count = 0,\n            tie = false\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before and not context.blueprint then\n            local ranks = {\n                [\"2\"] = { freq = 0, id = '2' },\n                [\"3\"] = { freq = 0, id = '3' },\n                [\"4\"] = { freq = 0, id = '4' },\n                [\"5\"] = { freq = 0, id = '5' },\n                [\"6\"] = { freq = 0, id = '6' },\n                [\"7\"] = { freq = 0, id = '7' },\n                [\"8\"] = { freq = 0, id = '8' },\n                [\"9\"] = { freq = 0, id = '9' },\n                [\"10\"] = { freq = 0, id = '10' },\n                [\"11\"] = { freq = 0, id = '11' },\n                [\"12\"] = { freq = 0, id = '12' },\n                [\"13\"] = { freq = 0, id = '13' },\n                [\"14\"] = { freq = 0, id = '14' }\n            }\n\n            for i = 1, #G.playing_cards do\n                if not SMODS.has_no_rank(G.playing_cards[i]) then\n                    ranks[tostring(G.playing_cards[i].base.id)].freq = ranks[tostring(G.playing_cards[i].base.id)].freq +\n                        1\n                end\n            end\n\n            for k, v in pairs(ranks) do\n                if v.freq ~= 0 then\n                    if v.freq < stg.least_count or stg.least_count == 0 then\n                        stg.least_id = v.id\n                        stg.least_count = v.freq\n                        stg.tie = false\n                    elseif v.freq == stg.least_count then\n                        stg.tie = true\n                    end\n                end\n            end\n        end\n\n        if context.cardarea == G.play and context.repetition and tostring(context.other_card.base.id) == stg.least_id and not stg.tie then\n            local reps\n            if stg.least_count <= 10 then\n                reps = stg.least_count\n            else\n                reps = 10\n            end\n            return {\n                message = localize('k_again_ex'),\n                repetitions = reps,\n                card = card\n            }\n        end\n\n        if context.after and not context.blueprint then\n            stg.least_id = '0'\n            stg.least_count = 0\n            stg.tie = false\n        end\n    end",
      "config": {
        "extra": {
          "least_id": "0",
          "least_count": 0,
          "tie": false
        }
      },
      "ability": {
        "extra": {
          "least_id": "0",
          "least_count": 0,
          "tie": false
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "chrysalis",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 16
      },
      "raw": "key = 'chrysalis',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 16\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            planets = 0,\n            goal = 4\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    unlocked = false,\n    cost = 2,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        if not card.fake_card then\n            info_queue[#info_queue + 1] = G.P_CENTERS.j_mxms_butterfly\n        end\n        return {\n            vars = { stg.planets, stg.goal }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.using_consumeable and context.consumeable.ability.set == 'Planet' and not context.blueprint then\n            stg.planets = stg.planets + 1\n            SMODS.calculate_effect({ message = stg.planets .. '/' .. stg.goal, colour = G.C.PLANET }, card)\n\n            if stg.planets >= stg.goal then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    func = function()\n                        card:set_ability('j_mxms_butterfly')\n                        card:juice_up(0.8, 0.8)\n                        play_sound('tarot1')\n                        return true;\n                    end\n                }))\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        return false\n    end,\n    check_for_unlock = function(self, args)\n        return next(SMODS.find_card('j_mxms_chrysalis'))\n    end",
      "config": {
        "extra": {
          "planets": 0,
          "goal": 4
        }
      },
      "ability": {
        "extra": {
          "planets": 0,
          "goal": 4
        }
      },
      "vars": [
        0,
        4
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "cleaner",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 12
      },
      "raw": "key = 'cleaner',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 12\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    rarity = 1,\n    blueprint_compat = false,\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.selling_self and not context.blueprint then\n            local valid_jokers = SMODS.Edition:get_edition_cards(G.jokers, false)\n\n            if next(valid_jokers) then\n                local chosen_joker = pseudorandom_element(valid_jokers, pseudoseed('cleaner'))\n                local edition = poll_edition('cleaner', nil, true, true)\n                local i = 1\n                while chosen_joker.edition.key == edition do\n                    edition = poll_edition('cleaner' .. i, nil, true, true)\n                    i = i + 1\n                end\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        chosen_joker:set_edition(edition, true)\n                        card:juice_up(0.3, 0.5)\n                        return true;\n                    end\n                }))\n            else\n                return {\n                    message = localize('k_mxms_no_target_el'),\n                    colour = G.C.FILTER,\n                    sound = 'tarot2',\n                    card = card\n                }\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        return next(SMODS.Edition:get_edition_cards(G.jokers, false))\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "clown_car",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "key = 'clown_car',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 3\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            mult = 0,\n            gain = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.mult, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.mult > 0 then\n            return {\n                mult = stg.mult,\n            }\n        end\n\n        if context.card_added and context.card.ability.set == 'Joker' then\n            stg.mult = stg.mult + (stg.gain * G.GAME.mxms_soil_mod)\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.ATTENTION,\n                card = card,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 0,
          "gain": 2
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "gain": 2
        }
      },
      "vars": [
        0,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "combo_breaker",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'combo_breaker',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            gain = 0.5,\n            retriggers = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.post_trigger and context.other_context.retrigger_joker and not context.blueprint then\n            -- Add retrigger to total\n            stg.retriggers = stg.retriggers + 1\n            return {\n                card = card\n            }\n        end\n\n        if context.joker_main and stg.retriggers > 0 then\n            return {\n                sound = 'mxms_perfect',\n                x_mult = stg.retriggers * stg.gain + 1\n            }\n        end\n\n        if (context.before or context.after) and not context.blueprint then\n            stg.retriggers = 0\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.5,
          "retriggers": 0
        }
      },
      "ability": {
        "extra": {
          "gain": 0.5,
          "retriggers": 0
        }
      },
      "vars": [
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "comedian",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 12
      },
      "raw": "key = 'comedian',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 12\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain = 1,\n            prob = 1,\n            odds = 50\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.Xmult, stg.gain, SMODS.get_probability_vars(card, stg.prob, stg.odds, 'comedian') } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            if SMODS.pseudorandom_probability(card, 'comedian', stg.prob, stg.odds) then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot1')\n                        card.T.r = -0.2\n                        card:juice_up(0.3, 0.4)\n                        card.states.drag.is = true\n                        card.children.center.pinch.x = true\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                G.jokers:remove_card(card)\n                                card:remove()\n                                card = nil\n                                return true;\n                            end\n                        }))\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_extinct_ex')\n                }\n            else\n                stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        SMODS.calculate_effect(\n                            {\n                                message = localize { type = 'variable', key = 'a_xmult', vars = { stg.Xmult } },\n                                colour = G.C\n                                    .MULT\n                            }, card)\n                        return true\n                    end\n                }))\n                SMODS.calculate_context({ mxms_scaling_card = true })\n            end\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        return G.GAME.pool_flags.mxms_cavendish_removed\n    end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 1,
          "prob": 1,
          "odds": 50
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 1,
          "prob": 1,
          "odds": 50
        }
      },
      "vars": [
        1,
        1,
        0,
        1,
        1,
        50,
        "'comedian')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "conveyor_belt",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 12
      },
      "raw": "key = 'conveyor_belt',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 12\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            chips = 0,\n            mult = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.chips, stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and to_big(stg.chips) > to_big(0) and to_big(stg.mult) > to_big(0) then\n            SMODS.calculate_effect({ chips = to_number(stg.chips) }, context.blueprint_card or card)\n            SMODS.calculate_effect({ mult = to_number(stg.mult) }, context.blueprint_card or card)\n        end\n\n        if context.after and not context.blueprint then\n            stg.chips = mod_chips(hand_chips * 0.15)\n            stg.mult = mod_mult(mult * 0.15)\n            return {\n                message = localize('k_mxms_pushed_ex'),\n                colour = G.C.ATTENTION\n            }\n        end\n    end",
      "config": {
        "extra": {
          "chips": 0,
          "mult": 0
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "mult": 0
        }
      },
      "vars": [
        0,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "coronation",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 5
      },
      "raw": "key = 'coronation',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 5\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            rounds = 0,\n            goal = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.j_joker\n        info_queue[#info_queue + 1] = G.P_CENTERS.j_mxms_crowned\n        return { vars = { stg.rounds, stg.goal } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.end_of_round and not context.individual and not context.repetition and not context.blueprint and next(SMODS.find_card('j_joker')) then\n            stg.rounds = stg.rounds + 1\n            SMODS.calculate_effect({ message = stg.rounds .. '/' .. stg.goal, colour = G.C.GOLD }, card)\n\n            if stg.rounds == stg.goal then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    func = function()\n                        local jimbo = SMODS.find_card('j_joker')[1]\n                        jimbo:set_ability(G.P_CENTERS['j_mxms_crowned'])\n                        jimbo:juice_up(0.8, 0.8)\n\n                        check_for_unlock({ type = \"crowned\" })\n                        return true;\n                    end\n                }))\n\n                stg.rounds = 0\n\n                return {\n                    sound = 'polychrome1',\n                    message = localize('k_mxms_crowned'),\n                    colour = G.C.GOLD,\n                    card = card\n                }\n            end\n        end\n\n        if context.skip_blind and not context.blueprint and next(SMODS.find_card('j_joker')) then\n            stg.rounds = 0\n            return {\n                message = localize('k_reset'),\n                colour = G.C.GOLD,\n                card = card\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        return next(SMODS.find_card('j_joker'))\n    end",
      "config": {
        "extra": {
          "rounds": 0,
          "goal": 3
        }
      },
      "ability": {
        "extra": {
          "rounds": 0,
          "goal": 3
        }
      },
      "vars": [
        0,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "coupon",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "key = 'coupon',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            prob = 1,\n            odds = 10\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'cou') }\n        }\n    end,\n    set_ability = function(self, card, inital, delay_sprites)\n        local W = card.T.w\n        W = W * (63 / 71)\n        card.children.center.scale.x = card.children.center.scale.x * (63 / 71)\n        card.T.w = W\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.mxms_joker_cost_check and context.card.cost ~= 0 then\n            if SMODS.pseudorandom_probability(card, 'cou', stg.prob, stg.odds) then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        context.card.cost = 0\n                        context.card:juice_up()\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_mxms_free_ex'),\n                    colour = G.C.MONEY,\n                    sound = 'coin1'\n                }\n            else\n                return {\n                    message = localize('k_nope_ex'),\n                    colour = G.C.SET.Tarot,\n                    sound = 'tarot2'\n                }\n            end\n        end\n    end,",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 10
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 10
        }
      },
      "vars": [
        0,
        1,
        1,
        10,
        "'cou')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "crowned",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 10
      },
      "raw": "key = 'crowned',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 10\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            Xmult = 6\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    unlocked = false,\n    cost = 2,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        return false\n    end,\n    check_for_unlock = function(self, args)\n        return next(SMODS.find_card('j_mxms_crowned'))\n    end",
      "config": {
        "extra": {
          "Xmult": 6
        }
      },
      "ability": {
        "extra": {
          "Xmult": 6
        }
      },
      "vars": [
        6
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dark_room",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "key = 'dark_room',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 3\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    eternal_compat = false,\n    cost = 7,\n    config = {\n        extra = {\n            rounds = 0,\n            req = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.rounds, stg.req }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.selling_self and stg.rounds == 3 and not context.blueprint then\n            local voucher_pool = get_current_pool('Voucher')\n\n            local eligible_vouchers = {}\n            for i = 1, #voucher_pool do\n                if voucher_pool[i] ~= 'UNAVAILABLE' and G.P_CENTERS[voucher_pool[i]].requires then\n                    eligible_vouchers[#eligible_vouchers + 1] = voucher_pool[i]\n                end\n            end\n\n            if #eligible_vouchers == 0 then\n                return {\n                    message = localize('k_mxms_no_target_el'),\n                    colour = G.C.FILTER,\n                    card = card\n                }\n            end\n\n            local chosen_voucher = SMODS.add_card({\n                set = 'Voucher',\n                key = pseudorandom_element(eligible_vouchers, pseudoseed('dark_room' .. G.GAME.round_resets.ante)),\n                key_append = 'dark_room'\n            })\n            chosen_voucher.cost = 0\n            chosen_voucher:redeem()\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    chosen_voucher:start_dissolve({ G.C.ORANGE }, nil, 1.6)\n                    return true\n                end\n            }))\n        end\n\n        if context.end_of_round and not context.repetition and not context.individual and not context.blueprint and\n            stg.rounds < 3 then\n            stg.rounds = stg.rounds + 1\n            if stg.rounds == 3 then\n                local eval = function(card)\n                    return not card.REMOVED\n                end\n                juice_card_until(card, eval, true)\n            end\n\n            return {\n                message = (stg.rounds < 3) and (stg.rounds .. '/3') or\n                    localize('k_active_ex'),\n                colour = G.C.FILTER,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "rounds": 0,
          "req": 3
        }
      },
      "ability": {
        "extra": {
          "rounds": 0,
          "req": 3
        }
      },
      "vars": [
        0,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "detective",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 15
      },
      "raw": "key = 'detective',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            size = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = false,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        return { vars = { stg.size } }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        G.hand:change_size(stg.size)\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        G.hand:change_size(-stg.size)\n    end",
      "config": {
        "extra": {
          "size": 3
        }
      },
      "ability": {
        "extra": {
          "size": 3
        }
      },
      "vars": [
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "dmiid",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 5
      },
      "raw": "key = 'dmiid',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 5\n    },\n    blueprint_compat = false,\n    cost = 7,\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain = 0.25\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before and not context.blueprint then\n            for i = 1, #context.scoring_hand do\n                if context.scoring_hand[i].seal then\n                    local other_card = context.scoring_hand[i]\n                    other_card:set_seal(nil, nil, true)\n                    stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'before',\n                        delay = 0.50,\n                        func = function()\n                            play_sound('card1')\n                            card:juice_up(0.3, 0.3)\n                            other_card:juice_up(0.3, 0.3)\n                            return true\n                        end\n                    }))\n                    SMODS.calculate_context({ mxms_scaling_card = true })\n                end\n            end\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if v.seal then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "vars": [
        1,
        0.25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "employee",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 11
      },
      "raw": "key = 'employee',\n        atlas = 'Jokers',\n        pos = {\n            x = 2,\n            y = 11\n        },\n        rarity = 2,\n        config = {\n            extra = {\n                dollars = 5\n            }\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        blueprint_compat = true,\n        cost = 7,\n        loc_vars = function(self, info_queue, card)\n            local stg = card.ability.extra\n            return {\n                vars = { stg.dollars }\n            }\n        end,\n        calculate = function(self, card, context)\n            local stg = card.ability.extra\n\n            if context.end_of_round and not context.individual and not context.repetition then\n                for k, v in pairs(G.mxms_horoscope.cards) do\n                    (context.blueprint_card or card):juice_up(0.3, 0.4)\n                    SMODS.calculate_effect({ dollars = stg.dollars }, v)\n                end\n            end\n        end",
      "config": {
        "extra": {
          "dollars": 5
        }
      },
      "ability": {
        "extra": {
          "dollars": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "faded",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'faded',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 1\n    },\n    rarity = 2,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 7,\n    calculate = function(self, card, context)\n        if context.before and next(context.poker_hands['Flush']) then\n            local suit_check = {Diamonds = false, Spades = false, Clubs = false, Hearts = false}\n\n            for k, v in pairs(context.scoring_hand) do\n                if not SMODS.has_no_suit(v) or not SMODS.has_any_suit(v) then\n                    suit_check[v.base.suit] = true\n                end\n            end\n\n            for k, v in pairs(suit_check) do\n                if not v then\n                    return\n                end\n            end\n\n            check_for_unlock({type = 'flushaholic'})\n        end\n    end,",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "first_aid_kit",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 9
      },
      "raw": "key = 'first_aid_kit',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 9\n    },\n    rarity = 1,\n    blueprint_compat = false,\n    eternal_compat = false,\n    config = {\n        extra = {\n            hands = 2,\n            discards = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.hands, stg.discards }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.selling_self then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'immediate',\n                func = function()\n                    local hand_UI = G.HUD:get_UIE_by_ID('hand_UI_count')\n                    G.GAME.current_round.hands_left = G.GAME.current_round.hands_left + stg.hands\n                    hand_UI.config.object:update()\n                    G.HUD:recalculate()\n                    attention_text({\n                        text = '+' .. stg.hands,\n                        scale = 0.8,\n                        hold = 0.7,\n                        cover = hand_UI.parent,\n                        cover_colour = G.C.GREEN,\n                        align = 'cm',\n                    })\n                    play_sound('chips2')\n                    return true\n                end\n            }))\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'immediate',\n                func = function()\n                    local discard_UI = G.HUD:get_UIE_by_ID('discard_UI_count')\n                    G.GAME.current_round.discards_left = G.GAME.current_round.discards_left + stg.discards\n                    discard_UI.config.object:update()\n                    G.HUD:recalculate()\n                    attention_text({\n                        text = '+' .. stg.discards,\n                        scale = 0.8,\n                        hold = 0.7,\n                        cover = discard_UI.parent,\n                        cover_colour = G.C.GREN,\n                        align = 'cm',\n                    })\n                    play_sound('chips2')\n                    return true\n                end\n            }))\n        end\n    end",
      "config": {
        "extra": {
          "hands": 2,
          "discards": 2
        }
      },
      "ability": {
        "extra": {
          "hands": 2,
          "discards": 2
        }
      },
      "vars": [
        2,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "fog",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 9
      },
      "raw": "key = 'fog',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 9\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 5,\n    rarity = 2",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "fools_gold",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 13
      },
      "raw": "key = 'fools_gold',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 13\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            money = 1,\n            tally = 0\n        }\n    },\n    credit = {\n        art = \"PsyAlola\",\n        code = \"theAstra\",\n        concept = \"PsyAlola\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        local gold_cards = 0\n        if G.playing_cards then\n            for k, v in pairs(G.playing_cards) do\n                if SMODS.has_enhancement(v, 'm_gold') then\n                    gold_cards = gold_cards + 1\n                end\n            end\n        end\n\n        stg.tally = math.floor(gold_cards / 2)\n\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_gold\n        return {\n            vars = { stg.money, stg.tally * stg.money }\n        }\n    end,\n    calc_dollar_bonus = function(self, card)\n        local stg = card.ability.extra\n        local gold_cards = 0\n        for k, v in pairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_gold') then\n                gold_cards = gold_cards + 1\n            end\n        end\n\n        stg.tally = math.floor(gold_cards / 2)\n        return card.ability.extra.tally * card.ability.extra.money\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_gold') then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {
        "extra": {
          "money": 1,
          "tally": 0
        }
      },
      "ability": {
        "extra": {
          "money": 1,
          "tally": 0
        }
      },
      "vars": [
        1,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "fortune_cookie",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'fortune_cookie',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    rarity = 1,\n    perishable_compat = false,\n    eternal_compat = false,\n    blueprint_compat = true,\n    cost = 4,\n    pools = {\n        Food = true\n    },\n    config = {\n        extra = {\n            prob = 10,\n            odds = 10\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'fco'), G.GAME.probabilities.normal }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        -- Activate ability before scoring if chance is higher than 0\n        if context.before and stg.prob > 0 then\n            -- Roll chance and decrease by 1\n            local chance_roll = SMODS.pseudorandom_probability(card, 'fco', stg.prob, stg.odds)\n            stg.prob = stg.prob - (1 / G.GAME.mxms_fridge_mod)\n\n            -- Check if Consumables is full\n            if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n                -- Successful roll\n                if (chance_roll) then\n                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'before',\n                        func = function()\n                            (context.blueprint_card or card):juice_up(0.3, 0.4)\n\n                            SMODS.add_card({\n                                set = 'Tarot',\n                                key_append = 'fco'\n                            })\n                            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer - 1\n                            return true;\n                        end\n                    }))\n                    return {\n                        sound = 'tarot1',\n                        message = localize('k_mxms_fortunate_ex'),\n                        colour = G.C.SECONDARY_SET.Tarot\n                    }\n\n                    -- Failed Roll\n                else\n                    return {\n                        sound = 'tarot2',\n                        message = localize('k_nope_ex'),\n                        colour = G.C.SET.Tarot\n                    }\n                end\n            else\n                return {\n                    sound = 'tarot2',\n                    message = localize('k_mxms_wasted'),\n                    colour = G.C.SET.Tarot\n                }\n            end\n\n            return {\n                card = card,\n                message = '-1',\n                colour = G.C.RED\n            }\n        end\n\n        -- \"Crumble\" card after scoring\n        if context.after and not context.blueprint then\n            if stg.prob <= 0 then\n                -- Code derived from Gros Michel/Cavendish\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot2')\n                        card.T.r = -0.2\n                        card:juice_up(0.3, 0.4)\n                        card.states.drag.is = true\n                        card.children.center.pinch.x = true\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                G.jokers:remove_card(card)\n                                card:remove()\n                                card = nil\n                                return true;\n                            end\n                        }))\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_mxms_crumbled'),\n                    colour = G.C.FILTER\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob": 10,
          "odds": 10
        }
      },
      "ability": {
        "extra": {
          "prob": 10,
          "odds": 10
        }
      },
      "vars": [
        0,
        1,
        10,
        10,
        "'fco')",
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "four_course_meal",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 9
      },
      "raw": "key = 'four_course_meal',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 9\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            hands = 0,\n            chips = 150,\n            mult = 30,\n            Xmult = 3,\n            money = 10\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    eternal_compat = false,\n    cost = 8,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.chips, stg.mult, stg.Xmult, stg.money } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            stg.hands = stg.hands + (1 * G.GAME.mxms_fridge_mod)\n            if stg.hands <= 1 then\n                return {\n                    chips = stg.chips,\n                }\n            elseif stg.hands <= 2 then\n                return {\n                    mult = stg.mult\n                }\n            elseif stg.hands <= 3 then\n                return {\n                    x_mult = stg.Xmult\n                }\n            elseif stg.hands <= 4 then\n                ease_dollars(stg.money)\n                return {\n                    message = localize('$') .. stg.money,\n                    colour = G.C.money,\n                    card = card\n                }\n            end\n        end\n\n        if context.after and stg.hands >= 4 and not context.blueprint then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    play_sound('tarot1')\n                    card.T.r = -0.2\n                    card:juice_up(0.3, 0.4)\n                    card.states.drag.is = true\n                    card.children.center.pinch.x = true\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'after',\n                        delay = 0.3,\n                        blockable = false,\n                        func = function()\n                            G.jokers:remove_card(self)\n                            card:remove()\n                            card = nil\n                            return true;\n                        end\n                    }))\n                    return true\n                end\n            }))\n            return {\n                message = localize('k_eaten_ex'),\n                colour = G.C.RED\n            }\n        end\n    end",
      "config": {
        "extra": {
          "hands": 0,
          "chips": 150,
          "mult": 30,
          "Xmult": 3,
          "money": 10
        }
      },
      "ability": {
        "extra": {
          "hands": 0,
          "chips": 150,
          "mult": 30,
          "Xmult": 3,
          "money": 10
        }
      },
      "vars": [
        150,
        30,
        3,
        10
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "four_leaf_clover",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "key = 'four_leaf_clover',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 7,\n    calculate = function(self, card, context)\n        if context.before and not context.blueprint and #context.scoring_hand == 4 then\n            -- Code derived from Midas Mask\n            for k, v in ipairs(context.scoring_hand) do\n                if not v.debuff then\n                    v:set_ability(G.P_CENTERS.m_lucky, nil, true)\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            v:juice_up(0.3, 0.4)\n                            return true\n                        end\n                    }))\n                end\n            end\n\n            return {\n                message = localize('k_mxms_lucky'),\n                colour = G.C.GREEN,\n                card = card\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "galaxy_brain",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 15
      },
      "raw": "key = 'galaxy_brain',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 15\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain = 0.5,\n            last_hand = nil\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.gain, stg.last_hand and localize(stg.last_hand, 'poker_hands') or localize('k_none') }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before and not context.blueprint then\n            for k, v in pairs(G.GAME.hands) do\n                if k == stg.last_hand then\n                    stg.last_hand = k\n                    stg.Xmult = 1\n                    return {\n                        message = localize('k_reset'),\n                        colour = G.C.FILTER\n                    }\n                elseif k == context.scoring_name then\n                    stg.last_hand = k\n                    stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                    return {\n                        message = localize('k_upgrade_ex'),\n                        func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n                    }\n                end\n            end\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end,\n    set_ability = function(self, card, initial, delay)\n        local stg = card.ability.extra\n\n        stg.last_hand = G.GAME.last_hand_played or 'None'\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        "'poker_hands') or localize('k_none')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "galifianakis",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 7
      },
      "raw": "key = 'galifianakis',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 7\n    },\n    soul_pos = {\n        x = 1,\n        y = 8\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 20,\n    calculate = function(self, card, context)\n        if context.before then\n            if not context.scoring_hand[#context.scoring_hand].edition then\n                card:juice_up(0.3, 0.4)\n                context.scoring_hand[#context.scoring_hand]:set_edition({ negative = true }, true)\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gambler",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "key = 'gambler',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 3\n    },\n    rarity = 1,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 7,\n    add_to_deck = function(self, card, from_debuff)\n        G.GAME.mxms_gambler_mod = G.GAME.mxms_gambler_mod * 2\n        G.GAME.interest_cap = G.GAME.interest_cap * 2\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        G.GAME.mxms_gambler_mod = G.GAME.mxms_gambler_mod / 2\n        G.GAME.interest_cap = G.GAME.interest_cap / 2\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "review",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 9
      },
      "raw": "key = 'review',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 9\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            reps = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.repetition and context.cardarea == G.play then\n            if context.other_card:get_id() == 6 or\n                context.other_card:get_id() == 7 or\n                context.other_card:get_id() == 8 or\n                context.other_card:get_id() == 9 or\n                context.other_card:get_id() == 10 then\n                return {\n                    message = localize('k_again_ex'),\n                    repetitions = stg.reps,\n                    card = card\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "reps": 1
        }
      },
      "ability": {
        "extra": {
          "reps": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gangster_love",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 17
      },
      "raw": "key = 'gangster_love',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 17\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.before and next(context.poker_hands['Flush']) and not context.blueprint then\n            for k, v in pairs(context.scoring_hand) do\n                SMODS.change_base(v, \"Hearts\", nil)\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        v:juice_up(0.3, 0.4)\n                        return true\n                    end\n                }))\n            end\n            return {\n                message = localize('k_mxms_love_ex'),\n                colour = G.C.HEARTS,\n                sound = 'mxms_joker'\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gelatin",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 10
      },
      "raw": "key = 'gelatin',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 10\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            cards_left = 50\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = {\n                stg.cards_left,\n                G.GAME.current_round.mxms_jello_suit,\n                colours = { G.C.SUITS[G.GAME.current_round.mxms_jello_suit] }\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.cardarea == G.play and context.repetition and stg.cards_left > 0 then\n            if context.other_card:is_suit(G.GAME.current_round.mxms_jello_suit) then\n                stg.cards_left = stg.cards_left - (1 / G.GAME.mxms_fridge_mod)\n                return {\n                    repetitions = 1,\n                    message = localize('k_again_ex'),\n                    card = card\n                }\n            end\n        end\n\n        if context.after and not context.blueprint then\n            if stg.cards_left <= 0 then\n                -- Code derived from Gros Michel/Cavendish\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot2')\n                        card.T.r = -0.2\n                        card:juice_up(0.3, 0.4)\n                        card.states.drag.is = true\n                        card.children.center.pinch.x = true\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                G.jokers:remove_card(card)\n                                card:remove()\n                                card = nil\n                                return true;\n                            end\n                        }))\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_eaten_ex')\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "cards_left": 50
        }
      },
      "ability": {
        "extra": {
          "cards_left": 50
        }
      },
      "vars": [
        50,
        null,
        "colours = { G.C.SUITS[G.GAME.current_round.mxms_jello_suit]"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "glass_cannon",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 6
      },
      "raw": "key = 'glass_cannon',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 6\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            hands = 0\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    eternal_compat = false,\n    cost = 6,\n    calculate = function(self, card, context)\n        if context.other_ret\n            and context.retrigger_joker_check and not context.retrigger_joker and context.cardarea ~= G.mxms_horoscope then\n            print(context.other_ret)\n                if (context.other_ret.jokers and (context.other_ret.jokers.Xmult or context.other_ret.jokers.Xmult_mod or context.other_ret.jokers.x_mult or context.other_ret.jokers.xmult)) then\n            return {\n                message = localize('k_again_ex'),\n                repetitions = 1,\n                card = card\n            }\n        end\n        end\n\n        if context.after and not context.blueprint then\n            card.ability.extra.hands = card.ability.extra.hands + 1\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    if card.ability.extra.hands == 2 and to_big(G.GAME.chips) - to_big(G.GAME.blind.chips) < to_big(0) then\n                        card:shatter()\n                    end\n                    return true\n                end\n            }))\n        end\n\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            card.ability.extra.hands = 0\n        end\n    end",
      "config": {
        "extra": {
          "hands": 0
        }
      },
      "ability": {
        "extra": {
          "hands": 0
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "mxms_go_fish",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 4
      },
      "raw": "key = 'mxms_go_fish',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 4\n    },\n    rarity = 1,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { G.GAME.current_round.mxms_go_fish.rank, G.GAME.current_round.mxms_go_fish.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                mult = G.GAME.current_round.mxms_go_fish.mult\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "god_hand",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 13
      },
      "raw": "key = 'god_hand',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 13\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            id = nil,\n            rank = nil,\n            suit = nil,\n            good_Xmult = 3,\n            bad_Xmult = 0.5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        local rank, suit, intermediary, color\n        if stg.rank then\n            rank = stg.rank\n            suit = stg.suit\n            color = G.C.SUITS[stg.suit]\n            intermediary = ' of '\n        else\n            rank = ''\n            suit = ''\n            color = G.C.INACTIVE\n            intermediary = 'None'\n        end\n\n        return {\n            vars = { stg.good_Xmult, stg.bad_Xmult, rank, intermediary, suit, colours = { color } }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main then\n            local found_in_hand = false\n            for k, v in pairs(G.hand.cards) do\n                if v:is_suit(stg.suit) and v:get_id() == stg.id then\n                    found_in_hand = true\n                    break\n                end\n            end\n\n            if found_in_hand then\n                return {\n                    x_mult = stg.good_Xmult\n                }\n            else\n                return {\n                    x_mult = stg.bad_Xmult\n                }\n            end\n        end\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        local chosen_card = pseudorandom_element(G.playing_cards, pseudoseed('god_hand' .. G.GAME.round_resets.ante))\n        stg.id = chosen_card:get_id()\n        stg.rank = SMODS.Ranks[chosen_card.base.value].key\n        stg.suit = chosen_card.base.suit\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        "rank",
        "intermediary",
        "suit",
        "colours = { color"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "golden_rings",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 14
      },
      "raw": "key = 'golden_rings',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 14\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    rarity = 1,\n    blueprint_compat = false,\n    cost = 5",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gravity",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 6
      },
      "raw": "key = 'gravity',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 6\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            rounds = 5\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    eternal_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.rounds }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3 },\n                { handname = localize('k_all_hands'), chips = '...', mult = '...', level = '' })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    play_sound('tarot2')\n                    card:juice_up(0.8, 0.5)\n                    G.TAROT_INTERRUPT_PULSE = true\n                    return true\n                end\n            }))\n            update_hand_text({ delay = 0 }, { mult = '-', StatusText = true })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.9,\n                func = function()\n                    play_sound('tarot2')\n                    card:juice_up(0.8, 0.5)\n                    return true\n                end\n            }))\n            update_hand_text({ delay = 0 }, { chips = '-', StatusText = true })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.9,\n                func = function()\n                    play_sound('tarot2')\n                    card:juice_up(0.8, 0.5)\n                    G.TAROT_INTERRUPT_PULSE = nil\n                    return true\n                end\n            }))\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.9, delay = 0 }, { level = '-1' })\n            delay(1.3)\n            for k, v in pairs(G.GAME.hands) do\n                level_up_hand(self, k, true, -1)\n            end\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 1.1, delay = 0 },\n                { mult = 0, chips = 0, handname = '', level = '' })\n            stg.rounds = stg.rounds - 1\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.9,\n                func = function()\n                    if stg.rounds == 0 then\n                        card:start_dissolve({ G.C.RED }, nil, 1.6)\n                        SMODS.calculate_effect({ message = localize('k_mxms_splat_ex'), colour = G.C.RED }, card)\n                    end\n                    return true\n                end\n            }))\n        end\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3 },\n            { handname = localize('k_all_hands'), chips = '...', mult = '...', level = '' })\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.2,\n            func = function()\n                play_sound('tarot1')\n                card:juice_up(0.8, 0.5)\n                G.TAROT_INTERRUPT_PULSE = true\n                return true\n            end\n        }))\n        update_hand_text({ delay = 0 }, { mult = '+', StatusText = true })\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.9,\n            func = function()\n                play_sound('tarot1')\n                card:juice_up(0.8, 0.5)\n                return true\n            end\n        }))\n        update_hand_text({ delay = 0 }, { chips = '+', StatusText = true })\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.9,\n            func = function()\n                play_sound('tarot1')\n                card:juice_up(0.8, 0.5)\n                G.TAROT_INTERRUPT_PULSE = nil\n                return true\n            end\n        }))\n        update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.9, delay = 0 }, { level = '+5' })\n        delay(1.3)\n        for k, v in pairs(G.GAME.hands) do\n            level_up_hand(self, k, true, stg.rounds)\n        end\n        update_hand_text({ sound = 'button', volume = 0.7, pitch = 1.1, delay = 0 },\n            { mult = 0, chips = 0, handname = '', level = '' })\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        if stg.rounds > 0 then\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3 },\n                { handname = localize('k_all_hands'), chips = '...', mult = '...', level = '' })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                func = function()\n                    play_sound('tarot2')\n                    G.TAROT_INTERRUPT_PULSE = true\n                    return true\n                end\n            }))\n            update_hand_text({ delay = 0 }, { mult = '-', StatusText = true })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.9,\n                func = function()\n                    play_sound('tarot2')\n                    return true\n                end\n            }))\n            update_hand_text({ delay = 0 }, { chips = '-', StatusText = true })\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.9,\n                func = function()\n                    play_sound('tarot2')\n                    G.TAROT_INTERRUPT_PULSE = nil\n                    return true\n                end\n            }))\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 0.9, delay = 0 },\n                { level = '-' .. stg.rounds })\n            delay(1.3)\n            for k, v in pairs(G.GAME.hands) do\n                level_up_hand(self, k, true, -(stg.rounds))\n            end\n            update_hand_text({ sound = 'button', volume = 0.7, pitch = 1.1, delay = 0 },\n                { mult = 0, chips = 0, handname = '', level = '' })\n        end\n    end",
      "config": {
        "extra": {
          "rounds": 5
        }
      },
      "ability": {
        "extra": {
          "rounds": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "group_chat",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 6
      },
      "raw": "key = 'group_chat',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 6\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            chips = 0,\n            gain = 2\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.chips, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.chips > 0 then\n            return {\n                chips = stg.chips\n            }\n        end\n\n        if context.mxms_scaling_card and not context.blueprint then\n            stg.chips = stg.chips + stg.gain * G.GAME.mxms_soil_mod\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                func = function()\n                    card:juice_up(0.3, 0.4)\n                    return true\n                end\n            }))\n        end\n    end,\n    set_ability = function(self, card, inital, delay_sprites)\n        local W = card.T.w\n        W = W * (66 / 71)\n        card.children.center.scale.x = card.children.center.scale.x * (66 / 71)\n        card.T.w = W\n    end",
      "config": {
        "extra": {
          "chips": 0,
          "gain": 2
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "gain": 2
        }
      },
      "vars": [
        0,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "guillotine",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 5
      },
      "raw": "key = 'guillotine',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 5\n    },\n    rarity = 3,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 9,\n    calculate = function(self, card, context)\n        if context.before and not context.blueprint then\n            for i = 1, #context.scoring_hand do\n                if context.scoring_hand[i]:get_id() > 10 and not context.scoring_hand[i].debuff then\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'before',\n                        delay = 0.50,\n                        func = function()\n                            play_sound('slice1')\n                            SMODS.change_base(context.scoring_hand[i], nil, '10')\n                            context.scoring_hand[i]:juice_up(0.3, 0.3)\n                            return true\n                        end\n                    }))\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "gutbuster",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 16
      },
      "raw": "key = 'gutbuster',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 16\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            card = nil,\n            pos = nil\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = false,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        if stg.card ~= nil then\n            local copied_key = stg.card.config.center.key\n            return {\n                vars = { G.localization.descriptions.Joker[copied_key].name }\n            }\n        else\n            return {\n                vars = { localize('k_none') }\n            }\n        end\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.setting_blind and not context.blueprint then\n            if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n                G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        stg.card = SMODS.add_card({ set = 'Joker' })\n                        card:juice_up(0.3, 0.4)\n                        play_sound('tarot1')\n                        stg.card.sell_cost = 0\n                        G.GAME.joker_buffer = G.GAME.joker_buffer - 1\n                        return true;\n                    end\n                }))\n            end\n        end\n\n        if context.end_of_round and stg.card and not context.individual and not context.repetition and not context.blueprint then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    stg.card:start_dissolve()\n                    stg.card = nil\n                    return true;\n                end\n            }))\n        end\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        card.sell_cost = 0\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hamill",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 7
      },
      "raw": "key = 'hamill',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 7\n    },\n    soul_pos = {\n        x = 5,\n        y = 8\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '', \n        extra = '', \n        hidden = true\n    },\n    blueprint_compat = true,\n    cost = 20,\n    config = {\n        extra = {\n            levels = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        local hand = localize(mxms_get_most_played_hand(), 'poker_hands')\n\n        return { vars = { stg.levels, hand } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        local most_played_hand = mxms_get_most_played_hand()\n        if context.before and context.scoring_name == most_played_hand then\n            SMODS.smart_level_up_hand(context.blueprint_card or card, most_played_hand, nil, stg.levels)\n        end\n    end",
      "config": {
        "extra": {
          "levels": 1
        }
      },
      "ability": {
        "extra": {
          "levels": 1
        }
      },
      "vars": [
        1,
        "hand"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hammer_and_chisel",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 2
      },
      "raw": "key = 'hammer_and_chisel',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 2\n    },\n    rarity = 2,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 5,\n    enhancement_gate = 'm_stone',\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_stone\n        return {\n            vars = {}\n        }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        for k, v in ipairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_stone') then\n                v.config.center.replace_base_card = false\n                v.config.center.no_rank = false\n                v.config.center.no_suit = false\n            end\n        end\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        for k, v in ipairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_stone') then\n                v.config.center.replace_base_card = true\n                v.config.center.no_rank = true\n                v.config.center.no_suit = true\n            end\n        end\n    end",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DrawStep",
      "key": "HnC_Front",
      "atlas": null,
      "pos": null,
      "raw": "key = 'HnC_Front',\n    order = 1,\n    func = function(self, layer)\n        --Draw the main part of the card\n        if (self.edition and self.edition.negative and not self.delay_edition) or (self.ability.name == 'Antimatter' and (self.config.center.discovered or self.bypass_discovery_center)) then\n            if self.children.front and self.ability.effect == 'Stone Card' and next(SMODS.find_card('j_mxms_hammer_and_chisel')) then\n                self.children.front:draw_shader('negative', nil, self.ARGS.send_to_shader)\n            end\n        elseif not self:should_draw_base_shader() then\n            -- Don't render base dissolve shader.\n        elseif not self.greyed then\n            if self.children.front and self.ability.effect == 'Stone Card' and next(SMODS.find_card('j_mxms_hammer_and_chisel')) then\n                self.children.front:draw_shader('dissolve')\n            end\n        end\n    end,\n    conditions = { vortex = false, facing = 'front' },",
      "config": {
        "vortex": false,
        "facing": "front"
      },
      "ability": {
        "vortex": false,
        "facing": "front"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DrawStep",
      "key": "HnC_Edition",
      "atlas": null,
      "pos": null,
      "raw": "key = 'HnC_Edition',\n    order = 21,\n    func = function(self, layer)\n        if self.edition and not self.delay_edition then\n            for k, v in pairs(G.P_CENTER_POOLS.Edition) do\n                if self.edition[v.key:sub(3)] and v.shader then\n                    if type(v.draw) == 'function' then\n                        v:draw(self, layer)\n                    else\n                        if self.children.front and self.ability.effect == 'Stone Card' and next(SMODS.find_card('j_mxms_hammer_and_chisel')) then\n                            self.children.front:draw_shader(v.shader, nil, self.ARGS.send_to_shader)\n                        end\n                    end\n                end\n            end\n        end\n    end,\n    conditions = { vortex = false, facing = 'front' },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DrawStep",
      "key": "HnC_Debuff",
      "atlas": null,
      "pos": null,
      "raw": "key = 'HnC_Debuff',\n    order = 71,\n    func = function(self, layer)\n        if self.debuff and self.children.front and self.ability.effect == 'Stone Card' and next(SMODS.find_card('j_mxms_hammer_and_chisel')) then\n            self.children.front:draw_shader('debuff', nil, self.ARGS.send_to_shader)\n        end\n    end,\n    conditions = { vortex = false, facing = 'front' },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "DrawStep",
      "key": "HnC_Greyed",
      "atlas": null,
      "pos": null,
      "raw": "key = 'HnC_Greyed',\n    order = 81,\n    func = function(self, layer)\n        if self.greyed and self.children.front and self.ability.effect == 'Stone Card' and next(SMODS.find_card('j_mxms_hammer_and_chisel')) then\n            self.children.front:draw_shader('played', nil, self.ARGS.send_to_shader)\n        end\n    end,\n    conditions = { vortex = false, facing = 'front' },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "harmony",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 1
      },
      "raw": "key = 'harmony',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 1\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            mult = 16\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            local ranks = {}\n\n            for i = 1, #context.scoring_hand do\n                local unique = true\n                for j = 1, #ranks do\n                    if ranks[j] == context.scoring_hand[i]:get_id() then\n                        unique = false\n                    end\n                end\n                if #ranks == 0 or unique then\n                    ranks[#ranks + 1] = context.scoring_hand[i]:get_id()\n                end\n            end\n\n            if #ranks >= 3 then\n                return {\n                    mult = stg.mult\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "mult": 16
        }
      },
      "ability": {
        "extra": {
          "mult": 16
        }
      },
      "vars": [
        16
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hedonist",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 5
      },
      "raw": "key = 'hedonist',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 5\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain = 0.25\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.ending_shop and #G.shop_vouchers.cards == 0 and #G.shop_booster.cards == 0 and #G.shop_jokers.cards == 0 and not context.blueprint then\n            stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n            SMODS.calculate_effect({ message = localize { type = 'variable', key = 'a_xmult', vars = { stg.Xmult } } },\n                context.blueprint_card or card)\n            SMODS.calculate_context({ mxms_scaling_card = true })\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "vars": [
        1,
        0.25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "high_dive",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 10
      },
      "raw": "key = 'high_dive',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 10\n    },\n    rarity = 2,\n    config = {\n        extra = 1\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.modify_scoring_hand and G.GAME.last_hand_played == 'High Card' then\n            return {\n                add_to_hand = true\n            }\n        end\n\n        if context.repetition and context.cardarea == G.play and context.scoring_name == \"High Card\" then\n            return {\n                message = localize('k_again_ex'),\n                repetitions = stg,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": 1
      },
      "ability": {
        "extra": 1
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hippie",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 10
      },
      "raw": "key = 'hippie',\n        atlas = 'Jokers',\n        pos = {\n            x = 8,\n            y = 10\n        },\n        rarity = 2,\n        config = {\n            extra = {\n                Xmult = 1,\n                gain = 0.5\n            }\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        blueprint_compat = true,\n        cost = 6,\n        loc_vars = function(self, info_queue, card)\n            local stg = card.ability.extra\n            return {\n                vars = { stg.Xmult, stg.gain }\n            }\n        end,\n        calculate = function(self, card, context)\n            local stg = card.ability.extra\n\n            if context.mxms_beat_horoscope and not context.blueprint then\n                stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                SMODS.calculate_effect(\n                    { message = localize { type = 'variable', key = 'a_xmult', vars = { stg.Xmult } } },\n                    card)\n                SMODS.calculate_context({ mxms_scaling_card = true })\n            end\n\n            if context.joker_main and stg.Xmult > 1 then\n                return {\n                    x_mult = stg.Xmult\n                }\n            end\n        end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 0.5
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 0.5
        }
      },
      "vars": [
        1,
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "honorable",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 15
      },
      "raw": "key = 'honorable',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            mult = 0,\n            gain = 10\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_judgement\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain, stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.mxms_judgement_used and not context.blueprint then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    context.card:start_dissolve()\n                    return true;\n                end\n            }))\n            stg.mult = stg.mult + stg.gain * G.GAME.mxms_soil_mod\n            return {\n                message = localize('k_upgrade_ex')\n            }\n        end\n\n        if context.joker_main and stg.mult > 0 then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 0,
          "gain": 10
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "gain": 10
        }
      },
      "vars": [
        10,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hopscotch",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "key = 'hopscotch',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 2\n    },\n    config = {\n        extra = {\n            prob = 1,\n            odds = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 1,\n    blueprint_compat = false,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'hopscotch') }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.setting_blind and G.GAME.round_resets.blind_tag and not context.blueprint then\n            if SMODS.pseudorandom_probability(card, 'hopscotch', stg.prob, stg.odds) then\n                play_sound('generic1')\n                card:juice_up(0.3, 0.4)\n                add_tag(G.GAME.round_resets.blind_tag)\n                G.GAME.mxms_skip_tag = ''\n            else\n                return {\n                    sound = 'tarot2',\n                    card = card,\n                    message = localize('k_nope_ex'),\n                    colour = G.C.SET.Tarot\n                }\n            end\n        end\n    end,\n    in_pool = function(self, args)\n        return not G.GAME.modifiers.disable_blind_skips\n    end,",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 3
        }
      },
      "vars": [
        0,
        1,
        1,
        3,
        "'hopscotch')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hugo",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 7
      },
      "raw": "key = 'hugo',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 7\n    },\n    soul_pos = {\n        x = 2,\n        y = 8\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    config = {\n        extra = {\n            prob = 1,\n            odds = 4\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 20,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'hugo') }\n        }\n    end",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 4
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 4
        }
      },
      "vars": [
        0,
        1,
        1,
        4,
        "'hugo')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "hypeman",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 9
      },
      "raw": "key = 'hypeman',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 9\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            dollars = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.dollars }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n    \n        if context.enhancing_card then\n            return {\n                dollars = stg.dollars,\n                sound = 'mxms_hey'\n            }\n        end\n    end,",
      "config": {
        "extra": {
          "dollars": 1
        }
      },
      "ability": {
        "extra": {
          "dollars": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "icosahedron",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 13
      },
      "raw": "key = 'icosahedron',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 13\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            tally = 0,\n            goal = 20,\n            Xmult = 0.2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = false,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.goal, stg.Xmult, stg.tally }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and context.cardarea == G.play and not context.blueprint\n            and context.other_card:is_suit('Diamonds', false) and not context.repetition then\n            stg.tally = stg.tally + 1\n            return {\n                message = stg.tally .. '/' .. stg.goal,\n                colour = G.C.MULT,\n                message_card = card,\n                func = function()\n                    if stg.tally == stg.goal then\n                        context.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult or 0\n                        context.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult + stg.Xmult\n                        stg.tally = 0\n                        SMODS.calculate_effect({ message = localize('k_upgrade_ex'), colour = G.C.MULT }, card)\n                    end\n                end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "tally": 0,
          "goal": 20,
          "Xmult": 0.2
        }
      },
      "ability": {
        "extra": {
          "tally": 0,
          "goal": 20,
          "Xmult": 0.2
        }
      },
      "vars": [
        20,
        0.2,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "impractical_joker",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 1
      },
      "raw": "key = 'impractical_joker',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 1\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 3,\n            fail_Xmult = 0.5,\n            fails = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.fails, stg.Xmult, stg.fail_Xmult, localize(G.GAME.current_round.mxms_impractical_hand, 'poker_hands') }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            -- If correct hand is played\n            if context.scoring_name == G.GAME.current_round.mxms_impractical_hand then\n                if not context.blueprint then\n                    stg.fails = 0\n                end\n\n                return {\n                    x_mult = stg.Xmult,\n                }\n\n                -- If incorrect hand is played\n            else\n                if not context.blueprint then\n                    stg.fails = stg.fails + 1\n                end\n\n                -- If below 3 fails\n                if stg.fails < 3 then\n                    return {\n                        message = localize('k_mxms_fail') .. ' ' .. stg.fails,\n                        colour = G.C.RED,\n                        card = card\n                    }\n\n                    -- If 3 fails\n                elseif stg.fails == 3 then\n                    return {\n                        message = 'Tonight\\'s Biggest Loser',\n                        Xmult_mod = stg.fail_Xmult,\n                        colour = G.C.RED,\n                        card = card\n                    }\n                end\n            end\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            stg.fails = 0\n            return {\n                message = localize('k_reset'),\n                colour = G.C.CHIPS,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 3,
          "fail_Xmult": 0.5,
          "fails": 0
        }
      },
      "ability": {
        "extra": {
          "Xmult": 3,
          "fail_Xmult": 0.5,
          "fails": 0
        }
      },
      "vars": [
        0,
        3,
        0.5,
        "localize(G.GAME.current_round.mxms_impractical_hand",
        "'poker_hands')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jackpot",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 3
      },
      "raw": "key = 'jackpot',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 3\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            money = 15,\n            prob = 1,\n            odds = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'jackpot'), stg.money}\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before then\n            local sevens = 0\n\n            for k, v in ipairs(context.scoring_hand) do\n                if v:get_id() == 7 then\n                    sevens = sevens + 1\n                end\n            end\n\n            if sevens >= 3 then\n                if SMODS.pseudorandom_probability(card, 'jackpot', stg.prob, stg.odds) then\n                    SMODS.calculate_effect({ message = localize('k_mxms_jackpot_ex'), colour = G.C.MONEY },\n                        context.blueprint_card or card)\n                    return {\n                        dollars = stg.money,\n                        card = card\n                    }\n                else\n                    return {\n                        card = card,\n                        message = localize('k_nope_ex'),\n                        colour = G.C.SET.Tarot\n                    }\n                end\n            end\n        end\n    end",
      "config": {
        "extra": {
          "money": 15,
          "prob": 1,
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "money": 15,
          "prob": 1,
          "odds": 3
        }
      },
      "vars": [
        0,
        1,
        1,
        3,
        "'jackpot')",
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jestcoin",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 16
      },
      "raw": "key = 'jestcoin',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 16\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            money = 2,\n            prob = 1,\n            odds = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = false,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.money, SMODS.get_probability_vars(card, stg.prob, stg.odds, 'jestcoin')}\n        }\n    end,\n    calc_dollar_bonus = function(self, card)\n        local stg = card.ability.extra\n\n        if SMODS.pseudorandom_probability(card, 'jestcoin', stg.prob, stg.odds) then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    ease_dollars(-G.GAME.dollars, true)\n                    return true;\n                end\n            }))\n            SMODS.calculate_effect({ message = localize('k_mxms_crashed_ex'), colour = G.C.RED }, card)\n            stg.money = 2\n            SMODS.calculate_effect({ message = localize('k_reset'), colour = G.C.ATTENTION }, card)\n        else\n            local cashout = stg.money\n            stg.money = stg.money ^ 2\n            SMODS.calculate_effect({ message = localize('k_upgrade_ex'), colour = G.C.MONEY }, card)\n            SMODS.calculate_context({ mxms_scaling_card = true })\n            return cashout\n        end\n    end",
      "config": {
        "extra": {
          "money": 2,
          "prob": 1,
          "odds": 3
        }
      },
      "ability": {
        "extra": {
          "money": 2,
          "prob": 1,
          "odds": 3
        }
      },
      "vars": [
        2,
        0,
        1,
        1,
        3,
        "'jestcoin')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "jobber",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "key = 'jobber',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    cost = 8,\n    calculate = function(self, card, context)\n        if context.before and not context.blueprint then\n            -- Check if played hand is all debuffed cards\n            local all_debuffed = true\n            for i = 1, #context.scoring_hand do\n                if not context.scoring_hand[i].debuff then\n                    all_debuffed = false\n                    break\n                end\n            end\n\n            -- Fail if not all debuffed\n            if not all_debuffed then\n                return\n            else\n                -- Store all eligible jokers in table\n                -- Code derived Madness\n                local eligible_jokers = {}\n                for i = 1, #G.jokers.cards do\n                    if G.jokers.cards[i] ~= card then\n                        eligible_jokers[#eligible_jokers + 1] = G.jokers.cards[i]\n                    end\n                end\n\n                -- Fail if no held jokers are eligible\n                if next(eligible_jokers) == nil then\n                    return {\n                        message = localize('k_mxms_no_target_el'),\n                        colour = G.C.RED\n                    }\n                else\n                    -- Destroy Jobber\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            card:start_dissolve({ G.C.YELLOW }, nil, 1.6)\n                            return true;\n                        end\n                    }))\n                end\n\n                -- Choose Joker to copy\n                local chosen_joker = #eligible_jokers > 0 and\n                    pseudorandom_element(eligible_jokers, pseudoseed('jobber' .. G.GAME.round_resets.ante)) or nil\n\n                -- Copy Joker and add to hand\n                if chosen_joker ~= nil then\n                    local new_card = copy_card(chosen_joker, nil, nil, nil,\n                        chosen_joker.edition and chosen_joker.edition.negative)\n                    new_card:start_materialize()\n                    new_card:add_to_deck()\n                    if new_card.edition and new_card.edition.negative then\n                        new_card:set_edition(nil, true)\n                    end\n                    G.jokers:emplace(new_card)\n                    return {\n                        message = localize('k_mxms_jobbed'),\n                        colour = G.C.YELLOW\n                    }\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "template",
      "atlas": "Placeholder",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'template',\n    atlas = 'Placeholder',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    rarity = 1,\n    config = {\n        extra = {\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = {}\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n    end",
      "config": {
        "extra": {}
      },
      "ability": {
        "extra": {}
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "joker_plus",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'joker_plus',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 1\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            mult = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 5
        }
      },
      "ability": {
        "extra": {
          "mult": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "kings_rook",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 10
      },
      "raw": "key = 'kings_rook',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 10\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            base_xmult = 1.5,\n            better_xmult = 2,\n            both_ranks = false\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.base_xmult, stg.better_xmult } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before then\n            local fives = false\n            local kings = false\n\n            for i = 1, #context.scoring_hand do\n                if context.scoring_hand[i]:get_id() == 5 then\n                    fives = true\n                elseif context.scoring_hand[i]:get_id() == 13 then\n                    kings = true\n                end\n            end\n\n            stg.both_ranks = fives and kings\n        end\n\n        if context.individual and context.cardarea == G.play then\n            local first_five = nil\n            local first_king = nil\n\n            for i = 1, #context.scoring_hand do\n                if context.scoring_hand[i]:get_id() == 5 and not first_five then\n                    first_five = context.scoring_hand[i]\n                elseif context.scoring_hand[i]:get_id() == 13 and not first_king then\n                    first_king = context.scoring_hand[i]\n                end\n            end\n\n            if context.other_card == first_five or context.other_card == first_king then\n                return {\n                    x_mult = stg.both_ranks and stg.better_xmult or stg.base_xmult\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "base_xmult": 1.5,
          "better_xmult": 2,
          "both_ranks": false
        }
      },
      "ability": {
        "extra": {
          "base_xmult": 1.5,
          "better_xmult": 2,
          "both_ranks": false
        }
      },
      "vars": [
        1.5,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "lazy",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 4
      },
      "raw": "key = 'lazy',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        chips = 40,\n        type = 'High Card'\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability\n        return {\n            vars = { stg.chips, stg.type }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability\n        if context.joker_main and context.scoring_name == 'High Card' then\n            return {\n                chips = stg.chips\n            }\n        end\n    end",
      "config": {
        "chips": 40,
        "type": "High Card"
      },
      "ability": {
        "chips": 40,
        "type": "High Card"
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ledger",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 7
      },
      "raw": "key = 'ledger',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 7\n    },\n    soul_pos = {\n        x = 0,\n        y = 8\n    },\n    cost = 20,\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition and G.GAME.blind and G.GAME.blind.boss then\n            local eligible_jokers = {}\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] ~= card and not G.jokers.cards[i].edition and not G.jokers.cards[i].getting_sliced then\n                    eligible_jokers[#eligible_jokers + 1] = G.jokers.cards[i]\n                end\n            end\n\n            -- Fail if no held jokers are eligible\n            if next(eligible_jokers) == nil then\n                return {\n                    message = localize('k_mxms_no_target_el'),\n                    colour = G.C.PURPLE\n                }\n            else\n                -- Choose Joker to affect\n                local chosen_joker =\n                    #eligible_jokers > 0 and\n                    pseudorandom_element(eligible_jokers, pseudoseed('ledger' .. G.GAME.round_resets.ante)) or nil\n\n                -- Add negative edition to random held joker\n\n                if chosen_joker ~= nil then\n                    chosen_joker:set_edition({\n                        negative = true\n                    }, true)\n                    return {\n                        message = localize('k_mxms_serious_q'),\n                        colour = G.C.PURPLE\n                    }\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "leftovers",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "key = 'leftovers',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    eternal_compat = false,\n    cost = 4,\n    pools = {\n        Food = true\n    },\n    rarity = 1",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "leto",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 7
      },
      "raw": "key = 'leto',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 7\n    },\n    soul_pos = {\n        x = 6,\n        y = 8\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    blueprint_compat = true,\n    cost = 20,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    calculate = function(self, card, context)\n        if context.first_hand_drawn then\n            local cen_pool = {}\n            for k, v in pairs(G.P_CENTER_POOLS[\"Enhanced\"]) do\n                if v.key ~= 'm_stone' then\n                    cen_pool[#cen_pool + 1] = v.key\n                end\n            end\n\n            local _card = SMODS.add_card({\n                set = 'Playing Card',\n                rank = 'Queen',\n                enhancement = pseudorandom_element(cen_pool, pseudoseed('leto_enh')),\n                key_append = 'leto'\n            })\n\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    _card:start_materialize()\n                    G.GAME.blind:debuff_card(_card)\n                    G.hand:sort();\n                    (context.blueprint_card or card):juice_up()\n                    return true\n                end\n            }))\n\n            playing_card_joker_effects({ _card })\n\n            return nil, true\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "letter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 11
      },
      "raw": "key = 'letter',\n        atlas = 'Jokers',\n        pos = {\n            x = 1,\n            y = 11\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        rarity = 2,\n        blueprint_compat = true,\n        cost = 4,\n        calculate = function(self, card, context)\n            if context.mxms_beat_horoscope and #G.mxms_horoscope.cards + G.GAME.mxms_horoscope_buffer < G.mxms_horoscope.config.card_limit + 1 then\n                G.GAME.mxms_horoscope_buffer = G.GAME.mxms_horoscope_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        SMODS.add_card({\n                            set = 'Horoscope',\n                            area = G.mxms_horoscope,\n                            key_append = 'lor',\n                            discover = true\n                        })\n                        G.GAME.mxms_horoscope_buffer = G.GAME.mxms_horoscope_buffer - 1\n                        return true;\n                    end\n                }))\n                SMODS.calculate_effect({ message = localize('k_mxms_plus_horoscope'), colour = Maximus.C.HOROSCOPE },\n                    context.blueprint_card or card)\n            end\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "light_show",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "key = 'light_show',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 4\n    },\n    config = {\n        extra = {\n            reps = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 1,\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_bonus\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_mult\n        return {}\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.repetition and context.cardarea == G.play and\n            (SMODS.has_enhancement(context.other_card, 'm_bonus') or\n            SMODS.has_enhancement(context.other_card, 'm_mult')) then\n            return {\n                message = localize('k_again_ex'),\n                repetitions = stg.reps,\n                card = card\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_bonus') or SMODS.has_enhancement(v, 'm_mult') then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {
        "extra": {
          "reps": 1
        }
      },
      "ability": {
        "extra": {
          "reps": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "lint",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 14
      },
      "raw": "key = 'lint',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 14\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            sub = 1\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.sub }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if G.STATE == G.STATES.SHOP and context.selling_card and string.sub(context.card.config.center.key, 1, 2) == 'c_' then\n            for k, v in pairs(G.shop_jokers.cards) do\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.1,\n                    func = function()\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                (context.blueprint_card or card):juice_up()\n                                v.cost = v.cost - stg.sub >= 0 and v.cost - stg.sub or 0\n                                return true;\n                            end\n                        }))\n                        local reduction = v.cost - stg.sub >= 0 and stg.sub or v.cost\n                        SMODS.calculate_effect({\n                            message = '-' .. localize('$') .. reduction,\n                            colour = G.C.MONEY,\n                            sound = 'coin1'\n                        }, v)\n                        return true;\n                    end\n                }))\n            end\n\n            for k, v in pairs(G.shop_vouchers.cards) do\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.1,\n                    func = function()\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                (context.blueprint_card or card):juice_up()\n                                v.cost = v.cost - stg.sub >= 0 and v.cost - stg.sub or 0\n                                return true;\n                            end\n                        }))\n                        local reduction = v.cost - stg.sub >= 0 and stg.sub or v.cost\n                        SMODS.calculate_effect({\n                            message = '-' .. localize('$') .. reduction,\n                            colour = G.C.MONEY,\n                            sound = 'coin1'\n                        }, v)\n                        return true;\n                    end\n                }))\n            end\n\n            for k, v in pairs(G.shop_booster.cards) do\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.1,\n                    func = function()\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                (context.blueprint_card or card):juice_up()\n                                v.cost = v.cost - stg.sub >= 0 and v.cost - stg.sub or 0\n                                return true;\n                            end\n                        }))\n                        local reduction = v.cost - stg.sub >= 0 and stg.sub or v.cost\n                        SMODS.calculate_effect({\n                            message = '-' .. localize('$') .. reduction,\n                            colour = G.C.MONEY,\n                            sound = 'coin1'\n                        }, v)\n                        return true;\n                    end\n                }))\n            end\n        end\n    end",
      "config": {
        "extra": {
          "sub": 1
        }
      },
      "ability": {
        "extra": {
          "sub": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "little_brother",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 11
      },
      "raw": "key = 'little_brother',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 11\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            current_triggers = 0,\n            trigger_limit = 1,\n            copied_key = nil\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 10,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        card.ability.blueprint_compat_ui = card.ability.blueprint_compat_ui or ''\n        card.ability.blueprint_compat_check = nil\n        return {\n            vars = { stg.trigger_limit },\n            main_end = (card.area and card.area == G.jokers) and {\n                {\n                    n = G.UIT.C,\n                    config = { align = \"bm\", minh = 0.4 },\n                    nodes = {\n                        {\n                            n = G.UIT.C,\n                            config = {\n                                ref_table = card,\n                                align = \"m\",\n                                colour = G.C.JOKER_GREY,\n                                r = 0.05,\n                                padding = 0.06,\n                                func = \"blueprint_compat\",\n                            },\n                            nodes = {\n                                {\n                                    n = G.UIT.T,\n                                    config = {\n                                        ref_table = card.ability,\n                                        ref_value = \"blueprint_compat_ui\",\n                                        colour = G.C.UI.TEXT_LIGHT,\n                                        scale = 0.32 * 0.8,\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            } or nil,\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        local my_pos = 0\n\n        for i = 1, #G.jokers.cards do\n            if G.jokers.cards[i] == card then\n                my_pos = i\n                break\n            end\n        end\n\n        if my_pos > 1 and stg.current_triggers < stg.trigger_limit then\n            local other_joker = G.jokers.cards[my_pos - 1]\n            if other_joker.config.center.key ~= stg.copied_key then\n                stg.copied_key = other_joker.config.center.key\n                stg.trigger_limit = 1\n            end\n\n            if other_joker and other_joker ~= card and not context.no_blueprint then\n                context.blueprint = (context.blueprint and (context.blueprint + 1)) or 1\n                context.blueprint_card = context.blueprint_card or card\n                local other_joker_ret = other_joker:calculate_joker(context)\n                context.blueprint = nil\n                local eff_card = context.blueprint_card or card\n                context.blueprint_card = nil\n                if other_joker_ret then\n                    other_joker_ret.card = eff_card\n                    other_joker_ret.colour = G.C.BLUE\n                    stg.current_triggers = stg.current_triggers + 1\n                    return other_joker_ret\n                end\n            end\n        end\n\n        if context.after then\n            stg.current_triggers = 0\n            stg.trigger_limit = stg.trigger_limit + 1\n        end\n    end,\n    update = function(self, card, front)\n        if G.STAGE == G.STAGES.RUN then\n            local other_joker = nil\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card and i > 1 then\n                    other_joker = G.jokers.cards[i - 1]\n                end\n            end\n            if other_joker and other_joker ~= card and other_joker.config.center.blueprint_compat then\n                card.ability.blueprint_compat = \"compatible\"\n            else\n                card.ability.blueprint_compat = \"incompatible\"\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "loaded_gun",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "key = 'loaded_gun',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 4\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 1.5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    enhancement_gate = 'm_steel',\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_steel\n        return { vars = { stg.Xmult } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.individual and context.cardarea == G.play and SMODS.has_enhancement(context.other_card, 'm_steel') then\n            return {\n                x_mult = stg.Xmult,\n                colour = G.C.MULT,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 1.5
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1.5
        }
      },
      "vars": [
        1.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "loony",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 4
      },
      "raw": "key = 'loony',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        mult = 10,\n        type = 'High Card'\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability\n        return {\n            vars = { stg.mult, stg.type }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability\n        if context.joker_main and context.scoring_name == 'High Card' then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "mult": 10,
        "type": "High Card"
      },
      "ability": {
        "mult": 10,
        "type": "High Card"
      },
      "vars": [
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "lucy",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 16
      },
      "raw": "key = 'lucy',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 16\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            prob_gain = 1,\n            odds = 5,\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        return {\n            vars = { stg.prob_gain * G.GAME.probabilities.normal, stg.odds }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before then\n            local prob = 0\n\n            for k, v in pairs(context.scoring_hand) do\n                if v:is_suit('Diamonds') then\n                    prob = prob + stg.prob_gain\n                end\n            end\n\n            if SMODS.pseudorandom_probability(card, 'lucy', prob, stg.odds) then\n                if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n                    local planet_key\n                    for k, v in pairs(G.P_CENTER_POOLS.Planet) do\n                        if v.config.hand_type == G.GAME.last_hand_played then\n                            planet_key = v.key\n                        end\n                    end\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            SMODS.add_card({ key = planet_key })\n                            G.GAME.consumeable_buffer = 0\n                            return true;\n                        end\n                    }))\n                    return {\n                        message = localize('k_plus_planet'),\n                        colour = G.C.SECONDARY_SET.Planet\n                    }\n                end\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob_gain": 1,
          "odds": 5
        }
      },
      "ability": {
        "extra": {
          "prob_gain": 1,
          "odds": 5
        }
      },
      "vars": [
        null,
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "man_in_the_mirror",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 3
      },
      "raw": "-- Man in the Mirror\n    key = 'man_in_the_mirror',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 3\n    },\n    blueprint_compat = false,\n    eternal_compat = false,\n    cost = 8,\n    rarity = 2,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.e_negative\n    end,\n    calculate = function(self, card, context)\n        if context.selling_self and not context.blueprint then\n            card:shatter()\n            -- Fail if no held consumeables\n            if next(G.consumeables.cards) == nil then\n                return {\n                    message = localize('k_mxms_no_target_el'),\n                    colour = G.C.PURPLE\n                }\n            else\n                -- Add negative edition to all held consumeables\n                for k, v in ipairs(G.consumeables.cards) do\n                    if not (v.edition and v.edition.negative) then\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            func = function()\n                                local new_card = copy_card(v, nil, nil, nil, v.edition and v.edition.negative)\n                                new_card:set_edition({\n                                    negative = true\n                                }, true)\n                                new_card:start_materialize()\n                                new_card:add_to_deck()\n                                G.consumeables:emplace(new_card)\n                                return true\n                            end\n                        }))\n                    end\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "marco_polo",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 4
      },
      "raw": "key = 'marco_polo',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            base_mult = 12,\n            dMult = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.base_mult, stg.dMult } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            local position = 0\n            for i = 0, #G.jokers.cards do\n                if G.jokers.cards[i] == card then\n                    position = i\n                end\n            end\n\n            local mult = stg.base_mult - (stg.dMult * (math.abs(position - G.GAME.current_round.mxms_marco_polo_pos)))\n\n            if mult < 0 then\n                mult = 0\n            end\n\n            return {\n                mult = mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "base_mult": 12,
          "dMult": 3
        }
      },
      "ability": {
        "extra": {
          "base_mult": 12,
          "dMult": 3
        }
      },
      "vars": [
        12,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "maurice",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 17
      },
      "raw": "key = 'maurice',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 17\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_wild\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "memory_game",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 9
      },
      "raw": "key = 'memory_game',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 9\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    rarity = 1,\n    blueprint_compat = false,\n    cost = 5,\n    calculate = function(self, card, context)\n        if context.before and context.scoring_name == \"Pair\" and not context.blueprint then\n            play_sound('tarot1')\n            card:juice_up(0.3, 0.5)\n\n            delay(0.2)\n\n            for i = 1, 2 do\n                local percent = 1.15 - (i - 0.999) / (#context.scoring_hand - 0.998) * 0.3\n                context.scoring_hand[i]:flip();\n                play_sound('card1', percent);\n                context.scoring_hand[i]:juice_up(0.3, 0.3);\n            end\n\n            delay(0.2)\n\n            copy_card(context.scoring_hand[2], context.scoring_hand[1])\n\n            for i = 1, 2 do\n                local percent = 0.85 - (i - 0.999) / (#context.scoring_hand - 0.998) * 0.3\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.15,\n                    func = function()\n                        context.scoring_hand[i]:flip();\n                        play_sound('card1', percent);\n                        context.scoring_hand[i]:juice_up(0.3, 0.3);\n                        return true\n                    end\n                }))\n            end\n            delay(0.5)\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "messiah",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 13
      },
      "raw": "key = 'messiah',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 13\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            mult = 0,\n            gain = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS['c_sun']\n        return {\n            vars = { stg.gain, stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.using_consumeable and context.consumeable.config.center.key == 'c_sun' and not context.blueprint then\n            stg.mult = stg.mult + stg.gain * G.GAME.mxms_soil_mod\n            SMODS.calculate_effect(\n                { message = localize { type = 'variable', key = 'a_mult', vars = { stg.mult } }, colour = G.C.MULT },\n                card)\n            SMODS.calculate_context({ mxms_scaling_card = true })\n        end\n\n        if context.joker_main and stg.mult > 0 then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 0,
          "gain": 5
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "gain": 5
        }
      },
      "vars": [
        5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "microwave",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'microwave',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    eternal_compat = false,\n    cost = 6,\n    calculate = function(self, card, context)\n        -- Thank you to theonegoodali from the Balatro Discord for helping me with this conditional\n        if context.retrigger_joker_check and not context.retrigger_joker and context.other_card.ability then\n            if mxms_is_food(context.other_card) and context.other_card.config.center.key ~= \"j_mxms_leftovers\" then\n                return {\n                    message = localize('k_again_ex'),\n                    repetitions = 1,\n                    card = card\n                }\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "minimalist",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 6
      },
      "raw": "key = 'minimalist',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 6\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            chips = 90,\n            base_chips = 90,\n            dChips = 15\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        stg.chips = stg.base_chips\n        if G.playing_cards then\n            for k, v in pairs(G.playing_cards) do\n                if next(SMODS.get_enhancements(v)) and stg.chips > 0 then\n                    stg.chips = stg.chips - stg.dChips\n                end\n            end\n        end\n\n        return {\n            vars = { stg.base_chips, stg.chips, stg.dChips }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main then\n            stg.chips = stg.base_chips\n            for k, v in pairs(G.playing_cards) do\n                if next(SMODS.get_enhancements(v)) and stg.chips > 0 then\n                    stg.chips = stg.chips - stg.dChips\n                end\n            end\n\n            return {\n                chips = stg.chips\n            }\n        end\n    end",
      "config": {
        "extra": {
          "chips": 90,
          "base_chips": 90,
          "dChips": 15
        }
      },
      "ability": {
        "extra": {
          "chips": 90,
          "base_chips": 90,
          "dChips": 15
        }
      },
      "vars": [
        90,
        90,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "monk",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 4
      },
      "raw": "key = 'monk',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            purchase_made = false,\n            chips = 0,\n            gain = 25\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.chips, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.chips > 0 then\n            return {\n                chips = stg.chips\n            }\n        end\n\n        if (context.buying_card or context.open_booster or context.reroll_shop) and not context.blueprint then\n            stg.purchase_made = true\n        end\n\n        if context.ending_shop and not context.blueprint then\n            if not stg.purchase_made then\n                stg.chips = stg.chips + stg.gain * G.GAME.mxms_soil_mod\n                SMODS.calculate_effect(\n                    { message = localize { type = 'variable', key = 'a_chips', vars = { stg.chips } } },\n                    card)\n                SMODS.calculate_context({ mxms_scaling_card = true })\n            end\n            stg.purchase_made = false\n        end\n    end",
      "config": {
        "extra": {
          "purchase_made": false,
          "chips": 0,
          "gain": 25
        }
      },
      "ability": {
        "extra": {
          "purchase_made": false,
          "chips": 0,
          "gain": 25
        }
      },
      "vars": [
        0,
        25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "moon_landing",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 11
      },
      "raw": "key = 'moon_landing',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 11\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 5,\n    calculate = function(self, card, context)\n        if context.mxms_post_handtype_scoring and not context.blueprint then\n            local hand_is_second = false\n            local high_level, second_level, highest, second = to_big(0), to_big(0), {}, {}\n\n            for k, v in pairs(G.GAME.hands) do\n                if v.visible and to_big(v.level) > high_level then\n                    high_level = to_big(v.level)\n                    highest = { k }\n                elseif v.visible and to_big(v.level) == highest then\n                    highest[#highest + 1] = k\n                elseif v.visible and to_big(v.level) > second_level and to_big(v.level) < high_level then\n                    second_level = to_big(v.level)\n                    second = { k }\n                elseif v.visible and to_big(v.level) == second_level then\n                    second[#second + 1] = k\n                end\n            end\n\n            for i = 1, #second do\n                if context.scoring_name == second[i] then\n                    hand_is_second = true\n                end\n            end\n\n            if hand_is_second then\n                local best_choice\n                local best_value = to_big(0)\n\n                for i = 1, #highest do\n                    if to_big(G.GAME.hands[highest[i]].chips * G.GAME.hands[highest[i]].mult) > best_value then\n                        best_value = to_big(G.GAME.hands[highest[i]].chips * G.GAME.hands[highest[i]].mult)\n                        best_choice = highest[i]\n                    end\n                end\n\n                update_hand_text(\n                    { sound = 'chips2', volume = 0.7, pitch = 1.1, delay = 0 },\n                    { mult = G.GAME.hands[best_choice].mult, chips = G.GAME.hands[best_choice].chips }\n                )\n\n                return {\n                    message = localize('k_mxms_step_el'),\n                    colour = G.C.ATTENTION,\n                    card = card,\n                    func = function()\n                        hand_chips = mod_chips(G.GAME.hands[best_choice].chips)\n                        mult = mod_mult(G.GAME.hands[best_choice].mult)\n                    end\n                }\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "nicholson",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 7
      },
      "raw": "key = 'nicholson',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 7\n    },\n    soul_pos = {\n        x = 4,\n        y = 8\n    },\n    config = {\n        extra = {\n            reps = 1\n        }\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"9mmPeter\"\n    },\n    blueprint_compat = true,\n    cost = 20,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.other_card and context.other_card.edition and\n            (context.repetition and context.cardarea == G.play or\n                context.retrigger_joker_check and not context.retrigger_joker) then\n            return {\n                message = localize('k_again_ex'),\n                repetitions = stg.reps,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "reps": 1
        }
      },
      "ability": {
        "extra": {
          "reps": 1
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "nomai",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 14
      },
      "raw": "key = 'nomai',\n        atlas = 'Jokers',\n        pos = {\n            x = 3,\n            y = 14\n        },\n        rarity = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"theAstra\"\n        },\n        blueprint_compat = true,\n        cost = 4,\n        calculate = function(self, card, context)\n            if context.using_consumeable and context.consumeable.ability.set == \"Planet\"\n                and #G.mxms_horoscope.cards + G.GAME.mxms_horoscope_buffer < G.mxms_horoscope.config.card_limit then\n                G.GAME.mxms_horoscope_buffer = G.GAME.mxms_horoscope_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.2,\n                    func = function()\n                        local new_card = SMODS.add_card({set = 'Horoscope', area = G.mxms_horoscope, key_append = 'nomai', discover = true})\n                        new_card:juice_up(0.3, 0.4)\n                        G.GAME.mxms_horoscope_buffer = 0\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_mxms_plus_horoscope'),\n                    colour = Maximus.C.HOROSCOPE\n                }\n            end\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "normal",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 1
      },
      "raw": "key = 'normal',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    config = {\n        extra = {\n            mult = 2,\n            chips = 15\n        }\n    },\n    discovered = true,\n    order = 2,\n    rarity = 1,\n    blueprint_compat = true,\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.mult, stg.chips } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if card.area ~= G.title_top and context.individual and context.cardarea == G.play then\n            if not context.other_card.edition and not context.other_card.seal and not next(SMODS.get_enhancements(context.other_card)) then\n                return {\n                    mult = stg.mult,\n                    chips = stg.chips,\n                    card = card\n                }\n            end\n        end\n    end,",
      "config": {
        "extra": {
          "mult": 2,
          "chips": 15
        }
      },
      "ability": {
        "extra": {
          "mult": 2,
          "chips": 15
        }
      },
      "vars": [
        2,
        15
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "obelisk",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 12
      },
      "raw": "key = 'obelisk',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 12\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            gain = 1,\n            Xmult = 1,\n            unscoring_cards = 0,\n            unscoring_goal = 2\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain, stg.Xmult, stg.unscoring_goal }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.individual and context.cardarea == 'unscored' and not context.blueprint and not context.other_card.debuff then\n            stg.unscoring_cards = stg.unscoring_cards + 1\n            if stg.unscoring_cards < stg.unscoring_goal then\n                return {\n                    delay = 0.4,\n                    message = stg.unscoring_cards .. '/' .. stg.unscoring_goal,\n                    colour = G.C.MULT,\n                    card = card\n                }\n            else\n                stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                stg.unscoring_cards = 0\n                return {\n                    delay = 0.4,\n                    message = localize('k_mxms_tribute_ex'),\n                    colour = G.C.CHIPS,\n                    card = card,\n                    func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n                }\n            end\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            stg.unscoring_cards = 0\n            stg.Xmult = 1\n            return {\n                message = localize('k_reset'),\n                colour = G.C.RED,\n                card = card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 1,
          "Xmult": 1,
          "unscoring_cards": 0,
          "unscoring_goal": 2
        }
      },
      "ability": {
        "extra": {
          "gain": 1,
          "Xmult": 1,
          "unscoring_cards": 0,
          "unscoring_goal": 2
        }
      },
      "vars": [
        1,
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "occam",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 9
      },
      "raw": "key = 'occam',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 9\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { (G.hand and G.hand.config.highlighted_limit or 5) + 1 } }\n    end,\n    calculate = function(self, card, context)\n        if context.before then\n            for k, v in pairs(context.full_hand) do\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        v:juice_up()\n                        return true;\n                    end\n                }))\n                SMODS.calculate_effect({ message = '-X1', colour = G.C.MULT }, card)\n            end\n        end\n\n        if context.joker_main and #context.full_hand < G.hand.config.highlighted_limit then\n            return {\n                x_mult = G.hand.config.highlighted_limit - #context.full_hand + 1\n            }\n        end\n\n        if context.after then\n            return {\n                message = localize('k_reset')\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        "(G.hand and G.hand.config.highlighted_limit or 5) + 1"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "old_man_jimbo",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'old_man_jimbo',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 1\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            gain = 0.5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return { vars = { stg.gain } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main then\n            return {\n                x_mult = 1 + (stg.gain * G.GAME.current_round.hands_left)\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.5
        }
      },
      "ability": {
        "extra": {
          "gain": 0.5
        }
      },
      "vars": [
        0.5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "perspective",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "key = 'perspective',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 0\n    },\n    rarity = 1,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 3",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pessimistic",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 1
      },
      "raw": "key = 'pessimistic',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 1\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            mult = 0,\n            lucky_gain = 3\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.mult, stg.lucky_gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.mult > 0 then\n            return {\n                mult = stg.mult\n            }\n        end\n\n        if context.pseudorandom_result and (not context.result and not mxms_is_invert_prob_check(context.card) or context.success and mxms_is_invert_prob_check(context.card)) and not context.blueprint then\n            if context.card.ability.effect ~= 'Lucky Card' then\n                stg.mult = stg.mult + (context.denominator - context.numerator)\n            else\n                stg.mult = stg.mult + card.ability.extra.lucky_gain\n            end\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.ATTENTION,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 0,
          "lucky_gain": 3
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "lucky_gain": 3
        }
      },
      "vars": [
        0,
        3
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "phoenix",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 7
      },
      "raw": "key = 'phoenix',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 7\n    },\n    soul_pos = {\n        x = 7,\n        y = 8\n    },\n    rarity = 4,\n    unlocked = false,\n    unlock_condition = {\n        type = '',\n        extra = '',\n        hidden = true\n    },\n    blueprint_compat = false,\n    cost = 20,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_SEALS.Red\n    end,\n    calculate = function(self, card, context)\n        if context.after and not context.blueprint then\n            local faces = 0\n            for k, v in pairs(context.scoring_hand) do\n                if v:is_face() then\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'after',\n                        delay = 0.5,\n                        func = function()\n                            v:start_dissolve()\n                            card:juice_up(0.8, 0.8)\n                            return true;\n                        end\n                    }))\n                    faces = faces + 1\n                end\n            end\n\n            if faces > 0 then\n                for k, v in pairs(context.scoring_hand) do\n                    if not v:is_face() then\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.5,\n                            func = function()\n                                v:set_seal('Red', nil, true)\n                                card:juice_up(0.3, 0.4)\n                                return true;\n                            end\n                        }))\n                    end\n                end\n                return {\n                    message = localize('k_mxms_deserved_ex'),\n                    colour = G.C.RED\n                }\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "piggy_bank",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 15
      },
      "raw": "key = 'piggy_bank',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            dollars_stored = 0,\n            chip_factor = 20\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.chip_factor, stg.dollars_stored, stg.dollars_stored * stg.chip_factor }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.money_up and not card.shattered and not context.blueprint then\n            stg.dollars_stored = stg.dollars_stored + 1\n            return {\n                message = localize('k_upgrade_ex')\n            }\n        end\n\n        if context.joker_main and stg.dollars_stored > 0 then\n            return {\n                chips = stg.dollars_stored * stg.chip_factor\n            }\n        end\n\n        if context.out_of_money and not context.blueprint then\n            return {\n                func = function()\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            card:shatter()\n                            ease_dollars(stg.dollars_stored)\n                            return true;\n                        end\n                    }))\n                end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "dollars_stored": 0,
          "chip_factor": 20
        }
      },
      "ability": {
        "extra": {
          "dollars_stored": 0,
          "chip_factor": 20
        }
      },
      "vars": [
        20,
        0,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pizza",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 13
      },
      "raw": "key = 'pizza',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 13\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            cards_left = 8\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = false,\n    perishable_compat = false,\n    eternal_compat = false,\n    cost = 4,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.cards_left }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before and not context.blueprint then\n            for k, v in ipairs(context.scoring_hand) do\n                if not v.seal and not v.debuff and not v.pizza_sealed and stg.cards_left > 0 then\n                    v.pizza_sealed = true\n                    v:set_seal(SMODS.poll_seal({ guaranteed = true, type_key = 'pza' }))\n                    stg.cards_left = stg.cards_left - (1 / G.GAME.mxms_fridge_mod)\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            v:juice_up()\n                            card:juice_up()\n                            v.pizza_sealed = nil\n                            return true\n                        end\n                    }))\n\n                    if stg.cards_left <= 0 then\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.2,\n                            func = function()\n                                play_sound('tarot2')\n                                card.T.r = -0.2\n                                card:juice_up(0.3, 0.4)\n                                card.states.drag.is = true\n                                card.children.center.pinch.x = true\n                                G.E_MANAGER:add_event(Event({\n                                    trigger = 'after',\n                                    delay = 0.3,\n                                    blockable = false,\n                                    func = function()\n                                        G.jokers:remove_card(card)\n                                        card:remove()\n                                        card = nil\n                                        return true;\n                                    end\n                                }))\n                                return true\n                            end\n                        }))\n                        return {\n                            card = card,\n                            message = localize('k_eaten_ex'),\n                            colour = G.C.FILTER\n                        }\n                    end\n                end\n            end\n        end\n    end",
      "config": {
        "extra": {
          "cards_left": 8
        }
      },
      "ability": {
        "extra": {
          "cards_left": 8
        }
      },
      "vars": [
        8
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "pngoker",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 10
      },
      "raw": "key = 'pngoker',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 10\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_glass\n    end,\n    calculate = function(self, card, context)\n        if context.before and G.GAME.current_round.hands_played == 0 then\n            for k, v in pairs(context.scoring_hand) do\n                v:set_ability(G.P_CENTERS.m_glass, nil, true)\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        v:juice_up()\n                        return true\n                    end\n                }))\n            end\n            return {\n                message = localize('k_mxms_glassed'),\n                colour = G.C.FILTER,\n                card = card\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "poet",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 5
      },
      "raw": "key = 'poet',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 5\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    cost = 8,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local same_rank = true\n            if context.scoring_name == 'Two Pair' then\n                local two_count = 0\n                local face_count = 0\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() == 2 then\n                        two_count = two_count + 1\n                    elseif v:get_id() > 10 then\n                        face_count = face_count + 1\n                    end\n                end\n\n                if two_count == 2 and face_count == 2 then\n                    return {\n                        x_mult = 2\n                    }\n                end\n            end\n\n            if context.scoring_name == 'Three Pair' then\n                local three_count = 0\n                local face_count = 0\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() == 2 then\n                        three_count = three_count + 1\n                    elseif v:get_id() > 10 then\n                        face_count = face_count + 1\n                    end\n                end\n\n                if three_count == 2 and face_count == 4 then\n                    return {\n                        x_mult = 3,\n                    }\n                end\n            end\n\n            if context.scoring_name == 'Three of a Kind' then\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() ~= 3 then\n                        same_rank = false\n                    end\n                end\n\n                if same_rank then\n                    return {\n                        x_mult = 3\n                    }\n                end\n            end\n\n            if context.scoring_name == 'Four of a Kind' then\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() ~= 4 then\n                        same_rank = false\n                    end\n                end\n\n                if same_rank then\n                    return {\n                        x_mult = 4\n                    }\n                end\n            end\n\n            if context.scoring_name == 'Five of a Kind' or context.scoring_name == 'Flush Five' then\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() ~= 5 then\n                        same_rank = false\n                    end\n                end\n\n                if same_rank then\n                    return {\n                        x_mult = 5,\n                    }\n                end\n            end\n\n            if context.scoring_name == 'Six of a Kind' or context.scoring_name == 'Flush Six' then\n                for k, v in ipairs(context.scoring_hand) do\n                    if v:get_id() ~= 5 then\n                        same_rank = false\n                    end\n                end\n\n                if same_rank then\n                    return {\n                        x_mult = 6,\n                    }\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "poindexter",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'poindexter',\n    atlas = 'Jokers',\n    rarity = 2,\n    pos = {\n        x = 1,\n        y = 0\n    },\n    config = {\n        extra = {\n            Xmult = 1.0,\n            gain = 0.25\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    enhancement_gate = 'm_glass',\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_glass\n        return {\n            vars = { stg.Xmult, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.after and not context.blueprint then\n            -- Check for shattered glass\n            for k, v in pairs(context.scoring_hand) do\n                if v.glass_trigger then\n                    return {\n                        message = localize('k_mxms_erm_el')\n                    }\n                end\n            end\n\n            -- If no shattered glass, add to mult\n            local glass = 0\n            for k, v in ipairs(context.scoring_hand) do\n                if SMODS.has_enhancement(v, 'm_glass') then\n                    glass = glass + 1\n                end\n            end\n            stg.Xmult = stg.Xmult + glass * stg.gain\n            return {\n                card = card,\n                message = localize('k_mxms_eureka_ex'),\n                colour = G.C.ATTENTION,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end,",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 0.25
        }
      },
      "vars": [
        1,
        0.25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "power_creep",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 5
      },
      "raw": "key = 'power_creep',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 5\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    cost = 7,\n    add_to_deck = function(self, card, from_debuff)\n        G.GAME.mxms_creep_mod = G.GAME.mxms_creep_mod * 2\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        G.GAME.mxms_creep_mod = G.GAME.mxms_creep_mod / 2\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if v.edition and (v.edition.type == 'foil'\n                    or v.edition.type == 'holo'\n                    or v.edition.type == 'polychrome') then\n                return true\n            end\n        end\n        for k, v in ipairs(G.jokers) do\n            if v.edition and (v.edition.type == 'foil'\n                    or v.edition.type == 'holo'\n                    or v.edition.type == 'polychrome') then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "prince",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 12
      },
      "raw": "key = 'prince',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 12\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            Xmult = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.e_polychrome\n        return {\n            vars = { stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and context.cardarea == G.hand and not context.end_of_round then\n            if context.other_card.edition and context.other_card.edition.polychrome and context.other_card:is_face() then\n                return {\n                    x_mult = stg.Xmult,\n                    card = card\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 2
        }
      },
      "ability": {
        "extra": {
          "Xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "prospector",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 15
      },
      "raw": "key = 'prospector',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 15\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            dollars = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_gold\n        return {\n            vars = { stg.dollars }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and context.end_of_round and context.cardarea == G.hand and SMODS.has_enhancement(context.other_card, 'm_gold') then\n            context.other_card.ability.h_dollars = context.other_card.ability.h_dollars + stg.dollars\n            return {\n                message = localize('k_upgrade_ex'),\n                message_card = context.other_card\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_gold') then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {
        "extra": {
          "dollars": 1
        }
      },
      "ability": {
        "extra": {
          "dollars": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "ra",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 17
      },
      "raw": "key = 'ra',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 17\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            gain = 0.1,\n            Xmult = 1\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain, stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.destroy_card and context.scoring_name == 'High Card' and context.cardarea == G.play and not context.blueprint then\n            stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n            local current_card = context.destroy_card\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    current_card:juice_up()\n                    current_card.debuff = true\n                    return true;\n                end\n            }))\n            return {\n                remove = true,\n                message = localize('k_mxms_sacrifice_ex'),\n                colour = G.C.RED\n            }\n        end\n\n        if context.joker_main then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.1,
          "Xmult": 1
        }
      },
      "ability": {
        "extra": {
          "gain": 0.1,
          "Xmult": 1
        }
      },
      "vars": [
        0.1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "random_encounter",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 3
      },
      "raw": "key = 'random_encounter',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 3\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            prob = 1,\n            odds = 4,\n            mult = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds), stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.individual and context.cardarea == G.play then\n            if SMODS.pseudorandom_probability(card, 'rand_enc', stg.prob, stg.odds) then\n                context.other_card.ability.perma_mult = context.other_card.ability.perma_mult or 0\n                context.other_card.ability.perma_mult = context.other_card.ability.perma_mult + stg.mult\n                return {\n                    message = localize('k_mxms_r_mult_ex'),\n                    colour = G.C.MULT,\n                    card = card\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 4,
          "mult": 1
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 4,
          "mult": 1
        }
      },
      "vars": [
        0,
        1,
        1,
        null,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "refrigerator",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "-- Refrigerator\n    key = 'refrigerator',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 6,\n    calculate = function(self, card, context)\n        if context.mod_probability and mxms_is_food(context.trigger_obj) then\n            if context.trigger_obj.config.center.key == 'j_mxms_fortune_cookie' then\n                return {\n                    numerator = context.numerator\n                }\n            end\n            return {\n                denominator = context.denominator\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rock_candy",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 14
      },
      "raw": "key = 'rock_candy',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 14\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"PsyAlola\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 5,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_stone\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "rock_slide",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 9
      },
      "raw": "key = 'rock_slide',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 9\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    cost = 6,\n    enhancement_gate = 'm_stone',\n    config = {\n        extra = {\n            stones = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_stone\n        return {\n            vars = { stg.stones }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.before and #context.scoring_hand == 5 then\n            local stone_tally = 0\n            for k, v in ipairs(context.scoring_hand) do\n                if SMODS.has_enhancement(v, 'm_stone') then\n                    stone_tally = stone_tally + 1\n                end\n            end\n\n            if stone_tally == 5 then\n                for i = 1, stg.stones do\n                    local _card = SMODS.create_card({\n                        set = 'Playing Card',\n                        area = G.discard,\n                        enhancement = 'm_stone',\n                        key_append = 'rock_slide'\n                    })\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            _card:start_materialize({ G.C.SECONDARY_SET.Enhanced })\n                            G.play:emplace(_card)\n                            return true\n                        end\n                    }))\n                    SMODS.calculate_effect({\n                        message = localize('k_plus_stone'),\n                        colour = G.C.SECONDARY_SET.Enhanced,\n                        func = function() draw_card(G.play, G.deck, 90, 'up', nil, _card) end\n                    }, context.blueprint or card)\n                end\n                playing_card_joker_effects({ true })\n            end\n        end\n    end",
      "config": {
        "extra": {
          "stones": 5
        }
      },
      "ability": {
        "extra": {
          "stones": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "romero",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 7
      },
      "raw": "key = 'romero',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 7\n    },\n    soul_pos = {\n        x = 3,\n        y = 8\n    },\n    rarity = 4,\n    config = {\n        extra = {\n            Xmult = 1,\n            gain = 0.1\n        }\n    },\n    unlocked = false,\n    unlock_condition = {\n        type = '', \n        extra = '', \n        hidden = true\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"PsyAlola\"\n    },\n    blueprint_compat = true,\n    cost = 20,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and stg.Xmult >= 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.card_added and context.card.ability.set == 'Joker' then\n            stg.Xmult = stg.Xmult + (stg.gain * G.GAME.mxms_soil_mod)\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.ATTENTION,\n                card = card,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 1,
          "gain": 0.1
        }
      },
      "ability": {
        "extra": {
          "Xmult": 1,
          "gain": 0.1
        }
      },
      "vars": [
        1,
        0.1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "salt_circle",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 4
      },
      "raw": "key = 'salt_circle',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 4\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            gain = 30\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.spectral * stg.gain or 0, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.spectral > 0 then\n            return {\n                chips = G.GAME.consumeable_usage_total.spectral * stg.gain\n            }\n        end\n\n        if not context.blueprint and context.using_consumeable and context.consumeable.ability.set == \"Spectral\" then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    SMODS.calculate_effect(\n                        { message = localize { type = 'variable', key = 'a_chips', vars = { G.GAME.consumeable_usage_total.spectral * stg.gain } } },\n                        card)\n                    SMODS.calculate_context({ mxms_scaling_card = true })\n                    return true\n                end\n            }))\n            return nil, true\n        end\n    end",
      "config": {
        "extra": {
          "gain": 30
        }
      },
      "ability": {
        "extra": {
          "gain": 30
        }
      },
      "vars": [
        null,
        30
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "schrodinger",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 10
      },
      "raw": "key = 'schrodinger',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 10\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    cost = 6,\n    calculate = function(self, card, context)\n        if context.retrigger_joker_check and not context.retrigger_joker and context.other_card.ability then\n            return {\n                message = localize('k_again_ex'),\n                repetitions = 1,\n                card = card\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "screaming",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 14
      },
      "raw": "key = 'screaming',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 14\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 4",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "secret_society",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "key = 'secret_society',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 5,\n    rarity = 2,\n    add_to_deck = function(self, card, from_debuff)\n        if not next(SMODS.find_card('j_mxms_secret_society')) then\n            SMODS.Ranks['Ace'].nominal = 4\n            SMODS.Ranks['King'].nominal = 6\n            SMODS.Ranks['Queen'].nominal = 6\n            SMODS.Ranks['Jack'].nominal = 6\n            SMODS.Ranks['10'].nominal = 6\n            SMODS.Ranks['9'].nominal = 8\n            SMODS.Ranks['8'].nominal = 10\n            SMODS.Ranks['7'].nominal = 12\n            SMODS.Ranks['6'].nominal = 14\n            SMODS.Ranks['5'].nominal = 16\n            SMODS.Ranks['4'].nominal = 18\n            SMODS.Ranks['3'].nominal = 20\n            SMODS.Ranks['2'].nominal = 22\n            for k, v in ipairs(G.playing_cards) do\n                v.base.nominal = SMODS.Ranks[v.base.value].nominal\n            end\n        end\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        if not next(SMODS.find_card('j_mxms_secret_society')) then\n            SMODS.Ranks['Ace'].nominal = 11\n            SMODS.Ranks['King'].nominal = 10\n            SMODS.Ranks['Queen'].nominal = 10\n            SMODS.Ranks['Jack'].nominal = 10\n            SMODS.Ranks['10'].nominal = 10\n            SMODS.Ranks['9'].nominal = 9\n            SMODS.Ranks['8'].nominal = 8\n            SMODS.Ranks['7'].nominal = 7\n            SMODS.Ranks['6'].nominal = 6\n            SMODS.Ranks['5'].nominal = 5\n            SMODS.Ranks['4'].nominal = 4\n            SMODS.Ranks['3'].nominal = 3\n            SMODS.Ranks['2'].nominal = 2\n            for k, v in ipairs(G.playing_cards) do\n                v.base.nominal = SMODS.Ranks[v.base.value].nominal\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "severed_floor",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 14
      },
      "raw": "key = 'severed_floor',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 14\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            money = 20,\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.money }\n        }\n    end,\n    calc_dollar_bonus = function(self, card)\n        return card.ability.extra.money\n    end",
      "config": {
        "extra": {
          "money": 20
        }
      },
      "ability": {
        "extra": {
          "money": 20
        }
      },
      "vars": [
        20
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "sisyphus",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 14
      },
      "raw": "key = 'sisyphus',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 14\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            gain = 1,\n            Xmult = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.gain, stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.after and not context.blueprint then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    if to_big(G.GAME.chips) - to_big(G.GAME.blind.chips) < to_big(0) then\n                        SMODS.calculate_effect(\n                            {\n                                message = localize('k_upgrade_ex'),\n                                colour = G.C.ATTENTION,\n                                func = function()\n                                    stg.Xmult = stg.Xmult + stg.gain * G.GAME.mxms_soil_mod\n                                    SMODS.calculate_context({ mxms_scaling_card = true })\n                                end\n                            }, card)\n                    end\n                    return true;\n                end\n            }))\n        end\n\n        if context.joker_main and stg.Xmult > 1 then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.end_of_round and not context.individual and not context.repetition then\n            stg.Xmult = 1\n            return {\n                message = localize('k_reset'),\n                colour = G.C.FILTER\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 1,
          "Xmult": 1
        }
      },
      "ability": {
        "extra": {
          "gain": 1,
          "Xmult": 1
        }
      },
      "vars": [
        1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "sleuth",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 5
      },
      "raw": "key = 'sleuth',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 5\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            slots = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.slots }\n        }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        change_shop_size(stg.slots)\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        change_shop_size(-stg.slots)\n    end",
      "config": {
        "extra": {
          "slots": 1
        }
      },
      "ability": {
        "extra": {
          "slots": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "slifer",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 10
      },
      "raw": "key = 'slifer',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 10\n    },\n    rarity = 3,\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and #G.hand.cards > 0 then\n            return {\n                x_mult = #G.hand.cards > 0 and #G.hand.cards or 1\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "slippery_slope",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 11
      },
      "raw": "key = 'slippery_slope',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 11\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    cost = 6,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            for k, v in pairs(context.poker_hands) do\n                if k ~= context.scoring_name and next(context.poker_hands[k]) then\n                    SMODS.calculate_effect({ message = G.localization.misc.poker_hands[k], colour = G.C.ATTENTION }, context.blueprint_card or card)\n                    SMODS.calculate_effect(\n                        { message = '+' .. tostring(G.GAME.hands[k].chips), chip_mod = G.GAME.hands[k].chips }, context.blueprint_card or card)\n                    SMODS.calculate_effect(\n                        { message = '+' .. tostring(G.GAME.hands[k].mult), mult_mod = G.GAME.hands[k].mult }, context.blueprint_card or card)\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "smoker",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 11
      },
      "raw": "key = 'smoker',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 11\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            chips = 0\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.chips }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main then\n            return {\n                chip_mod = stg.chips,\n                message = '+' .. stg.chips,\n                colour = G.C.CHIPS,\n                card = card\n            }\n        end\n\n        if context.scoring_name == 'High Card' and context.individual and context.cardarea == G.play then\n            stg.chips = stg.chips + context.other_card:get_chip_bonus() * G.GAME.mxms_soil_mod\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.CHIPS,\n                message_card = context.blueprint_card or card,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "chips": 0
        }
      },
      "ability": {
        "extra": {
          "chips": 0
        }
      },
      "vars": [
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "sneaky_spirit",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "key = 'sneaky_spirit',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 0\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            Xmult = 2,\n            discard_goal = 7,\n            discards = 0\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult, stg.discard_goal, stg.discards }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.discard and not context.blueprint then\n            stg.discards = stg.discards + 1\n            if stg.discards > stg.discard_goal then\n                stg.discards = 1\n                SMODS.calculate_effect({ message = localize('k_reset'), colour = G.C.RED, sound = 'mxms_spirit_miss' },\n                    card)\n            end\n            return {\n                message = stg.discards .. '/' .. stg.discard_goal,\n                sound = 'mxms_spirit_beh',\n            }\n        end\n\n        if context.joker_main and stg.discards == stg.discard_goal then\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    play_sound('mxms_spirit_ough')\n                    play_sound('mxms_spirit_pow')\n                    return true\n                end\n            }))\n            return {\n                x_mult = stg.Xmult,\n                sound = nil,\n                func = function()\n                    if not context.blueprint then\n                        SMODS.calculate_effect({ message = localize('k_reset'), colour = G.C.ATTENTION }, card)\n                        stg.discards = 0\n                    end\n                end\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 2,
          "discard_goal": 7,
          "discards": 0
        }
      },
      "ability": {
        "extra": {
          "Xmult": 2,
          "discard_goal": 7,
          "discards": 0
        }
      },
      "vars": [
        2,
        7,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "soil",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 6
      },
      "raw": "key = 'soil',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 6\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    cost = 8,\n    add_to_deck = function(self, card, from_debuff)\n        G.GAME.mxms_soil_mod = G.GAME.mxms_soil_mod * 2\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        G.GAME.mxms_soil_mod = G.GAME.mxms_soil_mod / 2\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "soyjoke",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 2
      },
      "raw": "key = 'soyjoke',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 2\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            gain = 0.25\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { G.GAME.mxms_soy_mod * stg.gain + 1, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.mxms_reacquire_joker and not context.blueprint then\n            return {\n                message = localize('k_upgrade_ex'),\n                colour = G.C.ATTENTION,\n                func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n            }\n        end\n\n        if context.joker_main and G.GAME.mxms_soy_mod >= 1 then\n            return {\n                x_mult = G.GAME.mxms_soy_mod * stg.gain + 1\n            }\n        end\n    end",
      "config": {
        "extra": {
          "gain": 0.25
        }
      },
      "ability": {
        "extra": {
          "gain": 0.25
        }
      },
      "vars": [
        null,
        0.25
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "space_cowboy",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 17
      },
      "raw": "key = 'space_cowboy',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 17\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    cost = 5,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.individual and not context.repetition\n            and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    SMODS.add_card({ set = 'Planet' })\n                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer - 1\n                    return true;\n                end\n            }))\n            return {\n                message = localize('k_plus_planet'),\n                colour = G.C.SECONDARY_SET.Planet,\n                sound = 'mxms_joker'\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "space_race",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 5
      },
      "raw": "key = 'space_race',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 5\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = true,\n    cost = 7,\n    calculate = function(self, card, context)\n        if context.cardarea == G.jokers and context.before then\n            local hand_is_highest = false\n\n            local level, highest = to_big(0), {}\n\n            for k, v in pairs(G.GAME.hands) do\n                if v.visible and to_big(v.level) > level then\n                    level = to_big(v.level)\n                    highest = { k }\n                elseif v.visible and to_big(v.level) == level then\n                    highest[#highest + 1] = k\n                end\n            end\n\n            for i = 1, #highest do\n                if context.scoring_name == highest[i] then\n                    hand_is_highest = true\n                end\n            end\n\n            if not hand_is_highest then\n                return {\n                    card = card,\n                    level_up = true,\n                    message = localize('k_level_up_ex')\n                }\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spam",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 12
      },
      "raw": "key = 'spam',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 12\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            hands = 0\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 4,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n\n        if G.hand.config.card_limit - 1 > 0 then\n            stg.hands = G.hand.config.card_limit - 1\n            G.hand:change_size(-stg.hands)\n            G.GAME.round_resets.hands = G.GAME.round_resets.hands + stg.hands\n            ease_hands_played(stg.hands)\n        end\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        if stg.hands > 0 then\n            G.hand:change_size(stg.hands)\n            G.GAME.round_resets.hands = G.GAME.round_resets.hands - stg.hands\n            ease_hands_played(-stg.hands)\n        end\n    end",
      "config": {
        "extra": {
          "hands": 0
        }
      },
      "ability": {
        "extra": {
          "hands": 0
        }
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spare_tire",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 15
      },
      "raw": "key = 'spare_tire',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            prob = 1,\n            odds = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_wheel_of_fortune\n        return {\n            vars = { SMODS.get_probability_vars(card, stg.prob, stg.odds, 'tire') }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.pseudorandom_result and not context.result and context.identifier == 'wheel_of_fortune'\n            and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            if SMODS.pseudorandom_probability(card, 'tire', stg.prob, stg.odds) then\n                G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        (context.blueprint_card or card):juice_up()\n                        SMODS.add_card({ key = 'c_wheel_of_fortune' })\n                        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer - 1\n                        return true;\n                    end\n                }))\n            else\n                return {\n                    message = localize('k_nope_ex'),\n                    colour = G.C.FILTER\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 2
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 2
        }
      },
      "vars": [
        0,
        1,
        1,
        2,
        "'tire')"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "spider",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 17
      },
      "raw": "key = 'spider',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 17\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            prob = 1,\n            odds = 8,\n            mult = 5\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main then\n            if SMODS.pseudorandom_probability(card, 'spider', stg.prob, stg.odds) then\n                local og_sound = G.SETTINGS.SOUND.music_volume\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        if G.SETTINGS.SOUND.music_volume <= 0 then\n                            G.SETTINGS.SOUND.music_volume = 0\n                            return true\n                        else\n                            G.SETTINGS.SOUND.music_volume = G.SETTINGS.SOUND.music_volume - 0.5\n                            return false\n                        end\n                    end\n                }))\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        check_for_unlock({ type = 'spider_trigger' })\n                        return true;\n                    end\n                }))\n                return {\n                    mult = stg.mult,\n                    delay = 4,\n                    func = function()\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 2,\n                            func = function()\n                                if G.SETTINGS.SOUND.music_volume >= og_sound then\n                                    G.SETTINGS.SOUND.music_volume = og_sound\n                                    G:save_settings()\n                                    return true\n                                else\n                                    G.SETTINGS.SOUND.music_volume = G.SETTINGS.SOUND.music_volume + 1\n                                    return false\n                                end\n                            end\n                        }))\n                    end\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "prob": 1,
          "odds": 8,
          "mult": 5
        }
      },
      "ability": {
        "extra": {
          "prob": 1,
          "odds": 8,
          "mult": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stone_thrower",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 9
      },
      "raw": "key = 'stone_thrower',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 9\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            chips = 0,\n            gain = 30\n        }\n    },\n    credit = {\n        art = \"anerdymous\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    enhancement_gate = 'm_glass',\n    cost = 3,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_glass\n        return {\n            vars = { stg.chips, stg.gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.chips > 0 then\n            return {\n                chip_mod = stg.chips,\n                message = '+' .. stg.chips,\n                colour = G.C.CHIPS\n            }\n        end\n\n        if context.individual and context.cardarea == G.play and SMODS.has_enhancement(context.other_card, 'm_glass') and not context.blueprint then\n            stg.chips = stg.chips + stg.gain * G.GAME.mxms_soil_mod\n            SMODS.calculate_effect({ message = localize('k_upgrade_ex'), colour = G.C.CHIPS }, card)\n            SMODS.calculate_context({ mxms_scaling_card = true })\n        end\n\n        if context.fix_probability and context.identifier == 'glass' then\n            return {\n                numerator = 1,\n                denominator = 1\n            }\n        end\n    end",
      "config": {
        "extra": {
          "chips": 0,
          "gain": 30
        }
      },
      "ability": {
        "extra": {
          "chips": 0,
          "gain": 30
        }
      },
      "vars": [
        0,
        30
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "stop_sign",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 6
      },
      "raw": "key = 'stop_sign',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 6\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = true,\n    cost = 8",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "streaker",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'streaker',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 0\n    },\n    rarity = 3,\n    config = {\n        extra = {\n            streak = 0,\n            hands = 0, -- I know there's an tracker in vanilla but I can't access it at context.end_of_round\n            chips = 0,\n            mult = 0,\n            chip_gain = 20,\n            mult_gain = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.streak, stg.hands, stg.chips, stg.mult, stg.chip_gain * G.GAME.mxms_soil_mod, stg.mult_gain * G.GAME.mxms_soil_mod }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.joker_main and stg.streak > 0 then\n            return {\n                mult_mod = stg.mult,\n                chip_mod = stg.chips,\n                message = localize('k_mxms_streaked_ex'),\n                colour = G.C.MULT,\n                card = card\n            }\n        end\n\n        if context.before and not context.blueprint then\n            stg.hands = stg.hands + 1\n            if stg.hands > 1 and stg.streak ~= 0 then\n                stg.streak = 0\n                stg.chips = 0\n                stg.mult = 0\n                return {\n                    message = localize('k_reset'),\n                    colour = G.C.RED,\n                    card = card\n                }\n            end\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition and not context.individual then\n            if stg.hands == 1 then\n                stg.hands = 0\n                stg.streak = stg.streak + 1\n                stg.chips = stg.chip_gain * stg.streak * G.GAME.mxms_soil_mod\n                stg.mult = stg.mult_gain * stg.streak * G.GAME.mxms_soil_mod\n                return {\n                    message = 'Streak ' .. stg.streak,\n                    colour = G.C.CHIPS,\n                    card = card,\n                    func = function() SMODS.calculate_context({ mxms_scaling_card = true }) end\n                }\n            else\n                stg.hands = 0\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tar_pit",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 16
      },
      "raw": "key = 'tar_pit',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 16\n    },\n    rarity = 2,\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_SEALS['mxms_Black']\n    end,\n    calculate = function(self, card, context)\n        if context.before then\n            for k, v in pairs(context.scoring_hand) do\n                if v.seal and v.seal ~= 'mxms_Black' then\n                    v:set_seal('mxms_Black')\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'before',\n                        delay = 0.50,\n                        func = function()\n                            play_sound('card1')\n                            card:juice_up(0.3, 0.3)\n                            v:juice_up(0.3, 0.3)\n                            return true\n                        end\n                    }))\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "teddy_bear",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 14
      },
      "raw": "key = 'teddy_bear',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 14\n    },\n    rarity = 1,\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.before and G.GAME.current_round.hands_left == 0\n            and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\n            G.E_MANAGER:add_event(Event({\n                trigger = 'before',\n                delay = 0.0,\n                func = (function()\n                    if G.GAME.last_hand_played then\n                        local _planet = 0\n                        for k, v in pairs(G.P_CENTER_POOLS.Planet) do\n                            if v.config.hand_type == G.GAME.last_hand_played then\n                                _planet = v.key\n                            end\n                        end\n                        SMODS.add_card({ key = _planet })\n                        G.GAME.consumeable_buffer = 0\n                    end\n                    return true\n                end)\n            }))\n            SMODS.calculate_effect({ message = localize('k_plus_planet'), colour = G.C.SECONDARY_SET.Planet }, context.blueprint_card or card)\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "tofu",
      "atlas": "Jokers",
      "pos": {
        "x": 8,
        "y": 11
      },
      "raw": "key = 'tofu',\n    atlas = 'Jokers',\n    pos = {\n        x = 8,\n        y = 11\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            hands_left = 5,\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = true,\n    cost = 7,\n    pools = {\n        Food = true\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        card.ability.blueprint_compat_ui = card.ability.blueprint_compat_ui or ''\n        card.ability.blueprint_compat_check = nil\n        return {\n            vars = { stg.hands_left },\n            main_end = (card.area and card.area == G.jokers) and {\n                {\n                    n = G.UIT.C,\n                    config = { align = \"bm\", minh = 0.4 },\n                    nodes = {\n                        {\n                            n = G.UIT.C,\n                            config = {\n                                ref_table = card,\n                                align = \"m\",\n                                colour = G.C.JOKER_GREY,\n                                r = 0.05,\n                                padding = 0.06,\n                                func = \"blueprint_compat\",\n                            },\n                            nodes = {\n                                {\n                                    n = G.UIT.T,\n                                    config = {\n                                        ref_table = card.ability,\n                                        ref_value = \"blueprint_compat_ui\",\n                                        colour = G.C.UI.TEXT_LIGHT,\n                                        scale = 0.32 * 0.8,\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            } or nil,\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if stg.hands_left > 0 then\n            local other_joker = G.jokers.cards[#G.jokers.cards]\n\n            if other_joker and other_joker ~= card and not context.no_blueprint then\n                context.blueprint = (context.blueprint and (context.blueprint + 1)) or 1\n                context.blueprint_card = context.blueprint_card or card\n                local other_joker_ret = other_joker:calculate_joker(context)\n                context.blueprint = nil\n                local eff_card = context.blueprint_card or card\n                context.blueprint_card = nil\n                if other_joker_ret then\n                    other_joker_ret.card = eff_card\n                    other_joker_ret.colour = G.C.PURPLE\n                    return other_joker_ret\n                end\n            end\n        end\n\n        if context.after and not context.blueprint then\n            stg.hands_left = stg.hands_left - (1 / G.GAME.mxms_fridge_mod)\n            SMODS.calculate_effect(\n            { message = stg.hands_left .. ' ' .. localize('k_mxms_left_el'), colour = G.C.RED }, card)\n            if stg.hands_left <= 0 then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot2')\n                        card.T.r = -0.2\n                        card:juice_up(0.3, 0.4)\n                        card.states.drag.is = true\n                        card.children.center.pinch.x = true\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                G.jokers:remove_card(card)\n                                card:remove()\n                                card = nil\n                                return true;\n                            end\n                        }))\n                        return true\n                    end\n                }))\n                return {\n                    card = card,\n                    message = localize('k_eaten_ex'),\n                    colour = G.C.FILTER\n                }\n            end\n        end\n    end,\n    update = function(self, card, front)\n        if G.STAGE == G.STAGES.RUN then\n            local other_joker = G.jokers.cards[#G.jokers.cards]\n            if other_joker and other_joker ~= card and other_joker.config.center.blueprint_compat then\n                card.ability.blueprint_compat = \"compatible\"\n            else\n                card.ability.blueprint_compat = \"incompatible\"\n            end\n        end\n    end",
      "config": {
        "extra": {
          "hands_left": 5
        }
      },
      "ability": {
        "extra": {
          "hands_left": 5
        }
      },
      "vars": [
        5
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "trashman",
      "atlas": "Jokers",
      "pos": {
        "x": 1,
        "y": 15
      },
      "raw": "key = 'trashman',\n    atlas = 'Jokers',\n    pos = {\n        x = 1,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            money = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 5,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.money }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and context.cardarea == 'unscored' then\n            return {\n                dollars = stg.money,\n                message_card = context.other_card\n            }\n        end\n    end",
      "config": {
        "extra": {
          "money": 1
        }
      },
      "ability": {
        "extra": {
          "money": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "trick_or_treat",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 1
      },
      "raw": "key = 'trick_or_treat',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 1\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            extra_choices = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    blueprint_compat = false,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.extra_choices }\n        }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        G.GAME.mxms_choose_mod = G.GAME.mxms_choose_mod + stg.extra_choices\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        G.GAME.mxms_choose_mod = G.GAME.mxms_choose_mod - stg.extra_choices\n    end,\n    calculate = function(self, card, context)\n        if context.open_booster then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'before',\n                delay = 0.0,\n                func = (function()\n                    card:juice_up(0.3, 0.4)\n                    return true\n                end)\n            }))\n        end\n    end",
      "config": {
        "extra": {
          "extra_choices": 1
        }
      },
      "ability": {
        "extra": {
          "extra_choices": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "unpleasant_gradient",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 3
      },
      "raw": "key = 'unpleasant_gradient',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 3\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 5,\n    calculate = function(self, card, context)\n        if context.before and not context.blueprint and #context.scoring_hand == 4 then\n            -- Code derived from Sigil\n            for i = 1, #context.scoring_hand do\n                if i == 1 then\n                    SMODS.change_base(context.scoring_hand[i], \"Clubs\", nil)\n                elseif i == 2 then\n                    SMODS.change_base(context.scoring_hand[i], \"Hearts\", nil)\n                elseif i == 3 then\n                    SMODS.change_base(context.scoring_hand[i], \"Diamonds\", nil)\n                elseif i == 4 then\n                    SMODS.change_base(context.scoring_hand[i], \"Spades\", nil)\n                end\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        context.scoring_hand[i]:juice_up(0.3, 0.4)\n                        return true\n                    end\n                }))\n            end\n            return {\n                message = localize('k_mxms_unpleasant'),\n                colour = G.C.PURPLE,\n                card = card\n            }\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vinyl_record",
      "atlas": "Jokers",
      "pos": {
        "x": 4,
        "y": 12
      },
      "raw": "key = 'vinyl_record',\n    atlas = 'Jokers',\n    pos = {\n        x = 4,\n        y = 12\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            side = 'a_side',\n            hands = 0,\n            hand_limit = 10,\n            mult = 15,\n            chips = 150\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"theAstra\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        local text\n        local value\n        local colour\n        if stg.side == 'a_side' then\n            value = stg.mult\n            text = 'Mult'\n            colour = G.C.MULT\n        else\n            value = stg.chips\n            text = 'Chips'\n            colour = G.C.CHIPS\n        end\n\n        return {\n            vars = { localize('k_mxms_' .. stg.side), value, text, stg.hands, stg.hand_limit, colours = { colour } },\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main then\n            if stg.side == 'a_side' then\n                return {\n                    mult = stg.mult,\n                }\n            elseif stg.side == 'b_side' then\n                return {\n                    chips = stg.chips\n                }\n            end\n        end\n\n        if context.after and not context.blueprint then\n            stg.hands = stg.hands + 1\n            SMODS.calculate_effect({ message = stg.hands .. '/' .. stg.hand_limit, colour = G.C.ATTENTION }, card)\n            if stg.hands >= stg.hand_limit then\n                local color\n                local sound\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.25,\n                    func = function()\n                        card:flip()\n                        play_sound('card1')\n                        return true;\n                    end\n                }))\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.25,\n                    func = function()\n                        if stg.side == 'a_side' then\n                            stg.side = 'b_side'\n                            card.children.center:set_sprite_pos({ x = 5, y = 12 })\n                            color = G.C.CHIPS\n                            sound = 'chips1'\n                        elseif stg.side == 'b_side' then\n                            stg.side = 'a_side'\n                            card.children.center:set_sprite_pos({ x = 4, y = 12 })\n                            color = G.C.MULT\n                            sound = 'multhit1'\n                        end\n                        stg.hands = 0\n                        return true;\n                    end\n                }))\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.25,\n                    func = function()\n                        card:flip()\n                        play_sound('card1')\n                        SMODS.calculate_effect(\n                        { message = localize('k_mxms_' .. stg.side .. '_ex'), colour = color, sound = sound }, card)\n                        return true;\n                    end\n                }))\n            end\n        end\n    end,\n    set_ability = function(self, card, inital, delay_sprites)\n        if card.config.center.discovered or card.bypass_discovery_center then\n            local W, H = card.T.w, card.T.h\n            H = W\n            card.T.h = H\n            card.T.w = W\n        end\n    end,\n    set_sprites = function(self, card, front)\n        if card.config.center.discovered or card.bypass_discovery_center then\n            card.children.center.scale.y = card.children.center.scale.x\n        end\n    end,\n    load = function(self, card, card_table, other_card)\n        local W, H, scale = card.T.w, card.T.h, 1\n\n        H = W\n        card.T.h = H * scale\n        card.T.w = W * scale\n    end",
      "config": {
        "extra": {
          "side": "a_side",
          "hands": 0,
          "hand_limit": 10,
          "mult": 15,
          "chips": 150
        }
      },
      "ability": {
        "extra": {
          "side": "a_side",
          "hands": 0,
          "hand_limit": 10,
          "mult": 15,
          "chips": 150
        }
      },
      "vars": [
        "localize('k_mxms_' .. stg.side)",
        "value",
        "text",
        0,
        10,
        "colours = { colour"
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "virus",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 3
      },
      "raw": "key = 'virus',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 3\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 6",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "vulture",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 11
      },
      "raw": "key = 'vulture',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 11\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 3,\n    blueprint_compat = false,\n    cost = 7,\n    calculate = function(self, card, context)\n        if context.remove_playing_cards and not context.blueprint then\n            for k, v in pairs(context.removed) do\n                if v.seal then\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            local eligible_jokers = {}\n                            for kk, vv in pairs(G.jokers.cards) do\n                                if not vv.seal and not vv.config.marked_for_seal and vv.config.center.key ~= 'j_mxms_vulture' then\n                                    eligible_jokers[#eligible_jokers + 1] = vv\n                                end\n                            end\n\n                            if next(eligible_jokers) then\n                                local chosen_joker = pseudorandom_element(eligible_jokers,\n                                    pseudoseed('vulture' .. G.GAME.round_resets.ante))\n                                chosen_joker.config.marked_for_seal = true\n                                G.E_MANAGER:add_event(Event({\n                                    func = function()\n                                        chosen_joker:set_seal(v.seal, nil, true)\n                                        chosen_joker.config.marked_for_seal = nil\n                                        return true;\n                                    end\n                                }))\n                                SMODS.calculate_effect(\n                                    { message = localize('k_mxms_plucked_ex'), colour = G.C.ATTENTION, }, card)\n                            end\n                            return true;\n                        end\n                    }))\n                end\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "war",
      "atlas": "Jokers",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'war',\n    atlas = 'Jokers',\n    pos = {\n        x = 3,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 8,\n    add_to_deck = function(self, card, from_debuff)\n        G.GAME.mxms_war_mod = G.GAME.mxms_war_mod * 2\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        G.GAME.mxms_war_mod = G.GAME.mxms_war_mod / 2\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "welder",
      "atlas": "Jokers",
      "pos": {
        "x": 6,
        "y": 15
      },
      "raw": "key = 'welder',\n    atlas = 'Jokers',\n    pos = {\n        x = 6,\n        y = 15\n    },\n    rarity = 2,\n    config = {\n        extra = {\n            Xmult = 0.1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 6,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_steel\n        return {\n            vars = { stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.individual and not context.end_of_round and context.cardarea == G.hand and SMODS.has_enhancement(context.other_card, 'm_steel') then\n            context.other_card.ability.h_x_mult = context.other_card.ability.h_x_mult + stg.Xmult\n            return {\n                message = localize('k_upgrade_ex'),\n                message_card = context.other_card\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        for k, v in pairs(G.playing_cards) do\n            if SMODS.has_enhancement(v, 'm_steel') then\n                return true\n            end\n        end\n\n        return false\n    end",
      "config": {
        "extra": {
          "Xmult": 0.1
        }
      },
      "ability": {
        "extra": {
          "Xmult": 0.1
        }
      },
      "vars": [
        0.1
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "werewolf",
      "atlas": "Jokers",
      "pos": {
        "x": 0,
        "y": 15
      },
      "raw": "key = 'werewolf',\n    atlas = 'Jokers',\n    pos = {\n        x = 0,\n        y = 15\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            mult = 0,\n            gain = 5\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"anerdymous\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        info_queue[#info_queue + 1] = G.P_CENTERS['c_moon']\n        return {\n            vars = { stg.gain, stg.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.using_consumeable and context.consumeable.config.center.key == 'c_moon' and not context.blueprint then\n            stg.mult = stg.mult + stg.gain * G.GAME.mxms_soil_mod\n            SMODS.calculate_effect(\n                { message = localize { type = 'variable', key = 'a_mult', vars = { stg.mult } }, colour = G.C.MULT },\n                card)\n            SMODS.calculate_context({ mxms_scaling_card = true })\n        end\n\n        if context.joker_main and stg.mult > 0 then\n            return {\n                mult = stg.mult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "mult": 0,
          "gain": 5
        }
      },
      "ability": {
        "extra": {
          "mult": 0,
          "gain": 5
        }
      },
      "vars": [
        5,
        0
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "whos_on_first",
      "atlas": "Jokers",
      "pos": {
        "x": 5,
        "y": 13
      },
      "raw": "key = 'whos_on_first',\n    atlas = 'Jokers',\n    pos = {\n        x = 5,\n        y = 13\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = false,\n    cost = 4",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "wild_buddy",
      "atlas": "Jokers",
      "pos": {
        "x": 2,
        "y": 13
      },
      "raw": "key = 'wild_buddy',\n    atlas = 'Jokers',\n    pos = {\n        x = 2,\n        y = 13\n    },\n    rarity = 1,\n    config = {\n        extra = {\n            Xmult = 2\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    blueprint_compat = true,\n    cost = 4,\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.Xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.joker_main and not G.GAME.blind.boss then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n    end",
      "config": {
        "extra": {
          "Xmult": 2
        }
      },
      "ability": {
        "extra": {
          "Xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Joker",
      "key": "zombie",
      "atlas": "Jokers",
      "pos": {
        "x": 7,
        "y": 5
      },
      "raw": "key = 'zombie',\n    atlas = 'Jokers',\n    pos = {\n        x = 7,\n        y = 5\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    rarity = 2,\n    blueprint_compat = true,\n    cost = 8,\n    loc_vars = function(self, info_queue, card)\n        if G.GAME.current_round.mxms_zombie_target.card ~= nil then\n            local copied_key = G.GAME.current_round.mxms_zombie_target.card.config.center.key\n            info_queue[#info_queue + 1] = G.P_CENTERS[copied_key]\n            return {\n                vars = { G.localization.descriptions.Joker[copied_key].name }\n            }\n        else\n            return {\n                vars = { localize('k_mxms_no_target_el') }\n            }\n        end\n    end,\n    calculate = function(self, card, context)\n        if G.GAME.current_round.mxms_zombie_target.card and\n        G.GAME.current_round.mxms_zombie_target.card.config.center.key ~= 'j_mxms_zombie'\n        and not context.no_blueprint then\n            context.blueprint = (context.blueprint and (context.blueprint + 1)) or 1\n            context.blueprint_card = context.blueprint_card or card\n            local zombie_target_ret = G.GAME.current_round.mxms_zombie_target.card:calculate_joker(context)\n            context.blueprint = nil\n            local eff_card = context.blueprint_card or card\n            context.blueprint_card = nil\n            if zombie_target_ret then\n                zombie_target_ret.card = eff_card\n                zombie_target_ret.colour = G.C.GREEN\n                return zombie_target_ret\n            end\n        end\n    end",
      "config": {},
      "ability": {},
      "vars": [
        null
      ],
      "infoQueue": []
    },
    {
      "type": "Seal",
      "key": "black",
      "atlas": "Modifiers",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "key = 'black',\n    config = {\n        extra = {\n            Xmult = 2\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    atlas = 'Modifiers',\n    pos = {\n        x = 0,\n        y = 2\n    },\n    badge_colour = G.C.BLACK,\n    sound = {\n        sound = 'multhit2',\n        per = 1.2,\n        vol = 0.7\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.seal.extra\n\n        return { vars = { stg.Xmult } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.seal.extra\n\n        if context.main_scoring and context.cardarea == G.play then\n            return {\n                x_mult = stg.Xmult\n            }\n        end\n\n        if context.check_eternal and context.other_card == card then\n            return {\n                no_destroy = { override_compat = true }\n            }\n        end\n    end,\n    in_pool = function(self, args)\n        return false\n    end",
      "config": {
        "extra": {
          "Xmult": 2
        }
      },
      "ability": {
        "extra": {
          "Xmult": 2
        }
      },
      "vars": [
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Enhancement",
      "key": "footprint",
      "atlas": null,
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'footprint',\n    pos = { x = 1, y = 0 },\n    config = {\n        extra = {\n            levels = 1,\n        }\n    },\n    credit = {\n        art = \"pinkzigzagoon\",\n        code = \"theAstra\",\n        concept = \"pinkzigzagoon\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n\n        return { vars = { stg.levels } }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n\n        if context.before and context.cardarea == G.play then\n            local chance = 0\n            for k, v in pairs(context.scoring_hand) do\n                if SMODS.has_enhancement(v, 'm_mxms_footprint') then\n                    if v.ability.extra.has_already_upgraded then\n                        return\n                    else\n                        chance = chance + 1\n                    end\n                end\n            end\n\n            if SMODS.pseudorandom_probability(card, 'footprint', chance, 5) then\n                card.ability.extra.has_already_upgraded = true\n                SMODS.smart_level_up_hand(card, context.scoring_name, false, stg.levels)\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        card.ability.extra.has_already_upgraded = nil\n                        return true;\n                    end\n                }))\n            else\n                return {\n                    message = localize('k_nope_ex'),\n                    colour = G.C.FILTER\n                }\n            end\n        end\n    end",
      "config": {
        "extra": {
          "levels": 1
        }
      },
      "ability": {
        "extra": {
          "levels": 1
        }
      },
      "vars": [
        1
      ],
      "infoQueue": []
    },
    {
      "type": "DrawStep",
      "key": "footprint",
      "atlas": null,
      "pos": null,
      "raw": "-- Derived from Ortalab\n    key = 'footprint',\n    order = 25,\n    func = function(self, layer)\n        if SMODS.has_enhancement(self, 'm_mxms_footprint') then\n            if not Maximus.footprint_sprite then\n                Maximus.footprint_sprite = Sprite(0, 0, G.CARD_W, G.CARD_H, G.ASSET_ATLAS['mxms_Modifiers'],\n                    { x = 0, y = 3 })\n            end\n            Maximus.footprint_sprite.role.draw_major = self\n            if self.edition and not self.delay_edition then\n                for k, v in pairs(G.P_CENTER_POOLS.Edition) do\n                    if self.edition[v.key:sub(3)] and v.shader then\n                        if type(v.draw) == 'function' then\n                            v:draw(self, layer)\n                        else\n                            Maximus.footprint_sprite:draw_shader(v.shader, nil, self.ARGS.send_to_shader, nil,\n                                self.children.center)\n                        end\n                    end\n                end\n                if self.edition.negative then\n                    Maximus.footprint_sprite:draw_shader('negative_shine', nil, self.ARGS.send_to_shader, nil,\n                        self.children.center)\n                end\n            elseif not self:should_draw_base_shader() then\n                -- Don't render base dissolve shader.\n            elseif not self.greyed then\n                Maximus.footprint_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center)\n            end\n        end\n    end,\n    conditions = { vortex = false, facing = 'front' },",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sticker",
      "key": "posted",
      "atlas": null,
      "pos": {
        "x": 10,
        "y": 10
      },
      "raw": "key = \"posted\",\n    badge_colour = HEX 'fda200',\n    pos = { x = 10, y = 10 },\n    rate = 0,\n    apply = function(self, card, val)\n        card.ability[self.key] = val\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "crab",
      "atlas": "Tags",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'crab',\n        atlas = 'Tags',\n        pos = {\n            x = 2,\n            y = 0\n        },\n        min_ante = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        apply = function(self, tag, context)\n            if context.type == 'start_apply_horoscopes' then\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    G.GAME.mxms_cancer_bonus = G.GAME.mxms_cancer_bonus + 2\n                    G.GAME.round_resets.hands = G.GAME.round_resets.hands + 2\n                    ease_hands_played(2)\n                    return true\n                end)\n                tag.triggered = true\n                return true\n            end\n        end,\n        in_pool = function(self, args)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "lion",
      "atlas": "Tags",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'lion',\n        atlas = 'Tags',\n        pos = {\n            x = 3,\n            y = 0\n        },\n        min_ante = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        apply = function(self, tag, context)\n            if context.type == 'start_apply_horoscopes' then\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    G.GAME.mxms_leo_bonus = G.GAME.mxms_leo_bonus + 3\n                    G.hand:change_size(3)\n                    return true\n                end)\n                tag.triggered = true\n                return true\n            end\n        end,\n        in_pool = function(self, args)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "maiden",
      "atlas": "Tags",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'maiden',\n        atlas = 'Tags',\n        pos = {\n            x = 4,\n            y = 0\n        },\n        min_ante = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        apply = function(self, tag, context)\n            if context.type == 'start_apply_horoscopes' then\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    G.GAME.mxms_virgo_bonus = G.GAME.mxms_virgo_bonus + 3\n                    G.GAME.round_resets.discards = G.GAME.round_resets.discards + 3\n                    ease_discard(3)\n                    return true\n                end)\n                tag.triggered = true\n                return true\n            end\n        end,\n        in_pool = function(self, args)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "ram",
      "atlas": "Tags",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'ram',\n        atlas = 'Tags',\n        pos = {\n            x = 1,\n            y = 0\n        },\n        min_ante = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        apply = function(self, tag, context)\n            if context.type == 'start_apply_horoscopes' and not G.GAME.mxms_aries_bonus then\n                G.GAME.mxms_aries_bonus = true\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    return true\n                end)\n                tag.triggered = true\n                return true\n            end\n        end,\n        in_pool = function(self, args)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "scale",
      "atlas": "Tags",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'scale',\n        atlas = 'Tags',\n        pos = {\n            x = 5,\n            y = 0\n        },\n        min_ante = 2,\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        apply = function(self, tag, context)\n            if context.type == 'shop_final_pass' then\n                G.GAME.shop_free = true\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    SMODS.change_free_rerolls(1)\n                    calculate_reroll_cost(true)\n                    if G.shop_jokers then\n                        for k, v in pairs(G.shop_jokers.cards) do\n                            v.ability.couponed = true\n                            v:set_cost()\n                        end\n                    end\n                    if G.shop_booster then\n                        for k, v in pairs(G.shop_booster.cards) do\n                            v.ability.couponed = true\n                            v:set_cost()\n                        end\n                    end\n                    if G.shop_vouchers then\n                        for k, v in pairs(G.shop_vouchers.cards) do\n                            v.cost = 0\n                            create_shop_card_ui(v)\n                        end\n                    end\n                    return true\n                end)\n                SMODS.change_free_rerolls(-1)\n                tag.triggered = true\n                return true\n            end\n        end,\n        in_pool = function(self, args)\n            return false\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Tag",
      "key": "star",
      "atlas": "Tags",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'star',\n        atlas = 'Tags',\n        pos = {\n            x = 0,\n            y = 0\n        },\n        min_ante = 2,\n        config = {\n            type = 'new_blind_choice'\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        loc_vars = function(self, info_queue)\n            info_queue[#info_queue + 1] = { set = \"Other\", key = \"p_mxms_horoscope_mega_1\", specific_vars = { 1, 2 } }\n        end,\n        apply = function(self, tag, context)\n            if context.type == \"new_blind_choice\" then\n                local lock = tag.ID\n                G.CONTROLLER.locks[lock] = true\n                tag:yep(\"+\", Maximus.C.SET.Horoscope, function()\n                    local booster = SMODS.create_card { key = \"p_mxms_horoscope_mega_1\", area = G.play, discover = true }\n                    booster.T.x = G.play.T.x + G.play.T.w / 2 - G.CARD_W * 1.27 / 2\n                    booster.T.y = G.play.T.y + G.play.T.h / 2 - G.CARD_H * 1.27 / 2\n                    booster.T.w = G.CARD_W * 1.27\n                    booster.T.h = G.CARD_H * 1.27\n                    booster.cost = 0\n                    booster.from_tag = true\n                    G.FUNCS.use_card({ config = { ref_table = booster } })\n                    booster:start_materialize()\n                    G.CONTROLLER.locks[lock] = nil\n                    return true\n                end)\n                tag.triggered = true\n                return true\n            end\n        end",
      "config": {
        "type": "new_blind_choice"
      },
      "ability": {
        "type": "new_blind_choice"
      },
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "best_dressed",
      "atlas": "Vouchers",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'best_dressed',\n    atlas = 'Vouchers',\n    pos = {\n        x = 1,\n        y = 1\n    },\n    config = {\n        extra = 0.2\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    requires = { 'v_mxms_sharp_suit' },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg }\n        }\n    end,\n    calculate = function(self, card, context)\n        local stg = card.ability.extra\n        if context.other_consumeable and context.other_consumeable.ability.set == 'Tarot' and context.other_consumeable.ability.consumeable.suit_conv then\n            local suit_tally = 0\n            for i = 1, #context.scoring_hand do\n                if context.scoring_hand[i]:is_suit(context.other_consumeable.ability.consumeable.suit_conv, false) then\n                    suit_tally = suit_tally + 1\n                end\n            end\n            if suit_tally > 0 then\n                return {\n                    x_mult = stg * suit_tally + 1\n                }\n            end\n        end\n    end",
      "config": {
        "extra": 0.2
      },
      "ability": {
        "extra": 0.2
      },
      "vars": [
        "stg"
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "guardian",
      "atlas": "Vouchers",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'guardian',\n    atlas = 'Vouchers',\n    pos = {\n        x = 2,\n        y = 1\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    requires = { 'v_mxms_shield' },\n    redeem = function(self, card, from_debuff)\n        G.GAME.mxms_v_destroy_reduction = G.GAME.mxms_v_destroy_reduction + 1\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "launch_code",
      "atlas": "Vouchers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'launch_code',\n    atlas = 'Vouchers',\n    pos = {\n        x = 0,\n        y = 0\n    },\n    config = {\n        extra = {\n            ante_mod = 1,\n            val_mod = 1\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.ante_mod, stg.val_mod }\n        }\n    end,\n    redeem = function(self, card, from_debuff)\n        local stg = card.ability.extra\n        ease_ante(stg.ante_mod)\n        G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante or G.GAME.round_resets.ante\n        G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante + stg.ante_mod\n\n        G.GAME.round_resets.hands = G.GAME.round_resets.hands + stg.val_mod\n        ease_hands_played(stg.val_mod)\n\n        G.GAME.round_resets.discards = G.GAME.round_resets.discards + stg.val_mod\n        ease_discard(stg.val_mod)\n    end,\n    in_pool = function(self, args)\n        if G.GAME.round_resets.ante == G.GAME.win_ante then\n            return false\n        end\n\n        return true\n    end",
      "config": {
        "extra": {
          "ante_mod": 1,
          "val_mod": 1
        }
      },
      "ability": {
        "extra": {
          "ante_mod": 1,
          "val_mod": 1
        }
      },
      "vars": [
        1,
        1
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "multitask",
      "atlas": "Vouchers",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'multitask',\n        atlas = 'Vouchers',\n        pos = {\n            x = 3,\n            y = 0\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        redeem = function(self, card, from_debuff)\n            G.mxms_horoscope.config.card_limit = G.mxms_horoscope.config.card_limit + 1\n        end",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "sharp_suit",
      "atlas": "Vouchers",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'sharp_suit',\n    atlas = 'Vouchers',\n    pos = {\n        x = 1,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    }",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "shield",
      "atlas": "Vouchers",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'shield',\n    atlas = 'Vouchers',\n    pos = {\n        x = 2,\n        y = 0\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    redeem = function(self, card, from_debuff)\n        G.GAME.mxms_v_destroy_reduction = G.GAME.mxms_v_destroy_reduction + 1\n    end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "warp_drive",
      "atlas": "Vouchers",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'warp_drive',\n    atlas = 'Vouchers',\n    pos = {\n        x = 0,\n        y = 1\n    },\n    config = {\n        extra = {\n            ante_mod = 1,\n            val_mod = 2\n        }\n    },\n    credit = {\n        art = \"Maxiss02\",\n        code = \"theAstra\",\n        concept = \"Maxiss02\"\n    },\n    requires = { 'v_mxms_launch_code' },\n    loc_vars = function(self, info_queue, card)\n        local stg = card.ability.extra\n        return {\n            vars = { stg.ante_mod, stg.val_mod }\n        }\n    end,\n    redeem = function(self, card)\n        local stg = card.ability.extra\n        ease_ante(stg.ante_mod)\n        G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante or G.GAME.round_resets.ante\n        G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante + stg.ante_mod\n\n        G.GAME.round_resets.hands = G.GAME.round_resets.hands + stg.val_mod\n        ease_hands_played(stg.val_mod)\n\n        G.GAME.round_resets.discards = G.GAME.round_resets.discards + stg.val_mod\n        ease_discard(stg.val_mod)\n    end,\n    in_pool = function(self, args)\n        if G.GAME.round_resets.ante == G.GAME.win_ante then\n            return false\n        end\n\n        return true\n    end",
      "config": {
        "extra": {
          "ante_mod": 1,
          "val_mod": 2
        }
      },
      "ability": {
        "extra": {
          "ante_mod": 1,
          "val_mod": 2
        }
      },
      "vars": [
        1,
        2
      ],
      "infoQueue": []
    },
    {
      "type": "Voucher",
      "key": "workaholic",
      "atlas": "Vouchers",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'workaholic',\n        atlas = 'Vouchers',\n        pos = {\n            x = 3,\n            y = 1\n        },\n        credit = {\n            art = \"Maxiss02\",\n            code = \"theAstra\",\n            concept = \"Maxiss02\"\n        },\n        requires = { 'v_mxms_multitask' },\n        redeem = function(self, card, from_debuff)\n            G.mxms_horoscope.config.card_limit = G.mxms_horoscope.config.card_limit + 1\n        end",
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Placeholder",
      "atlas": null,
      "pos": null,
      "raw": "-- Placeholder Atlas\n    key = 'Placeholder',\n    path = \"placeholders.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Modifiers",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Modifiers/Backs Atlas\n    key = 'Modifiers',\n    path = \"Modifiers.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "modicon",
      "atlas": null,
      "pos": null,
      "raw": "-- Mod Icon\n    key = \"modicon\",\n    path = \"modicon.png\",\n    px = 32,\n    py = 32",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "logo",
      "atlas": null,
      "pos": null,
      "raw": "-- Maximus Menu Logo\n    key = 'logo',\n    path = 'Maximus_Logo.png',\n    px = 173,\n    py = 61",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "poker_hands",
      "atlas": null,
      "pos": null,
      "raw": "key = 'poker_hands',\n        path = \"Poker Hands.png\",\n        px = 53,\n        py = 13",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "perfect",
      "atlas": null,
      "pos": null,
      "raw": "key = 'perfect',\n    path = 'perfect.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "eggsplosion",
      "atlas": null,
      "pos": null,
      "raw": "key = 'eggsplosion',\n    path = 'eggsplosion.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "hey",
      "atlas": null,
      "pos": null,
      "raw": "key = 'hey',\n    path = 'hey.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "joker",
      "atlas": null,
      "pos": null,
      "raw": "key = 'joker',\n    path = 'i\\'m a joker.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "spirit_beh",
      "atlas": null,
      "pos": null,
      "raw": "key = 'spirit_beh',\n    path = 'spirit beh.ogg',\n    pitch = 0.8",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "spirit_miss",
      "atlas": null,
      "pos": null,
      "raw": "key = 'spirit_miss',\n    path = 'spirit miss.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "spirit_ough",
      "atlas": null,
      "pos": null,
      "raw": "key = 'spirit_ough',\n    path = 'spirit ough.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Sound",
      "key": "spirit_pow",
      "atlas": null,
      "pos": null,
      "raw": "key = 'spirit_pow',\n    path = 'spirit pow.ogg'",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ObjectTypes",
      "key": "Food",
      "atlas": null,
      "pos": null,
      "raw": "key = 'Food',\n        default = 'j_egg',\n        cards = {},\n        inject = function(self)\n            SMODS.ObjectType.inject(self)\n            -- Insert base game food jokers\n            for k, _ in pairs(mxms_vanilla_food) do\n                self:inject_card(G.P_CENTERS[k])\n            end\n        end",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Sleeves",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Sleeve Atlas\n        key = 'Sleeves',\n        path = \"Sleeves.png\",\n        px = 73,\n        py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Blinds",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Blind Atlas\n    key = 'Blinds',\n    path = \"Blinds.png\",\n    atlas_table = 'ANIMATION_ATLAS',\n    frames = 21,\n    px = 34,\n    py = 34",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Boosters",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Booster Atlas\n    key = 'Boosters',\n    path = \"Boosters.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Consumables",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Consumable Atlas\n    key = 'Consumables',\n    path = \"Consumables.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "ConsumableType",
      "key": "Horoscope",
      "atlas": null,
      "pos": null,
      "raw": "key = 'Horoscope',\n        primary_colour = Maximus.C.SET.Horoscope,\n        secondary_colour = Maximus.C.SECONDARY_SET.Horoscope,\n        default = 'c_mxms_taurus',\n        collection_rows = { 3, 3 },\n        shop_rate = 0.0",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Jokers",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Joker Atlas\n    key = 'Jokers',\n    path = \"Jokers.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "4D",
      "atlas": null,
      "pos": null,
      "raw": "-- 4D Joker Atlas\n    key = '4D',\n    path = \"4d_joker.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Tags",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Tag Atlas\n    key = \"Tags\",\n    path = \"Tags.png\",\n    px = 34,\n    py = 34",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    },
    {
      "type": "Atlas",
      "key": "Vouchers",
      "atlas": null,
      "pos": null,
      "raw": "-- Main Voucher Atlas\n    key = 'Vouchers',\n    path = \"Vouchers.png\",\n    px = 71,\n    py = 95",
      "config": {},
      "ability": {},
      "vars": [],
      "infoQueue": []
    }
  ],
  "version": "v1.1.1"
}