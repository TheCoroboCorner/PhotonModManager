{
  "locMap": {
    "j_tngt_original": {
      "name": "The original {C:attention}starwalker{}",
      "text": [
        "* I will also   {C:attention}join{}"
      ],
      "type": "Joker"
    },
    "j_tngt_johncena": {
      "name": "",
      "text": [
        "{C:blue}+#1#{} Chips and {X:blue,C:white}X#3#{} Chips",
        "{C:blue}-#2#{} Chips and {X:blue,C:white}-X#4#{} Chips for every hand played"
      ],
      "type": "Joker"
    },
    "j_tngt_birdthatihate": {
      "name": "",
      "text": [
        "{X:mult,C:white}X#1#{} Mult for each played cards",
        "{C:attention,s:1.5}WARNING!{}",
        "{C:red}You{} might wanna turn {C:blue}down{} the {C:attention}volume.{}"
      ],
      "type": "Joker"
    },
    "j_tngt_fourloko": {
      "name": "",
      "text": [],
      "type": "Joker"
    },
    "ahead": {
      "name": "{C:blue}Ahead{}",
      "text": [
        "A mod by Haya named {C:attention}Payasaka's Terrible Addition.",
        "{s:2}Play it.{}"
      ],
      "type": "Other"
    },
    "Loss": {
      "name": "Loss",
      "text": [
        "|  | |",
        "| |  | _"
      ],
      "type": "Other"
    },
    "scary": {
      "name": "@_@'",
      "text": [
        "U- uhm.."
      ],
      "type": "Other"
    },
    "Dark": {
      "name": "{X:dark,C:white}Dark{}",
      "text": [
        "{V:1}Spades{} and {V:3}Clubs{}"
      ],
      "type": "Other"
    },
    "teto": {
      "name": "{C:red,s:2}Kasane Teto.{}",
      "text": [
        "I FUCKING LOVE KASANE TETO.",
        "GRAAAAAAAAAAAAAAAAAAAAHHH"
      ],
      "type": "Other"
    },
    "crazy": {
      "name": "",
      "text": [
        "to see it, {C:dark_edition}Stick your finger in your ass!"
      ],
      "type": "Other"
    },
    "bepis": {
      "name": "{C:blue}@BepisFever",
      "text": [
        "Shoutout to {X:blue,C:white}@BepisFever{} for helping",
        "me through this entire modding"
      ],
      "type": "Other"
    },
    "ilovetv": {
      "name": "I LOVE TV!",
      "text": [
        "\"I LOVE TV\" = {X:mult,C:white}+X1{} Mult"
      ],
      "type": "Other"
    },
    "manually": {
      "name": "Updates manually, every day",
      "text": [
        "{C:dark_edition}Mike{} will update me {C:attention}every day{},",
        "so {C:red}don't{} touch that dial yet, folks"
      ],
      "type": "Other"
    }
  },
  "atlases": {
    "modicon": {
      "path": "modicon.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Tangents@Clickseee//modicon.png",
      "resolvedGitHubPath": "assets/1x/modicon.png"
    },
    "balatro": {
      "path": "balatro.png",
      "px": 332,
      "py": 216,
      "localPath": "/wiki-data/Tangents@Clickseee//balatro.png",
      "resolvedGitHubPath": "assets/1x/balatro.png"
    },
    "npe": {
      "path": "npe.jpg",
      "px": 300,
      "py": 301,
      "resolvedGitHubPath": "assets/1x/npe.jpg"
    },
    "boosters": {
      "path": "booster.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//booster.png",
      "resolvedGitHubPath": "assets/1x/booster.png"
    },
    "ModdedVanilla": {
      "path": "ModdedVanilla.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla.png"
    },
    "ModdedVanilla2": {
      "path": "ModdedVanilla2.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla2.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla2.png"
    },
    "ModdedVanilla3": {
      "path": "ModdedVanilla3.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla3.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla3.png"
    },
    "ModdedVanilla4": {
      "path": "ModdedVanilla4.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla4.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla4.png"
    },
    "ModdedVanilla5": {
      "path": "ModdedVanilla5.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla5.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla5.png"
    },
    "ModdedVanilla6": {
      "path": "ModdedVanilla6.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla6.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla6.png"
    },
    "ModdedVanilla7": {
      "path": "ModdedVanilla7.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla7.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla7.png"
    },
    "ModdedVanilla8": {
      "path": "ModdedVanilla8.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla8.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla8.png"
    },
    "ModdedVanilla9": {
      "path": "ModdedVanilla9.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla9.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla9.png"
    },
    "ModdedVanilla10": {
      "path": "ModdedVanilla10.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//ModdedVanilla10.png",
      "resolvedGitHubPath": "assets/1x/ModdedVanilla10.png"
    },
    "donotredeem": {
      "path": "donotredeem.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//donotredeem.png",
      "resolvedGitHubPath": "assets/1x/donotredeem.png"
    },
    "fuhhnaf": {
      "path": "fuhhnaf.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//fuhhnaf.png",
      "resolvedGitHubPath": "assets/1x/fuhhnaf.png"
    },
    "southamerica": {
      "path": "southamerica.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Tangents@Clickseee//southamerica.png",
      "resolvedGitHubPath": "assets/1x/southamerica.png"
    },
    "redball": {
      "path": "redball.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Tangents@Clickseee//redball.png",
      "resolvedGitHubPath": "assets/1x/redball.png"
    },
    "washington": {
      "path": "washington.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/Tangents@Clickseee//washington.png",
      "resolvedGitHubPath": "assets/1x/washington.png"
    },
    "dicks": {
      "path": "dicks.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/Tangents@Clickseee//dicks.png",
      "resolvedGitHubPath": "assets/1x/dicks.png"
    },
    "tennas": {
      "path": "tennas.png",
      "px": 64,
      "py": 64,
      "localPath": "/wiki-data/Tangents@Clickseee//tennas.png",
      "resolvedGitHubPath": "assets/1x/tennas.png"
    }
  },
  "cards": [
    {
      "type": "ObjectType",
      "key": "Food",
      "atlas": null,
      "pos": null,
      "raw": "key = \"Food\",\n    default = \"j_reserved_parking\",\n    cards = {},\n    inject = function(self)\n        SMODS.ObjectType.inject(self)\n        -- insert base game food jokers\n        self:inject_card(G.P_CENTERS.j_gros_michel)\n        self:inject_card(G.P_CENTERS.j_egg)\n        self:inject_card(G.P_CENTERS.j_ice_cream)\n        self:inject_card(G.P_CENTERS.j_cavendish)\n        self:inject_card(G.P_CENTERS.j_turtle_bean)\n        self:inject_card(G.P_CENTERS.j_diet_cola)\n        self:inject_card(G.P_CENTERS.j_popcorn)\n        self:inject_card(G.P_CENTERS.j_ramen)\n        self:inject_card(G.P_CENTERS.j_selzer)\n    end,"
    },
    {
      "type": "Gradient",
      "key": "fourthwall",
      "atlas": null,
      "pos": null,
      "raw": "key=\"fourthwall\",\n    colours = {\n    HEX(\"ff0000\"),\n    HEX(\"ff6600\"),\n    HEX(\"ffff00\"),\n    HEX(\"4bc292\"),\n    HEX(\"1e9eba\"),\n    HEX(\"00ffff\"),\n    HEX(\"0000ff\"),\n    HEX(\"708b91\"),\n    HEX(\"ef0098\"),\n    HEX(\"ff00ff\"),\n    HEX(\"ff0000\"),\n    HEX(\"ff6600\"),\n    HEX(\"ffff00\"),\n    HEX(\"4bc292\"),\n    HEX(\"1e9eba\"),\n    HEX(\"00ffff\"),\n    HEX(\"0000ff\"),\n    HEX(\"708b91\"),\n    HEX(\"ef0098\"),\n    HEX(\"ff00ff\")\n    },\n    cycle = 1"
    },
    {
      "type": "Rarity",
      "key": "4TH WALL",
      "atlas": null,
      "pos": null,
      "raw": "key = \"4TH WALL\",\n    loc_txt = {\n        name = \"4TH WALL\"\n    },\n    badge_colour = fourthwall_gradient,\n    default_weight = 0.005,\n    pools = { [\"Joker\"] = true },\n    get_weight = function(self, weight, object_type)\n        return weight\n    end"
    },
    {
      "type": "Sound",
      "key": "tngt_canigetsomeicecream",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_canigetsomeicecream\",\n    path = \"canigetsomeicecream.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_onlyaspoonful",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_onlyaspoonful\",\n    path = \"onlyaspoonful.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_neverforget",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_neverforget\",\n    path = \"neverforget.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_birdthatihate",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_birdthatihate\",\n    path = \"birdthatihate.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_thatFUCKINbirdthatihate",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_thatFUCKINbirdthatihate\",\n    path = \"thatFUCKINbirdthatihate.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_snowgrave",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_snowgrave\",\n    path = \"snowgrave.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_recruit",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_recruit\",\n    path = \"recruit.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_shitass",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_shitass\",\n    path = \"shitass.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_bwomp",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_bwomp\",\n    path = \"bwomp.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_dealsogood",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_dealsogood\",\n    path = \"dealsogood.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_iamindanger",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_iamindanger\",\n    path = \"iamindanger.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_NOW",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_NOW\",\n    path = \"NOW.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_mustard",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_mustard\",\n    path = \"mustard.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_aughhh",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_aughhh\",\n    path = \"aughhh.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_ineedamedicbag",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_ineedamedicbag\",\n    path = \"ineedamedicbag.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_connectionterminated",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_connectionterminated\",\n    path = \"connectionterminated.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_eggwah",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_eggwah\",\n    path = \"eggwah.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_pingas",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_pingas\",\n    path = \"pingas.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_damn",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_damn\",\n    path = \"damn.ogg\""
    },
    {
      "type": "Sound",
      "key": "tngt_flashbang",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tngt_flashbang\",\n    path = \"flashbang.ogg\""
    },
    {
      "type": "Atlas",
      "key": "modicon",
      "atlas": null,
      "pos": null,
      "raw": "key = \"modicon\",\n    path = \"modicon.png\",\n    px = 34,\n    py = 34"
    },
    {
      "type": "Atlas",
      "key": "balatro",
      "atlas": null,
      "pos": null,
      "raw": "key = \"balatro\",\n    path = \"balatro.png\",\n    px = 332,\n    py = 216"
    },
    {
      "type": "Sound",
      "key": "THX",
      "atlas": null,
      "pos": null,
      "raw": "key = 'THX',\n    path = 'introPad1.wav',\n    replace = 'introPad1'"
    },
    {
      "type": "Sound",
      "key": "watchyojet",
      "atlas": null,
      "pos": null,
      "raw": "key = 'watchyojet',\n    path = 'magic_crumple.wav',\n    replace = 'magic_crumple'"
    },
    {
      "type": "Sound",
      "key": "PS2",
      "atlas": null,
      "pos": null,
      "raw": "key = 'PS2',\n    path = 'magic_crumple2.wav',\n    replace = 'magic_crumple2'"
    },
    {
      "type": "Sound",
      "key": "GAY",
      "atlas": null,
      "pos": null,
      "raw": "key = 'GAY',\n    path = 'magic_crumple3.wav',\n    replace = 'magic_crumple3'"
    },
    {
      "type": "Atlas",
      "key": "npe",
      "atlas": null,
      "pos": null,
      "raw": "key = \"npe\",\n    path = \"npe.jpg\",\n    px = 300,\n    py = 301"
    },
    {
      "type": "Atlas",
      "key": "boosters",
      "atlas": null,
      "pos": null,
      "raw": "key = \"boosters\",\n    path = \"booster.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla\",\n    path = \"ModdedVanilla.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla2\",\n    path = \"ModdedVanilla2.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla3\",\n    path = \"ModdedVanilla3.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla4",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla4\",\n    path = \"ModdedVanilla4.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla5",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla5\",\n    path = \"ModdedVanilla5.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla6",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla6\",\n    path = \"ModdedVanilla6.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla7",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla7\",\n    path = \"ModdedVanilla7.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla8",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla8\",\n    path = \"ModdedVanilla8.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla9",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla9\",\n    path = \"ModdedVanilla9.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "ModdedVanilla10",
      "atlas": null,
      "pos": null,
      "raw": "key = \"ModdedVanilla10\",\n    path = \"ModdedVanilla10.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "donotredeem",
      "atlas": null,
      "pos": null,
      "raw": "key = \"donotredeem\",\n    path = \"donotredeem.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "fuhhnaf",
      "atlas": null,
      "pos": null,
      "raw": "key = \"fuhhnaf\",\n    path = \"fuhhnaf.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Atlas",
      "key": "southamerica",
      "atlas": null,
      "pos": null,
      "raw": "key = \"southamerica\",\n    path = \"southamerica.png\",\n    frames = 21,\n    atlas_table = \"ANIMATION_ATLAS\",\n    px = 34,\n    py = 34"
    },
    {
      "type": "Atlas",
      "key": "redball",
      "atlas": null,
      "pos": null,
      "raw": "key = \"redball\",\n    path = \"redball.png\",\n    frames = 21,\n    atlas_table = \"ANIMATION_ATLAS\",\n    px = 34,\n    py = 34"
    },
    {
      "type": "Atlas",
      "key": "washington",
      "atlas": null,
      "pos": null,
      "raw": "key = \"washington\",\n    path = \"washington.png\",\n    frames = 21,\n    atlas_table = \"ANIMATION_ATLAS\",\n    px = 34,\n    py = 34"
    },
    {
      "type": "Atlas",
      "key": "dicks",
      "atlas": null,
      "pos": null,
      "raw": "key = \"dicks\",\n    path = \"dicks.png\",\n    px = 71,\n    py = 95"
    },
    {
      "type": "Font",
      "key": "DETERMINATION",
      "atlas": null,
      "pos": null,
      "raw": "key = \"DETERMINATION\",\n    path = \"determination.ttf\",\n    render_scale = 200,\n    TEXT_HEIGHT_SCALE = 0.75,\n    TEXT_OFFSET = { x = 10, y = -17 },\n    FONTSCALE = 0.075,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "times",
      "atlas": null,
      "pos": null,
      "raw": "key = \"times\",\n    path = \"times.ttf\",\n    render_scale = 200,\n    TEXT_HEIGHT_SCALE = 0.75,\n    TEXT_OFFSET = { x = 10, y = -17 },\n    FONTSCALE = 0.075,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "gross",
      "atlas": null,
      "pos": null,
      "raw": "key = \"gross\",\n    path = \"DJGROSS.ttf\",\n    render_scale = 128,\n    TEXT_HEIGHT_SCALE = 1,\n    TEXT_OFFSET = { x = 0, y = 0 },\n    FONTSCALE = 0.11,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "papyrus",
      "atlas": null,
      "pos": null,
      "raw": "key = \"papyrus\",\n    path = \"PAPYRUS.TTF\",\n    render_scale = 200,\n    TEXT_HEIGHT_SCALE = 0.75,\n    TEXT_OFFSET = { x = 10, y = -17 },\n    FONTSCALE = 0.075,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "omori",
      "atlas": null,
      "pos": null,
      "raw": "key = \"omori\",\n    path = \"OMORI_GAME2.ttf\",\n    render_scale = 128,\n    TEXT_HEIGHT_SCALE = 1,\n    TEXT_OFFSET = { x = 0, y = 0 },\n    FONTSCALE = 0.23,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "emoji",
      "atlas": null,
      "pos": null,
      "raw": "key = \"emoji\",\n    path = \"NotoEmoji-Regular.ttf\",\n    render_scale = 95,\n    TEXT_HEIGHT_SCALE = 1,\n    TEXT_OFFSET = { x = 10, y = -17 },\n    FONTSCALE = 0.15,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Font",
      "key": "chinese",
      "atlas": null,
      "pos": null,
      "raw": "key = \"chinese\",\n    path = \"YRDZST.ttf\",\n    render_scale = 200,\n    TEXT_HEIGHT_SCALE = 0.75,\n    TEXT_OFFSET = { x = 10, y = -17 },\n    FONTSCALE = 0.075,\n    squish = 1,\n    DESCSCALE = 1"
    },
    {
      "type": "Back",
      "key": "pyro",
      "atlas": "dicks",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = \"pyro\",\n    loc_txt = {\n        name = \"Slop Deck\",\n        text = {\n            \"After defeating a blind:\",\n            \"Spawn 1 common {C:attention}Joker{}\",\n            \"and 1 random {C:attention}consumable{}\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    atlas = \"dicks\",\n    pos = { x = 0, y = 1 },\n    calculate = function(self, back, context)\n        if context.end_of_round and not context.repetition and not context.individual then\n            if not G.GAME.blind.disabled then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.4,\n                    func = function()\n                        local joker_pool = {}\n                        for _, joker in pairs(G.P_CENTERS) do\n                            if joker.set == \"Joker\" and joker.rarity == 1 then\n                                table.insert(joker_pool, joker.key)\n                            end\n                        end\n\n                        if #joker_pool > 0 then\n                            local joker_key = pseudorandom_element(joker_pool, pseudoseed('welcomebacktosloplive'))\n                            SMODS.add_card({\n                                set = \"Joker\",\n                                rarity = \"Common\"\n                            })\n                        end\n\n                        local consumable_types = { 'Tarot', 'Planet', 'Spectral' }\n                        local chosen_type = pseudorandom_element(consumable_types, pseudoseed('thanksforsloppingby'))\n\n                        SMODS.add_card({\n                            set = chosen_type,\n                            area = G.consumeables,\n                            from_card = nil,\n                            discovered = true\n                        })\n\n                        return true\n                    end\n                }))\n            end\n        end\n    end"
    },
    {
      "type": "Back",
      "key": "elon",
      "atlas": "dicks",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"elon\",\n    loc_txt = {\n        name = \"Elon Dihh Deck\",\n        text = {\n            \"Start with {C:money}$250{}\",\n            \"and a {C:dark_edition}Negative{} {C:attention}Mail-in Rebate{} Joker\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    atlas = \"dicks\",\n    pos = { x = 1, y = 1 },\n    config = { dollars = 250 },\n\n    apply = function(self)\n        G.E_MANAGER:add_event(Event({\n            trigger = 'after',\n            delay = 0.1,\n            func = function()\n                SMODS.add_card({\n                    key = \"j_mail\",\n                    edition = \"e_negative\",\n                    area = G.jokers,\n                    discovered = true\n                })\n                return true\n            end\n        }))\n    end"
    },
    {
      "type": "Joker",
      "key": "watericesalt",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'watericesalt',\n    loc_txt = {\n        name = 'A waterballoon?',\n        text = {\n            \"This kid will give you {X:mult,C:white}X10000000{} Mult, {X:blue,C:white}X10000000{} Chips\",\n            \"{C:gold}$100000000{}, and Infinite {C:blue}Hands{}\",\n            \"{C:inactive}(Only works if you hit the Game Over screen.)\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 1,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 0, y = 0 },\n    cost = 1,\n    config = { {} },\n    loc_vars = function(self, info_queue, card)\n        return { {} }\n    end,\n    calculate = function(self, card, context)\n    end"
    },
    {
      "type": "Joker",
      "key": "pingas",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'pingas',\n    loc_txt = {\n        name = \"Snoo{C:attention}ping as{} usual?\",\n        text = {\n            \"{C:red}+#1#{} Mult for each {C:attention}Played{} cards\",\n            \"{C:attention}He{} might see {C:red}you{} snooping around.\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 1, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult_per_card = 4, mult_mod = 4 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.mult_per_card } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.scoring_hand then\n            local total_mult = #context.scoring_hand * card.ability.extra.mult_per_card\n\n            for i = 1, #context.scoring_hand do\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.05 * i,\n                    blockable = false,\n                    func = function()\n                        play_sound('tngt_pingas')\n                        return true\n                    end\n                }))\n            end\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.05 * #context.scoring_hand + 0.1,\n                blockable = false,\n                func = function()\n                    card:juice_up(0.3, 0.3)\n                    return true\n                end\n            }))\n\n            return {\n                mult_mod = card.ability.extra.mult_per_card,\n                message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult_per_card } },\n                sound = \"tngt_pingas\",\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "nothing",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'nothing',\n    loc_txt = {\n        name = \"{C:inactive}...{}\",\n        text = {\n            \"This {C:attention}#{} gains {C:attention}#{} for each {C:attention}#{}\",\n            \"{C:attention}#{} in this run.{}\",\n            \"{C:inactive}(Currently {C:attention}#{} {C:inactive}out of {C:attention}#{}{C:inactive})\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 2, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 1, xmult_gain = 5 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult_gain } }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.blueprint then\n            card.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmult_gain\n            return {\n                message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.xmult } },\n                colour = G.C.MULT\n            }\n        end\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "fish",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'fish',\n    loc_txt = {\n        name = 'You know what that mean? :D',\n        text = {\n            \"Gains {C:blue}+15{} Chips for each played cards.\",\n            \"{C:inactive}--------------------------------\",\n            \"{C:attention,s:3}fish.{}\"\n        }\n    },\n    config = { extra = { chips = 15 } },\n    rarity = 1,\n    atlas = 'ModdedVanilla',\n    pos = { x = 2, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.chips } }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and not context.other_card:is_face() then\n            return {\n                chips = card.ability.extra.chips\n            }\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "kingbach",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'kingbach',\n    loc_txt = {\n        name = \"Aye dawg, can i get some {C:red}I{}{C:blue}c{}{C:gold}e{} {C:attention}cream?\",\n        text = {\n            \"{C:red}+#1#{} Mult,\",\n            \"{C:blue}+#2#{} Chips,\",\n            \"{C:gold}+$#3#{} Dollars,\",\n            \"and {C:blue}15{} Bitches.\",\n            \"{C:inactive}King Bach pulls out a Comically Large Spoon.{}\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 2, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            scoring_mult = 15,\n            scoring_chips = 15,\n            blind_dollars = 5\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.scoring_mult,\n                card.ability.extra.scoring_chips,\n                card.ability.extra.blind_dollars\n            }\n        }\n    end,\n    add_to_deck = function()\n        play_sound('tngt_canigetsomeicecream')\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                sound = \"tngt_onlyaspoonful\",\n                mult = card.ability.extra.scoring_mult,\n                chips = card.ability.extra.scoring_chips,\n                card = card\n            }\n        end\n        if context.setting_blind and not context.blueprint then\n            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + card.ability.extra.blind_dollars\n            return {\n                sound = \"tngt_onlyaspoonful\",\n                dollars = card.ability.extra.blind_dollars,\n                card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "melvin",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'melvin',\n    loc_txt = {\n        name = \"Melvin {C:red}Mult{}\",\n        text = {\n            \"{C:red}+#1#{} Mult for each {C:attention}Joker{} in this run.\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 2, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult = 15 } },\n    loc_vars = function(self, info_queue, card)\n        local gem_alert = 0\n        if G.jokers then\n            for _, j in ipairs(G.jokers.cards) do\n                if j ~= card and j.config.center.rarity > 1 then\n                    gem_alert = gem_alert + 1\n                end\n            end\n        end\n        return { vars = { card.ability.extra.mult, gem_alert } }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local gem_alert = 0\n            for _, j in ipairs(G.jokers.cards) do\n                if j ~= card and j.config.center.rarity > 1 then\n                    gem_alert = gem_alert + 1\n                end\n            end\n\n            if gem_alert > 0 then\n                return {\n                    mult = card.ability.extra.mult * gem_alert\n                }\n            end\n        end\n    end,\n\n    sprite_effects = {\n        on_trigger = function(card)\n            if G.jokers then\n                local gem_alert = 0\n                for _, j in ipairs(G.jokers.cards) do\n                    if j ~= card and j.config.center.rarity > 1 then\n                        gem_alert = gem_alert + 1\n                    end\n                end\n                if gem_alert > 0 then\n                    card:juice_up(0.3, 0.3)\n                end\n            end\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "bwomp",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'bwomp',\n    loc_txt = {\n        name = \"{C:blue}Bwomp{}\",\n        text = {\n            \"{X:chips,C:white}X#1#{} Chips if it's your last {C:blue}hand{} of the round.\",\n            \"{C:inactive}How is this even possible?{}\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 1, y = 1 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xchips = 3.5 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xchips } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and G.GAME.current_round.hands_left == 0 then\n            return {\n                sound = \"tngt_bwomp\",\n                x_chips = card.ability.extra.xchips\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "noassforoldman",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"noassforoldman\",\n    loc_txt = {\n        name = \"Call it.\",\n        text = {\n            \"{C:chips}+#1#{} Chips or {C:mult}+#1#{} Mult,\",\n            \"call it.\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 1, y = 1 },\n    cost = 1,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            bonus = 1\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.bonus },\n            colours = { G.C.CHIPS, G.C.MULT }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play then\n            local is_chips = pseudorandom('coin_flip_' .. G.GAME.round_resets.ante) < 0.5\n\n            if is_chips then\n                return {\n                    chips = card.ability.extra.bonus,\n                    message = localize { type = 'variable', key = 'a_chips', vars = { card.ability.extra.bonus } },\n                    colour = G.C.CHIPS\n                }\n            else\n                return {\n                    mult = card.ability.extra.bonus,\n                    message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.bonus } },\n                    colour = G.C.MULT\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "virtual",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'virtual',\n    loc_txt = {\n        name = \"Jokeroquai\",\n        text = {\n            \"Earn {C:gold}$#1#{} Dollars\",\n            \"for each {C:attention}insanity{} occurence.\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 2, y = 1 },\n    soul_pos = {\n    x = 3,\n    y = 1,\n    \n    set_sprites = function(self, card, front)\n        if self.discovered or card.bypass_discovery_center then\n            card.children.floating_sprite = Sprite(card.T.x, card.T.y, card.T.w, card.T.h,\n                G.ASSET_ATLAS[card.config.center.atlas], {\n                    x = 3,\n                    y = 1 \n                })\n            card.children.floating_sprite.role.draw_major = card\n            card.children.floating_sprite.states.hover.can = false\n            card.children.floating_sprite.states.click.can = false\n        end\n    end,\n\n    draw = function(card, scale_mod, rotate_mod)\n        --if not (card.hovered and card.states.hover) or not card.children.floating_sprite then \n            if card.children.floating_sprite then\n                card.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, card.children.center, \n                    0.2, 0, nil, 0, nil, 0.6)\n            end\n            --return \n        --end\n        local anim_timer = ((G.TIMERS.REAL/90) % 1)\n        local growth_phase = anim_timer < 0.9\n        local scale_ease = growth_phase and \n            (anim_timer < 0.5 and 2*(anim_timer/0.9)^2 or 1 - 2*(1 - (anim_timer/0.9))^2) or\n            0\n        local min_scale = 0.1\n        local max_scale = 1.5\n        local current_scale = min_scale + (max_scale - min_scale) * scale_ease\n        local rotation = current_scale * 0.15 * math.sin(anim_timer * 2 * math.pi)\n        local y_offset = -0.2 * current_scale\n        card.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, card.children.center, \n            current_scale, rotation, nil, y_offset, nil, 0.6)\n    end\n},\n    cost = 2,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { interest = -1 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.interest } }\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        G.GAME.interest_amount = G.GAME.interest_amount + card.ability.extra.interest\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        G.GAME.interest_amount = G.GAME.interest_amount - card.ability.extra.interest\n    end"
    },
    {
      "type": "Joker",
      "key": "markimoo",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'markimoo',\n    loc_txt = {\n        name = \"Hello {C:attention}everybody{}, my name is {X:mult,C:white}Mult{}{C:red}iplier.{}\",\n        text = {\n            \"{C:red}+#1#{} Mult, otherwise {X:mult,C:white}X#2#{} Mult.\"\n        }\n    },\n    rarity = 1,\n    cost = 3,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 3, y = 1 },\n    config = {\n        extra = {\n            base_mult = 9,\n            mult_plier = 87,\n            chance = 6\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.base_mult,\n                card.ability.extra.mult_plier,\n                card.ability.extra.chance\n            },\n            colours = { nil, G.C.RED }\n        }\n    end,\n\n    calculate = function(self, card, context)\n    if context.joker_main then\n    if SMODS.pseudorandom_probability(card, 'mustard', 1, card.ability.extra.chance) then\n                card:juice_up(1, 0.8)\n                play_sound('tarot1', 1.2)\n                return {\n                    message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.mult_plier } },\n                    xmult = card.ability.extra.mult_plier,\n                    colour = G.C.RED,\n                    card_eval = card\n                }\n            else\n                return {\n                    mult = card.ability.extra.base_mult,\n                    card_eval = card\n                }\n            end \n    end\nend"
    },
    {
      "type": "Joker",
      "key": "backshots",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'backshots',\n    loc_txt = {\n        name = 'who wnats b{f:tngt_emoji}💔{}ckshots {f:tngt_emoji}🥀{}',\n        text = {\n            \"This devious {C:red}backshots{} gains {X:mult,C:white}X#1#{} Mult\",\n            \"for each scored lowest ranked cards {C:inactive}(2 - 5).{}\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)\"\n        }\n    },\n    rarity = 1,\n    atlas = 'ModdedVanilla',\n    pos = { x = 2, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    eternal_compat = true,\n    config = { extra = { mult_per_low_card = 0.8, current_xmult = 1 } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.mult_per_low_card,\n                card.ability.extra.current_xmult\n            }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local low_card_count = 0\n            for _, played_card in ipairs(context.scoring_hand) do\n                local rank = played_card:get_id()\n                if rank >= 2 and rank <= 5 then\n                    low_card_count = low_card_count + 1\n                end\n            end\n\n            if low_card_count > 0 then\n                return {\n                    x_mult = 1 + (card.ability.extra.mult_per_low_card * low_card_count)\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "dudeperson",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'dudeperson',\n    loc_txt = {\n        name = \"Joker J. Jimbo\",\n        text = {\n            \"{C:red}+#1#?{} Mult\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 1,\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            mults = { 4, 44, 444, 4.444 }\n        }\n    },\n    atlas = 'ModdedVanilla5',\n    pos = { x = 5, y = 0 },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = card.ability.extra.mults\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and not context.blueprint then\n            local mults = card.ability.extra.mults\n            local chosen = pseudorandom_element(mults, pseudoseed(\"Foursome\"))\n            return {\n                mult = chosen,\n                message = \"+#1#? Mult\",\n                colour = G.C.MULT\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "CHOMIK",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'CHOMIK',\n    loc_txt = {\n        name = \"Chomik\",\n        text = {\n            \"This Hampter Gains {C:mult}+#1#{} Mult and {C:chips}+#2#{} Chips\",\n            \" per used consumable this run\",\n            \"{C:inactive}(Currently: {C:mult}+#4#{C:inactive} Mult and {C:chips}+#5#{C:inactive} Chips)\",\n            \"{C:inactive}[eaten {C:attention}#3#{C:inactive} consumables]{}\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 1,\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 5, y = 0 },\n    config = {\n        extra = {\n            mult_gain = 3,\n            chip_gain = 25,\n            consumed = 0\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.mult_gain,\n                card.ability.extra.chip_gain,\n                card.ability.extra.consumed,\n                card.ability.extra.mult_gain * card.ability.extra.consumed,\n                card.ability.extra.chip_gain * card.ability.extra.consumed\n            }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        if context.using_consumeable and not context.blueprint then\n            card.ability.extra.consumed = card.ability.extra.consumed + 1\n\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    card:juice_up(0.5, 0.5)\n                    return true\n                end\n            }))\n\n            return {\n                message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult_gain } } ..\n                    \" \" ..\n                    localize { type = 'variable', key = 'a_chips', vars = { card.ability.extra.chip_gain } },\n                colour = G.C.MULT\n            }\n        end\n\n        if context.joker_main and card.ability.extra.consumed > 0 then\n            return {\n                mult = card.ability.extra.mult_gain * card.ability.extra.consumed,\n                chips = card.ability.extra.chip_gain * card.ability.extra.consumed\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "cope",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'cope',\n    loc_txt = {\n        name = 'C.O.P.E',\n        text = {\n            \"Each played {C:attention}4{} and {C:attention}7{} will be retriggered {C:attention}twice.{}\",\n            \"{C:inactive,s:0.7}WHAT THE FUCK IS A KILOMETRE?!?!?!?!??!??!?{}\"\n        }\n    },\n    config = { extra = { mult = 4 }, retriggers = 2 },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.mult } }\n    end,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla',\n    pos = { x = 0, y = 0 },\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.repetition and context.cardarea == G.play then\n            if context.other_card:get_id() == 7 or context.other_card:get_id() == 4 then\n                return { repetitions = 2 }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "error",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'error',\n    loc_txt = {\n        name = 'joker.mdl',\n        text = {\n            \"{C:inactive}(undefined Mult)\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 0, y = 0 },\n    cost = 4,\n    config = {\n        extra = {\n            min_xmult = 1,\n            max_xmult = 10\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        local r_xmults = {}\n        for i = card.ability.extra.min_xmult * 10, card.ability.extra.max_xmult * 10 do\n            r_xmults[#r_xmults + 1] = tostring(i / 10)\n        end\n\n        local loc_xmult = ' ' .. localize('k_xmult') .. ' '\n        main_start = {\n            {\n                n = G.UIT.O,\n                config = {\n                    object = DynaText({\n                        string = {\n                            { string = '+', colour = G.C.RED },\n                            { string = 'X', colour = G.C.MULT },\n                            { string = '^', colour = G.C.MULT },\n                            { string = '=', colour = G.C.MULT },\n                            { string = '?', colour = G.C.RED },\n                            { string = '!', colour = G.C.RED }\n                        },\n                        colours = { G.C.UI.TEXT_DARK },\n                        scale = 0.32\n                    })\n                }\n            },\n            {\n                n = G.UIT.O,\n                config = {\n                    object = DynaText({\n                        string = r_xmults,\n                        colours = { G.C.RED },\n                        pop_in_rate = 9999999,\n                        silent = true,\n                        random_element = true,\n                        pop_delay = 0.2011,\n                        scale = 0.32,\n                        min_cycle_time = 0\n                    })\n                }\n            },\n            {\n                n = G.UIT.O,\n                config = {\n                    object = DynaText({\n                        string = {\n                            { string = ' Upd ati nng..',                       colour = G.C.JOKER_GREY },\n                            { string = ' Missi ng..',                          colour = G.C.JOKER_GREY },\n                            { string = ' #@' .. (G.deck and #G.deck.cards or 0), colour = G.C.RED },\n                            loc_xmult, loc_xmult, loc_xmult\n                        },\n                        colours = { G.C.UI.TEXT_DARK },\n                        pop_in_rate = 9999999,\n                        silent = true,\n                        random_element = true,\n                        pop_delay = 0.2011,\n                        scale = 0.32,\n                        min_cycle_time = 0\n                    })\n                }\n            }\n        }\n        return { main_start = main_start }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            -- Generate random Xmult between min and max\n            local random_xmult = pseudorandom(\n                'chaos_orb_xmult_' .. G.GAME.round_resets.ante,\n                card.ability.extra.min_xmult * 10,\n                card.ability.extra.max_xmult * 10\n            ) / 10\n\n            return {\n                x_mult = random_xmult,\n                colour = G.C.RED\n            }\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "house",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'house',\n    loc_txt = {\n        name = 'House J.K{C:inactive,s:0.7}.R{}',\n        text = {\n            \"This Doctor will cure your cards and gain {X:blue,C:white}X#1#{} Vicodins\",\n            \"Sick cards = {C:attention}Enhanced{} cards\",\n            \"{C:inactive}(Currently {X:blue,C:white} X#2# {C:inactive} Vicodins)\",\n            \"{C:inactive,s:2}I told you it's not {C:green,s:2}Lupus.{C:inactive}\"\n        }\n    },\n    config = { extra = { xchips_gain = 0.5, xchips = 1 } },\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 0, y = 0 },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xchips_gain, card.ability.extra.xchips } }\n    end,\n    calculate = function(self, card, context)\n        if context.before and context.main_eval and not context.blueprint then\n            local enhanced = {}\n            for _, scored_card in ipairs(context.scoring_hand) do\n                if next(SMODS.get_enhancements(scored_card)) and not scored_card.debuff and not scored_card.vampired then\n                    enhanced[#enhanced + 1] = scored_card\n                    scored_card.vampired = true\n                    scored_card:set_ability('c_base', nil, true)\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            scored_card:juice_up()\n                            scored_card.vampired = nil\n                            return true\n                        end\n                    }))\n                end\n            end\n\n            if #enhanced > 0 then\n                card.ability.extra.xchips = card.ability.extra.xchips + card.ability.extra.xchips_gain * #enhanced\n                return {\n                    message = \"Cured.\",\n                    colour = G.C.GREEN\n                }\n            end\n        end\n        if context.joker_main then\n            return {\n                xchips = card.ability.extra.xchips\n            }\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "dealmaker",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'dealmaker',\n    loc_txt = {\n        name = 'Dealmaker',\n        text = {\n            \"Played {C:attention}face cards{} will earn you a random amount of {C:gold,s:1.5,E:2}[[KROMER]]{}\",\n            \"{C:inactive,s:0.7}WHAT THE [[FIFTY DOLLARS SPECIAL.]]{}\"\n        }\n    },\n    config = {},\n    loc_vars = function(self, info_queue, card)\n        return {}\n    end,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 0, y = 0 },\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.starting_shop then\n            local has_joker = next(SMODS.find_card(\"j_tngt_dealmaker\"))\n            if has_joker then\n                return {\n                    message = \"DEALS SO GOOD I'LL [$!$$] MYSELF\",\n                    sound = \"tngt_dealsogood\",\n                    colour = G.C.YELLOW\n                }\n            end\n        end\n        if context.individual and context.cardarea == G.play and context.other_card:is_face() then\n            local amount = pseudorandom('BIGSHOT', 1, 8)\n            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + amount\n            return {\n                dollars = amount,\n                func = function()\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            G.GAME.dollar_buffer = 0\n                            return true\n                        end\n                    }))\n                end\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "shitass",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'shitass',\n    loc_txt = {\n        name = 'Hey {C:attention}shitass{}, wanna {C:attention}see{} me {C:blue}speedrun?{}',\n        text = {\n            \"{C:red}Beat his ass{} by beating the {C:attention}Blind{} before\",\n            \"{C:attention}20{} seconds runs out.\",\n            \"{C:gold,s:2}AND WIN BIG PRIZES.\",\n            \"{C:inactive}(The Timer is down here.)\",\n            \"{C:inactive,s:0.7}Yes, you have to hover over the Joker to see it, cry about it.\"\n        }\n    },\n    config = { start = 0, inblind = 0, time = 20 },\n    loc_vars = function(self, info_queue, card)\n        return {\n            main_end = {\n                {\n                    n = G.UIT.C,\n                    config = { align = \"bm\", minh = 0.3 },\n                    nodes = {\n                        {\n                            n = G.UIT.T,\n                            config = {\n                                ref_table = card.ability,\n                                ref_value = \"time\",\n                                scale = 0.32,\n                                colour = G.C.GREEN\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    end,\n    update = function(self, card)\n        card.ability.time = string.gsub(\n        string.format(\"%.2f\", 20 - (G.TIMERS.REAL - card.ability.start) * card.ability.inblind), \"%.\", \":\")\n    end,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 0, y = 0 },\n    cost = 3,\n    calculate = function(self, card, context)\n        if context.blueprint then return end\n\n        if context.setting_blind then\n            card.ability.start = G.TIMERS.REAL\n            card.ability.inblind = 1\n            return {\n                sound = \"tngt_shitass\",\n                message = \"*loud mechanical keyboard noise*\"\n            }\n        end\n\n        if (context.end_of_round and context.main_eval and not context.repetition) or context.forcetrigger then\n            card.ability.inblind = 0\n            if (G.TIMERS.REAL - card.ability.start <= 20) or context.forcetrigger then\n                card:start_dissolve()\n                SMODS.add_card {\n                    set = \"Joker\",\n                    rarity = \"Legendary\"\n                }\n                return {\n                    message = \"AAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                    colour = G.C.BLUE\n                }\n            else\n                return {\n                    message = \"...W- wha?..\",\n                    colour = G.C.RED\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "radiohead",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'radiohead',\n    loc_txt = {\n        name = \"Radio{C:attention}haaaaaaacho!{}\",\n        text = {\n            \"This Thom Shoerke gains {X:mult,C:white}X1.5{} Mult for each\",\n            \"{f:tngt_papyrus,X:dark_edition,C:white}Head..{} given by {C:attention}Radio{} in this run.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X3{} {C:inactive}Mult)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 1, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult = 3 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.mult } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.mult\n            }\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "chris",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'chris',\n    loc_txt = {\n        name = \"Chris {C:blue}Chips{}\",\n        text = {\n            \"{C:blue}+#1#{} Chips for each {C:attention}consumable{} held in this run.\",\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 1, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { chips_per_consumable = 150 } },\n\n    loc_vars = function(self, info_queue, card)\n        local consumable_count = G.consumeables and #G.consumeables.cards or 0\n        return {\n            vars = {\n                card.ability.extra.chips_per_consumable,\n                consumable_count,\n                card.ability.extra.chips_per_consumable * consumable_count\n            }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local consumable_count = G.consumeables and #G.consumeables.cards or 0\n            if consumable_count > 0 then\n                return {\n                    chips = card.ability.extra.chips_per_consumable * consumable_count,\n                    card_eval = card,\n                    colour = G.C.CHIPS\n                }\n            end\n        end\n    end,\n\n    callbacks = {\n        on_consumeable_added = function(card)\n            card:juice_up(0.2, 0.2)\n        end,\n        on_consumeable_removed = function(card)\n            card:juice_up(0.2, 0.2)\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "papersplease",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'papersplease',\n    loc_txt = {\n        name = \"Jorji\",\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult, but if you let {C:attention}Jorji{} stays\",\n            \"for {C:attention}3{} rounds, he might give you {C:gold}something{} {C:red}useful.\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 1, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            rounds_remaining = 3,\n            base_xmult = 0.5,\n            reward_dollars = 25,\n            reward_rarity = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.base_xmult,\n                card.ability.extra.rounds_remaining,\n                card.ability.extra.reward_dollars,\n                localize(card.ability.extra.reward_rarity, 'rarities')\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.base_xmult\n            }\n        end\n\n        if context.end_of_round and context.main_eval and not context.blueprint and not context.game_over then\n            card.ability.extra.rounds_remaining = card.ability.extra.rounds_remaining - 1\n\n            if card.ability.extra.rounds_remaining <= 0 then\n                G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + card.ability.extra.reward_dollars\n\n                local reward_message = \"\"\n                if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n                    G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n                    reward_message = localize { type = 'variable', key = 'a_dollars_and_joker', vars = {\n                        card.ability.extra.reward_dollars,\n                        localize(card.ability.extra.reward_rarity, 'rarities')\n                    } }\n                else\n                    reward_message = localize { type = 'variable', key = 'a_dollars', vars = { card.ability.extra.reward_dollars } }\n                end\n\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        if #G.jokers.cards + G.GAME.joker_buffer <= G.jokers.config.card_limit then\n                            SMODS.add_card({\n                                set = \"Joker\",\n                                rarity = card.ability.extra.reward_rarity,\n                                key_append = \"thanks\"\n                            })\n                        end\n                        G.GAME.joker_buffer = 0\n                        G.GAME.dollar_buffer = 0\n                        card:start_dissolve()\n                        return true\n                    end\n                }))\n\n                return {\n                    message = \"Glory to Balatrotzka\",\n                    colour = G.C.MONEY,\n                    card = card\n                }\n            else\n                return {\n                    message = card.ability.extra.rounds_remaining .. \"/3\",\n                    colour = G.C.FILTER,\n                    card = card\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "friends",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'friends',\n    loc_txt = {\n        name = 'Joker Inside Me',\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult for each remaining card in deck.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{C:inactive} Mult)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 3, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 0.2 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult * ((G.deck and G.deck.cards) and #G.deck.cards or 52) } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult * #G.deck.cards\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "meth",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'meth',\n    loc_txt = {\n        name = \"{C:blue}Prio{C:red}rity.{}\",\n        text = {\n            \"Either {C:green,E:1}1{} in {C:green,E:1}#3#{} chances to grant {X:blue,C:white}X#1#{} Chips\",\n            \"{C:red,s:2}OR{}\",\n            \"{C:green,E:1}1{} in {C:green,E:1}1{} chance to grant {X:mult,C:white}X#2#{} Mult\",\n            \"{C:inactive,s:0.7}Meth rules, tbh, no competition.{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 3, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xchips = 2.5, xmult = 1.5, odds = 3 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xchips, card.ability.extra.xmult, card.ability.extra.odds } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            if pseudorandom(\"methstr8up:3\") < 1 / card.ability.extra.odds then\n                return {\n                    xchips = card.ability.extra.xchips,\n                    message = \"SAVE CHILDREN.\",\n                    colour = G.C.CHIPS\n                }\n            else\n                return {\n                    xmult = card.ability.extra.xmult,\n                    message = \"M E T H\",\n                    colour = G.C.MULT\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "starwalker",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'starwalker',\n    loc_txt = {\n        name = 'The original  {C:attention}starwalker{}',\n        text = {\n            \"{s:2}* This sprite is {C:attention,s:2}pissing{} {s:2}me off...{}\",\n            \"{C:inactive}--------------------------------\",\n            \"Gives a random amount of {C:red}+Mult{} for each {C:attention}Diamonds{} played.\"\n        }\n    },\n    config = { extra = { mult = 15 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 2, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return {}\n    end,\n    add_to_deck = function()\n        play_sound('tngt_recruit')\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and context.other_card:is_suit('Diamonds') then\n            local amount = pseudorandom('iwillalsojoin', 2, 12)\n            return {\n                mult = amount,\n                message = \"This card is pissing  me off.\",\n                colour = G.C.YELLOW\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "lossforword",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'lossforword',\n    loc_txt = {\n        name = \"is this {C:red}loss{}????\",\n        text = {\n            \"This Joker gains {X:mult,C:white}X#1#{} Mult for each destroyed card.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#3#{} {C:inactive}Mult.){}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 3, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult_per_card = 0.4, four_finger_bonus = 4, mult = 1 } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"Loss\", set = \"Other\" }\n        return {\n            vars = {\n                card.ability.extra.mult_per_card,\n                card.ability.extra.four_finger_bonus,\n                card.ability.extra.mult\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.remove_playing_cards and not context.blueprint then\n            local destroyed_count = #context.removed\n\n            local four_finger_active = next(SMODS.find_card(\"j_four_fingers\")) ~= nil\n\n            if four_finger_active then\n                card.ability.extra.mult = card.ability.extra.mult +\n                    (destroyed_count * card.ability.extra.four_finger_bonus)\n                return {\n                    message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.mult } },\n                    colour = G.C.RED\n                }\n            else\n                card.ability.extra.mult = card.ability.extra.mult +\n                    (destroyed_count * card.ability.extra.mult_per_card)\n                return {\n                    message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.mult } },\n                    colour = G.C.MULT\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.mult\n            }\n        end\n    end,\n    callbacks = {\n        on_play_destroy = function(card, context)\n            card:juice_up(0.5, 0.5)\n            return nil\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "kendih",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'kendih',\n    loc_txt = {\n        name = \". . .{X:attention,C:white,s:2,E:2}M-{}\",\n        text = {\n            \"{C:green}1{} in {C:green}#1#{} chance for {C:attention}Kendih{}{f:tngt_emoji}🥀{}\",\n            \"to scream {X:attention,C:white,s:2,E:2}MUSTARD{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 3, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = {\n        chance = 4,\n        xmult = 1000,\n        variance = 5000\n    } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chance,\n                card.ability.extra.xmult,\n                card.ability.extra.xmult + card.ability.extra.variance\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and pseudorandom('mustard') < G.GAME.probabilities.normal / card.ability.extra.chance then\n            local multard = card.ability.extra.xmult +\n                pseudorandom('mustard') % card.ability.extra.variance\n\n            if not nxkoo_dies.mustard_png then\n                nxkoo_dies.mustard_png = load_image(\"mustard.png\")\n            end\n            nxkoo_dies.show_mustard = true\n            nxkoo_dies.mustard_timer = 0.5\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.3,\n                blockable = false,\n                func = function()\n                    card:juice_up(2, 2)\n                    return true\n                end\n            }))\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'immediate',\n                func = (function()\n                    play_sound('tngt_mustard', 1, 1000)\n                    return true\n                end)\n            }))\n\n            return {\n                xmult = multard,\n                sound = \"tngt_neverforget\",\n                card = card,\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "dafoe",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'dafoe',\n    loc_txt = {\n        name = \"{C:blue}D:{}\",\n        text = {\n            \"{C:blue}+#1#{} Chips and {X:blue,C:white}X#2#{} Chips\",\n            \"if the {C:blue}chip{} counter number is {C:gold}higher{} than the {C:red}Mult{} one\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 3, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            chips = 200,\n            xchips = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chips,\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.full_hand then\n            if hand_chips > mult then\n                play_sound('tngt_neverforget', 1.2)\n                card:juice_up(0.5, 0.5)\n                return {\n                    colour = G.C.CHIPS,\n                    chips = card.ability.extra.chips,\n                    xchips = card.ability.extra.xchips\n                }\n            else\n                card:juice_up(0.1, 0.1)\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "bepisfever",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'bepisfever',\n    loc_txt = {\n        name = \"{C:blue,E:2}BEPIS{} MAN.\",\n        text = {\n            \"{X:blue,C:white}X#1#{} Chips for every {C:attention}#2#{} played {C:clubs}Clubs{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 3, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            xchips = 3,\n            clubs_required = 4\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"bepis\", set = \"Other\" }\n        return {\n            vars = {\n                card.ability.extra.xchips,\n                card.ability.extra.clubs_required,\n                G.GAME.current_round.clubs_played or 0,\n                math.floor((G.GAME.current_round.clubs_played or 0) / card.ability.extra.clubs_required) *\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and context.other_card:is_suit('Clubs') then\n            G.GAME.current_round.clubs_played = (G.GAME.current_round.clubs_played or 0) + 1\n        end\n\n        if context.joker_main then\n            local club_batches = math.floor((G.GAME.current_round.clubs_played or 0) / card.ability.extra.clubs_required)\n            return {\n                xchips = club_batches * card.ability.extra.xchips,\n                card_eval_status = (club_batches > 1) and 'active' or nil\n            }\n        end\n    end,\n    callbacks = {\n        on_round_start = function(self, card)\n            G.GAME.current_round.clubs_played = 0\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "twintowers",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'twintowers',\n    loc_txt = {\n        name = 'Never Forget',\n        text = {\n            \"Enhance all\",\n            \"played {C:attention}9{} and {C:attention}Aces{} into a Steel card\",\n            \"and retrigger it {C:attention}twice{}\",\n            \"{C:green}1 in 6{} chance to destroy played cards\"\n        }\n    },\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_steel\n    end,\n    calculate = function(self, card, context)\n        local c = context.other_card\n        if context.repetition and context.cardarea == G.play then\n            if context.other_card:get_id() == 9 or context.other_card:get_id() == 14 then\n                c:set_ability(\"m_steel\")\n                return {\n                    repetitions = 2\n                }\n            end\n        end\n\n        if context.joker_main and not context.blueprint and pseudorandom('neverforget', 1, 6) == 1 then\n            return {\n                remove = true,\n                message = \"THEY HIT THE SECOND TOWER!\",\n                play_sound = \"tngt_neverforget\",\n                colour = G.C.RED\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "chud\t",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'chud\t',\n    loc_txt = {\n        name = '{C:attention}High Card{} Has fallen.',\n        text = {\n            \"{C:green}Jimbillions{} must play {C:attention}#2#{}\",\n            \"{C:inactive}Seriously, who made this meme big, it sucks.\"\n        }\n    },\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 10, poker_hand = 'High Card' } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, localize(card.ability.extra.poker_hand, 'poker_hands') } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.scoring_name == card.ability.extra.poker_hand then\n            return {\n                mult = card.ability.extra.xmult,\n                message = 'West has fallen!',\n                colour = G.C.RED\n            }\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition then\n            local _poker_hands = {}\n            for k, v in pairs(G.GAME.hands) do\n                if v.visible and k ~= card.ability.extra.poker_hand then\n                    _poker_hands[#_poker_hands + 1] = k\n                end\n            end\n            card.ability.extra.poker_hand = pseudorandom_element(_poker_hands, pseudoseed('GAMBAGAMBA'))\n            return {\n                message = localize('k_reset')\n            }\n        end\n    end,\n    set_ability = function(self, card, initial, delay_sprites)\n        local _poker_hands = {}\n        for k, v in pairs(G.GAME.hands) do\n            if v.visible then\n                _poker_hands[#_poker_hands + 1] = k\n            end\n        end\n        card.ability.extra.poker_hand = pseudorandom_element(_poker_hands,\n            pseudoseed((card.area and card.area.config.type == 'title') and 'tngt_chud' or 'tngt_chud'))\n    end"
    },
    {
      "type": "Joker",
      "key": "johncena",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'johncena',\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            chips = 300,\n            chip_loss = 50,\n            xchips = 3,\n            xchips_loss = 0.5\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chips,\n                card.ability.extra.chip_loss,\n                card.ability.extra.xchips,\n                card.ability.extra.xchips_loss\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.after and context.main_eval and not context.blueprint then\n            if card.ability.extra.chips - card.ability.extra.chip_loss <= 0 or\n                card.ability.extra.xchips - card.ability.extra.xchips_loss <= 0 then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot1')\n                        card:juice_up(0.3, 0.4)\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                card:remove()\n                                return true\n                            end\n                        }))\n                        return true\n                    end\n                }))\n\n                return {\n                    message = localize('k_melted_ex'),\n                    colour = G.C.RED\n                }\n            else\n                card.ability.extra.chips = card.ability.extra.chips - card.ability.extra.chip_loss\n                card.ability.extra.xchips = card.ability.extra.xchips - card.ability.extra.xchips_loss\n\n                return {\n                    message = localize {\n                        type = 'variable',\n                        key = 'a_chips_xchips_minus',\n                        vars = {\n                            card.ability.extra.chip_loss,\n                            card.ability.extra.xchips_loss\n                        }\n                    },\n                    colour = G.C.RED\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                chips = card.ability.extra.chips,\n                xchips = card.ability.extra.xchips\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "lossforword",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'lossforword',\n    loc_txt = {\n        name = \"is this {C:red}loss{}????\",\n        text = {\n            \"This Joker gains {X:mult,C:white}X#1#{} Mult for each destroyed card.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#3#{} {C:inactive}Mult.){}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 3, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult_per_card = 0.4, four_finger_bonus = 4, mult = 1 } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"Loss\", set = \"Other\" }\n        return {\n            vars = {\n                card.ability.extra.mult_per_card,\n                card.ability.extra.four_finger_bonus,\n                card.ability.extra.mult\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.remove_playing_cards and not context.blueprint then\n            local destroyed_count = #context.removed\n\n            local four_finger_active = next(SMODS.find_card(\"j_four_fingers\")) ~= nil\n\n            if four_finger_active then\n                card.ability.extra.mult = card.ability.extra.mult +\n                    (destroyed_count * card.ability.extra.four_finger_bonus)\n                return {\n                    message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.mult } },\n                    colour = G.C.RED\n                }\n            else\n                card.ability.extra.mult = card.ability.extra.mult +\n                    (destroyed_count * card.ability.extra.mult_per_card)\n                return {\n                    message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.mult } },\n                    colour = G.C.MULT\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.mult\n            }\n        end\n    end,\n    callbacks = {\n        on_play_destroy = function(card, context)\n            card:juice_up(0.5, 0.5)\n            return nil\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "kendih",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'kendih',\n    loc_txt = {\n        name = \". . .{X:attention,C:white,s:2,E:2}M-{}\",\n        text = {\n            \"{C:green}1{} in {C:green}#1#{} chance for {C:attention}Kendih{}{f:tngt_emoji}🥀{}\",\n            \"to scream {X:attention,C:white,s:2,E:2}MUSTARD{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 3, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = {\n        chance = 4,\n        xmult = 1000,\n        variance = 5000\n    } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chance,\n                card.ability.extra.xmult,\n                card.ability.extra.xmult + card.ability.extra.variance\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and pseudorandom('mustard') < G.GAME.probabilities.normal / card.ability.extra.chance then\n            local multard = card.ability.extra.xmult +\n                pseudorandom('mustard') % card.ability.extra.variance\n\n            if not nxkoo_dies.mustard_png then\n                nxkoo_dies.mustard_png = load_image(\"mustard.png\")\n            end\n            nxkoo_dies.show_mustard = true\n            nxkoo_dies.mustard_timer = 0.5\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.3,\n                blockable = false,\n                func = function()\n                    card:juice_up(2, 2)\n                    return true\n                end\n            }))\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'immediate',\n                func = (function()\n                    play_sound('tngt_mustard', 1, 1000)\n                    return true\n                end)\n            }))\n\n            return {\n                xmult = multard,\n                sound = \"tngt_neverforget\",\n                card = card,\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "dafoe",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'dafoe',\n    loc_txt = {\n        name = \"{C:blue}D:{}\",\n        text = {\n            \"{C:blue}+#1#{} Chips and {X:blue,C:white}X#2#{} Chips\",\n            \"if the {C:blue}chip{} counter number is {C:gold}higher{} than the {C:red}Mult{} one\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 3, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            chips = 200,\n            xchips = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chips,\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.full_hand then\n            if hand_chips > mult then\n                play_sound('tngt_neverforget', 1.2)\n                card:juice_up(0.5, 0.5)\n                return {\n                    colour = G.C.CHIPS,\n                    chips = card.ability.extra.chips,\n                    xchips = card.ability.extra.xchips\n                }\n            else\n                card:juice_up(0.1, 0.1)\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "bepisfever",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'bepisfever',\n    loc_txt = {\n        name = \"{C:blue,E:2}BEPIS{} MAN.\",\n        text = {\n            \"{X:blue,C:white}X#1#{} Chips for every {C:attention}#2#{} played {C:clubs}Clubs{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 3, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            xchips = 7,\n            clubs_required = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"bepis\", set = \"Other\" }\n        return {\n            vars = {\n                card.ability.extra.xchips,\n                card.ability.extra.clubs_required,\n                G.GAME.current_round.clubs_played or 0,\n                math.floor((G.GAME.current_round.clubs_played or 0) / card.ability.extra.clubs_required) *\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and context.other_card:is_suit('Clubs') then\n            G.GAME.current_round.clubs_played = (G.GAME.current_round.clubs_played or 0) + 1\n        end\n\n        if context.joker_main then\n            local club_batches = math.floor((G.GAME.current_round.clubs_played or 0) / card.ability.extra.clubs_required)\n            return {\n                xchips = club_batches * card.ability.extra.xchips,\n                card_eval_status = (club_batches > 0) and 'active' or nil\n            }\n        end\n    end,\n    callbacks = {\n        on_round_start = function(self, card)\n            G.GAME.current_round.clubs_played = 0\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "twintowers",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'twintowers',\n    loc_txt = {\n        name = 'Never Forget',\n        text = {\n            \"Enhance all\",\n            \"played {C:attention}9{} and {C:attention}Aces{} into a Steel card\",\n            \"and retrigger it {C:attention}twice{}\",\n            \"{C:green}1 in 6{} chance to destroy played cards\"\n        }\n    },\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.m_steel\n    end,\n    calculate = function(self, card, context)\n        local c = context.other_card\n        if context.repetition and context.cardarea == G.play then\n            if context.other_card:get_id() == 9 or context.other_card:get_id() == 14 then\n                c:set_ability(\"m_steel\")\n                return {\n                    repetitions = 2\n                }\n            end\n        end\n\n        if context.joker_main and not context.blueprint and pseudorandom('neverforget', 1, 6) == 1 then\n            return {\n                remove = true,\n                message = \"THEY HIT THE SECOND TOWER!\",\n                play_sound = \"tngt_neverforget\",\n                colour = G.C.RED\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "chud\t",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'chud\t',\n    loc_txt = {\n        name = '{C:attention}High Card{} Has fallen.',\n        text = {\n            \"{C:green}Jimbillions{} must play {C:attention}#2#{}\",\n            \"{C:inactive}Seriously, who made this meme big, it sucks.\"\n        }\n    },\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 10, poker_hand = 'High Card' } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, localize(card.ability.extra.poker_hand, 'poker_hands') } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.scoring_name == card.ability.extra.poker_hand then\n            return {\n                mult = card.ability.extra.xmult,\n                message = 'West has fallen!',\n                colour = G.C.RED\n            }\n        end\n\n        if context.end_of_round and not context.blueprint and not context.repetition then\n            local _poker_hands = {}\n            for k, v in pairs(G.GAME.hands) do\n                if v.visible and k ~= card.ability.extra.poker_hand then\n                    _poker_hands[#_poker_hands + 1] = k\n                end\n            end\n            card.ability.extra.poker_hand = pseudorandom_element(_poker_hands, pseudoseed('GAMBAGAMBA'))\n            return {\n                message = localize('k_reset')\n            }\n        end\n    end,\n    set_ability = function(self, card, initial, delay_sprites)\n        local _poker_hands = {}\n        for k, v in pairs(G.GAME.hands) do\n            if v.visible then\n                _poker_hands[#_poker_hands + 1] = k\n            end\n        end\n        card.ability.extra.poker_hand = pseudorandom_element(_poker_hands,\n            pseudoseed((card.area and card.area.config.type == 'title') and 'tngt_chud' or 'tngt_chud'))\n    end"
    },
    {
      "type": "Joker",
      "key": "johncena",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'johncena',\n    config = { extra = { repetitions = 1 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            chips = 300,\n            chip_loss = 50,\n            xchips = 3,\n            xchips_loss = 0.5\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chips,\n                card.ability.extra.chip_loss,\n                card.ability.extra.xchips,\n                card.ability.extra.xchips_loss\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.after and context.main_eval and not context.blueprint then\n            if card.ability.extra.chips - card.ability.extra.chip_loss <= 0 or\n                card.ability.extra.xchips - card.ability.extra.xchips_loss <= 0 then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tarot1')\n                        card:juice_up(0.3, 0.4)\n                        G.E_MANAGER:add_event(Event({\n                            trigger = 'after',\n                            delay = 0.3,\n                            blockable = false,\n                            func = function()\n                                card:remove()\n                                return true\n                            end\n                        }))\n                        return true\n                    end\n                }))\n\n                return {\n                    message = localize('k_melted_ex'),\n                    colour = G.C.RED\n                }\n            else\n                card.ability.extra.chips = card.ability.extra.chips - card.ability.extra.chip_loss\n                card.ability.extra.xchips = card.ability.extra.xchips - card.ability.extra.xchips_loss\n\n                return {\n                    message = localize {\n                        type = 'variable',\n                        key = 'a_chips_xchips_minus',\n                        vars = {\n                            card.ability.extra.chip_loss,\n                            card.ability.extra.xchips_loss\n                        }\n                    },\n                    colour = G.C.RED\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                chips = card.ability.extra.chips,\n                xchips = card.ability.extra.xchips\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "djkhaled",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'djkhaled',\n    loc_txt = {\n        name = \"WE THE BEST JOKER.\",\n        text = {\n            \"{C:inactive}Does nothing?\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 2,\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 5, y = 0 },\n    config = {\n        extra = {\n            slots_to_add = 5,\n            ante_requirement = 1,\n            ante_count = 0,\n            activated = false\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.slots_to_add,\n                card.ability.extra.ante_requirement,\n                card.ability.extra.ante_count\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if G.GAME.blind.boss and context.end_of_round and context.game_over == false and context.main_eval then\n            card.ability.extra.ante_count = card.ability.extra.ante_count + 1\n\n            if card.ability.extra.ante_count >= card.ability.extra.ante_requirement then\n                card.ability.extra.activated = true\n                G.jokers.config.card_limit = G.jokers.config.card_limit + card.ability.extra.slots_to_add\n\n                card:juice_up(0.8, 0.8)\n                play_sound('chips1', 1.4)\n                return {\n                    message = localize { type = 'variable', key = 'a_joker_slots', vars = { card.ability.extra.slots_to_add } },\n                    colour = G.C.BLUE\n                }\n            else\n                card:juice_up(0.2, 0.2)\n            end\n        end\n    end,\n    add_to_deck = function(self, card, from_debuff)\n        if card.ability.extra.activated then\n            G.jokers.config.card_limit = G.jokers.config.card_limit + card.ability.extra.slots_to_add\n        end\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        if card.ability.extra.activated then\n            G.jokers.config.card_limit = G.jokers.config.card_limit - card.ability.extra.slots_to_add\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "critikal",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'critikal',\n    loc_txt = {\n        name = 'Card check {f:tngt_emoji}👀{}',\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult for each\",\n            \"card above {C:attention}#4#{}\",\n            \"in your full deck\",\n            \"{C:inactive}Currently {X:mult,C:white}X#3#{} {C:inactive}Mult)\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 2,\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla',\n    pos = { x = 5, y = 0 },\n    config = {\n        extra = {\n            xmult_per_card = 0.05\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        local extra_cards = math.max(0, G.playing_cards and #G.playing_cards - G.GAME.starting_deck_size or 0)\n        local total_xmult = 1 + (extra_cards * card.ability.extra.xmult_per_card)\n        return {\n            vars = {\n                card.ability.extra.xmult_per_card,\n                extra_cards,\n                total_xmult,\n                G.GAME.starting_deck_size\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local extra_cards = math.max(0, #G.playing_cards - G.GAME.starting_deck_size)\n            return {\n                x_mult = 1 + (extra_cards * card.ability.extra.xmult_per_card),\n                card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "dingaling",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'dingaling',\n    loc_txt = {\n        name = 'when they touchse yo {C:gold}dingaling{}',\n        text = {\n            \"{X:blue,C:white}X#1#{} Chips and {X:mult,C:white}X#2#{} Mult\",\n            \"if you touched their {C:attention}#3#{} of {C:attention}#4#.{}\",\n            \"{C:inactive}({C:attention}dingalings{} {C:inactive}changes every round.)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla',\n    pos = { x = 3, y = 1 },\n    cost = 4,\n    discovered = true,\n    unlocked = true,\n    eternal_compat = true,\n    config = {\n        extra = {\n            x_chips = 2,\n            x_mult = 1.5\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        local picked_card = G.GAME.current_round.card_picker_selection or { rank = 'Ace', suit = 'Spades' }\n        return {\n            vars = {\n                card.ability.extra.x_chips,\n                card.ability.extra.x_mult,\n                localize(picked_card.rank, 'ranks'),\n                localize(picked_card.suit, 'suits_plural')\n            },\n            colours = { G.C.SUITS[picked_card.suit] }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and\n            G.GAME.current_round.card_picker_selection then\n            if context.other_card:get_id() == G.GAME.current_round.card_picker_selection.id and\n                context.other_card:is_suit(G.GAME.current_round.card_picker_selection.suit) then\n                return {\n                    x_mult = card.ability.extra.x_mult,\n                    x_chips = card.ability.extra.x_chips\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "love",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = 'love',\n    loc_txt = {\n        name = '{C:hearts}Love{} is in the air?',\n        text = {\n            \"{C:red,s:2}WRONG!{}\",\n            \"If your scoring hand catches on fire, gives {C:money}$#1#\",\n            \"{E:1,C:green}otherwise{}, set your score to {C:dark_edition}false infinite.{}\"\n        }\n    },\n    config = { extra = { dollars = 25, odds = 6 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 2, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.dollars, (G.GAME.probabilities.normal or 6), card.ability.extra.odds } }\n    end,\n    calculate = function(self, card, context)\n        if (context.joker_main) then\n            local hand = G.GAME.current_round.current_hand\n            local hand_score = get_numeric(hand.chips) * get_numeric(hand.mult)\n            local blind = get_numeric(G.GAME.blind.chips)\n            print(\"hand_score:\", hand_score, \"blind:\", blind)\n            if hand_score >= blind then\n                ease_dollars(card.ability.extra.dollars)\n                return {\n                    message = \"$\" .. card.ability.extra.dollars,\n                    colour = G.C.MONEY,\n                }\n            elseif pseudorandom(\"BAZINGA!\") < G.GAME.probabilities.normal / 6 then\n                return {\n                    message = \"WRONG!\",\n                    mult = - -math.huge,\n                    colour = G.C.DARK_EDITION,\n                }\n            end\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "kanye",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'kanye',\n    loc_txt = {\n        name = 'Kanye Gaming',\n        text = {\n            \"This Kanye gains {X:green,C:white}+1!{} Mult for\",\n            \"each time he's {C:attention}gotten{} into a {C:red}controversy{}\",\n            \"{C:inactive}(Currently {X:green,C:white}6!{} {C:inactive}Mult)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla',\n    pos = { x = 1, y = 1 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = { extra = {} },\n    loc_vars = function(self, info_queue, card)\n        local factorial_mult = 1\n        for i = 1, 6 do\n            factorial_mult = factorial_mult * i\n        end\n\n        return { vars = { factorial_mult } }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = 720\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "gooning",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"gooning\",\n    loc_txt = {\n        name = \"The aggresive Jooner:\",\n        text = {\n            'Gains {C:red}+#2#{} Mult per second',\n            'After {C:attention}60 seconds{C:black}, scales {C:red}+#3#{} per second',\n            '{C:inactive}(Currently {C:red}+#1#{C:inactive} Mult)',\n            '{C:attention}Resets when sold'\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 2, y = 1 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            base_mult = 0,\n            base_rate = 1,\n            scaled_rate = 0.1,\n            start_time = 0\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.base_mult,\n                card.ability.extra.base_rate,\n                card.ability.extra.scaled_rate\n            }\n        }\n    end,\n\n    add_to_deck = function(self, card, from_debuff)\n        card.ability.extra.start_time = love.timer.getTime()\n        card.ability.extra.base_mult = 0\n    end,\n\n    update = function(self, card, dt)\n        if not card.ability.extra.start_time then\n            card.ability.extra.start_time = love.timer.getTime()\n        end\n\n        local elapsed = love.timer.getTime() - card.ability.extra.start_time\n        local base_seconds = math.min(elapsed, 60)\n        local bonus_seconds = math.max(0, elapsed - 60)\n\n        card.ability.extra.base_mult =\n            (base_seconds * card.ability.extra.base_rate) +\n            (bonus_seconds * (card.ability.extra.base_rate + card.ability.extra.scaled_rate))\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main and card.ability.extra.base_mult > 0 then\n            return {\n                message = localize { type = 'variable', key = 'a_mult', vars = { math.floor(card.ability.extra.base_mult) } },\n                mult = math.floor(card.ability.extra.base_mult),\n                colour = G.C.RED,\n                card = card\n            }\n        end\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        card.ability.extra.base_mult = 0\n        card.ability.extra.start_time = love.timer.getTime()\n    end"
    },
    {
      "type": "Joker",
      "key": "danger",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"danger\",\n    loc_txt = {\n        name = \"I am {X:mult,C:white}NOT{} in {C:red}danger{}, Jimbo\",\n        text = {\n            \"Knocking on this door will gain you {C:red}+25{} Mult.\",\n            \"{C:inactive}(Only knock {C:attention}once{} {C:inactive}per {C:attention}Ante{}{C:inactive}, he's {C:red}busy{}{C:inactive}){}\",\n            \"{C:inactive}(Currently {C:red}#2# Knocks{}{C:inactive}, you are the one who knocks.)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 2, y = 1 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            knock_count = 0,\n            mult_per_knock = 25,\n            last_click_round = -1\n        }\n    },\n    calculate = function(self, card, context)\n        if context.clicked_card and context.clicked_card == card then\n            if G.GAME.round_resets.ante ~= card.ability.extra.last_click_round then\n                card.ability.extra.knock_count = (card.ability.extra.knock_count or 0) + 1\n                card.ability.extra.last_click_round = G.GAME.round_resets.ante\n                card:juice_up(0.5, 0.5)\n                play_sound('tngt_iamindanger', 1.0 + math.random() * 0.1)\n            end\n        end\n\n        if context.joker_main then\n            local total_mult = (card.ability.extra.knock_count or 0) * (card.ability.extra.mult_per_knock or 25)\n            return {\n                mult = total_mult,\n                message = total_mult > 0 and (\"Knocks: \" .. card.ability.extra.knock_count .. \" (+\" .. total_mult .. \" Mult)\") or\n                nil,\n                colour = G.C.MULT\n            }\n        end\n    end,\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.mult_per_knock or 25,\n                card.ability.extra.knock_count or 0\n            },\n            main_start = {\n                { n = G.UIT.T, config = { text = \" | I AM THE DANGER! |\", scale = 0.4, colour = G.C.RED } },\n                { n = G.UIT.T, config = { text = \" Knocks: \" .. (card.ability.extra.knock_count or 0), scale = 0.35, colour = G.C.MULT } },\n                { n = G.UIT.T, config = { text = \" | Current Mult: +\" .. (card.ability.extra.knock_count or 0) * (card.ability.extra.mult_per_knock or 25), scale = 0.35, colour = G.C.MULT } }\n            }\n        }\n    end"
    },
    {
      "type": "Joker",
      "key": "pizza",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"pizza\",\n    loc_txt = {\n        name = \"Pizza..\",\n        text = {\n            \"{X:chips,C:white}X#1#{} Chips and {X:mult,C:white}X#2#{} Mult\",\n            \"Has {C:green}1 in #3#{} chance to be 'consumed' at end of round.\",\n            \"{C:inactive,s:0.7}--------------------------------{}\",\n            \"{s:0.7}Nxkoo says :{}\",\n            \"{C:inactive}STOP MAKING JOKES ABOUT PIZZA. >:({}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 2, y = 1 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xchips = 2.5, xmult = 1.5, odds = 6 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xchips, card.ability.extra.xmult, card.ability.extra.odds } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult,\n                chips = card.ability.extra.xchips\n            }\n        end\n\n        if context.end_of_round and context.game_over == false and context.main_eval then\n            if pseudorandom('pizzafuckerowo') < G.GAME.probabilities.normal / card.ability.extra.odds then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        card:start_dissolve()\n                        play_sound('tarot1')\n                        return true\n                    end\n                }))\n                return {\n                    message = \"FUCKED.\",\n                    colour = G.C.RED\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "getthefuckout",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'getthefuckout',\n    loc_txt = {\n        name = \"{f:tngt_times}get the fuck out\",\n        text = {\n            \"FREE {C:gold}$#1#{} UPON {C:attention}PURCHASE!!!\",\n            \"fixed {C:green}#2#{} chance to escorts you to your fucking {C:attention}Desktop\",\n            \"{C:attention}fuck you.\"\n        }\n    },\n    rarity = 2,\n    cost = 4,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 3, y = 1 },\n    config = {\n        extra = {\n            reward = 200,\n            quit_chance = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.reward,\n                tostring(math.floor(card.ability.extra.quit_chance * 100)) .. \"%\"\n            },\n            colours = { G.C.MONEY, G.C.RED }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.selling_self and not context.blueprint then\n            if pseudorandom('gettthefuckout') < G.GAME.probabilities.normal / card.ability.extra.quit_chance then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        love.event.quit()\n                        return true\n                    end\n                }))\n                return {\n                    message = \"get the fuck out\",\n                    colour = G.C.RED,\n                    sound = 'tngt_neverforget'\n                }\n            else\n                G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + card.ability.extra.reward\n                return {\n                    message = localize { type = 'variable', key = 'a_dollars', vars = { card.ability.extra.reward } },\n                    colour = G.C.MONEY,\n                    sound = 'chips1',\n                    func = function()\n                        G.E_MANAGER:add_event(Event({\n                            func = function()\n                                G.GAME.dollar_buffer = 0\n                                return true\n                            end\n                        }))\n                    end\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "grippy",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'grippy',\n    loc_txt = {\n        name = \"pipe down pookie\",\n        text = {\n            \"Duplicates all {C:attention}Played{} cards if\",\n            \"it's the {C:attention}first hand{} of the round, but {C:tarot,E:2}pauses your game{}\",\n            \"whenever you enter a {C:attention}shop{}.\"\n        }\n    },\n    rarity = 2,\n    cost = 6,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 3, y = 1 },\n    config = { extra = {} },\n\n    loc_vars = function(self, info_queue, card)\n        return { vars = {} }\n    end,\n\n    -- thanks to senfinbrare for the code and help\n    calculate = function(self, card, context)\n        if context.before and context.main_eval and G.GAME.current_round.hands_played == 0 then\n            local copy_cards = {}\n            for _, original_card in ipairs(context.full_hand) do\n                G.playing_card = (G.playing_card and G.playing_card + 1) or 1\n                local copy_card = copy_card(original_card, nil, nil, G.playing_card)\n                copy_card:add_to_deck()\n                G.deck.config.card_limit = G.deck.config.card_limit + 1\n                table.insert(G.playing_cards, copy_card)\n                G.hand:emplace(copy_card)\n                copy_card.states.visible = nil\n                copy_cards[#copy_cards + 1] = copy_card\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        copy_card:start_materialize()\n                        return true\n                    end\n                }))\n            end\n            return {\n                message = localize('k_copied_ex'),\n                colour = G.C.PURPLE,\n                card = card,\n                playing_cards_created = copy_cards\n            }\n        end\n        if context.first_hand_drawn and not context.blueprint then\n            local eval = function()\n                return G.GAME.current_round.hands_played == 0 and not G.RESET_JIGGLES\n            end\n            juice_card_until(card, eval, true)\n        end\n        if context.starting_shop and G.CONTROLLER then\n            return {\n                func = function()\n                    G.CONTROLLER:key_press_update(\"escape\", true)\n                    G.CONTROLLER:key_press_update(\"escape\", false)\n\n                    G.E_MANAGER:add_event(Event({\n                        trigger = 'after',\n                        delay = 0.1,\n                        func = function() return true end\n                    }))\n                end\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "Ligma",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'Ligma',\n    loc_txt = {\n        name = \"Sigma {f:tngt_emoji}🗿{}\",\n        text = {\n            \"Earn {C:gold}$#1#{} at end of round,\",\n            \"payout increases by {C:gold}$2{} for each defeated blind,\",\n            \"Decreases by {C:red}$#2#{} after defeating a boss blind.\"\n        }\n    },\n    rarity = 2,\n    cost = 5,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 3, y = 1 },\n    config = { extra = { normal_reward = 2, boss_penalty = -3 } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.normal_reward,\n                card.ability.extra.boss_penalty\n            }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        if context.end_of_round and context.game_over == false and context.main_eval then\n            local amount = G.GAME.blind.boss and card.ability.extra.boss_penalty\n                or card.ability.extra.normal_reward\n\n            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + amount\n\n            return {\n                message = localize {\n                    type = 'variable',\n                    key = amount > 0 and 'a_dollars' or 'a_dollars_minus',\n                    vars = { math.abs(amount) }\n                },\n                colour = amount > 0 and G.C.MONEY or G.C.RED,\n                func = function()\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            G.GAME.dollar_buffer = 0\n                            return true\n                        end\n                    }))\n                end\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "youtried",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'youtried',\n    loc_txt = {\n        name = \"{C:red}You{}{C:attention} Tried.{}\",\n        text = {\n            \"This Joker gains {X:mult,C:white}X#2#{} Mult\",\n            \"for each time a blind is {C:attention}defeated{}\",\n            \"with no {C:blue}Hands{} remaining.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult){}\"\n        }\n    },\n    config = { extra = { xmult = 1, xmult_gain = 0.5 } },\n    rarity = 2,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 3, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult_gain } }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and context.main_eval then\n            if G.GAME.current_round.hands_left == 0 then\n                card.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmult_gain\n                return {\n                    message = \"ay caramba\",\n                    colour = G.C.RED\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "bigjustice",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'bigjustice',\n    loc_txt = {\n        name = \"broski tweakin{f:tngt_emoji}🙏🔥💀{}\",\n        text = {\n            \"After playing {C:attention}5 Big Booms{}\",\n            \"{C:inactive}5 Big Booms = 5 played cards with ranks above 5{}\",\n            \"Spawn {C:tarot}Justice{}\"\n        }\n    },\n    rarity = 2,\n    cost = 5,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 3, y = 1 },\n    config = {},\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_justice\n        return {}\n    end,\n    calculate = function(self, card, context)\n        if context.after and not context.blueprint and context.full_hand then\n            local all_above_five = true\n            for _, v in ipairs(context.full_hand) do\n                if v:get_id() <= 5 then\n                    all_above_five = false\n                    break\n                end\n            end\n            if all_above_five and #context.full_hand == 5 then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.4,\n                    func = function()\n                        SMODS.add_card { set = 'Tarot', key = 'c_justice' }\n                        return true\n                    end\n                }))\n                return {\n                    message = \"Choco Chip Cookie.\",\n                    colour = G.C.TAROT\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "scary",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'scary',\n    loc_txt = {\n        name = \"{C:red}. . .\",\n        text = {\n            \"#\"\n        }\n    },\n    rarity = 2,\n    cost = 4,\n    discovered = true,\n    unlocked = true,\n    blueprint_compat = true,\n    perishable_compat = true,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 3, y = 1 },\n    config = { extra = { mult_per_card = 5 } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"scary\", set = \"Other\" }\n        return { vars = { card.ability.extra.mult_per_card } }\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local numbered_cards = 0\n            for _, playing_card in ipairs(context.scoring_hand) do\n                local card_id = playing_card:get_id()\n                if card_id >= 2 and card_id <= 10 then\n                    numbered_cards = numbered_cards + 1\n                end\n            end\n\n            if numbered_cards > 0 then\n                return {\n                    mult = numbered_cards * card.ability.extra.mult_per_card,\n                    card = card\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "lockin",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "key = 'lockin',\n    loc_txt = {\n        name = \"Time to {C:attention,E:2}lock in.\",\n        text = {\n            \"This Monkey will {X:gold,C:white}double{} your {C:gold}cash{}\",\n            \"if you didn't {C:attention}buy{} {E:2}anything{} from the last {C:attention}Shop{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 3, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = {} },\n\n    calculate = function(self, card, context)\n        if context.ending_shop and not context.blueprint then\n            local purchases_made = false\n\n            for _, joker in ipairs(G.jokers.cards) do\n                if joker.ability.shop_was_bought then\n                    purchases_made = true\n                    break\n                end\n            end\n\n            if not purchases_made then\n                for _, consumable in ipairs(G.consumeables.cards) do\n                    if consumable.ability.shop_was_bought then\n                        purchases_made = true\n                        break\n                    end\n                end\n            end\n\n            if not purchases_made then\n                return {\n                    dollars = G.GAME.dollars,\n                    message = \"LOCK THE FUCK IN.\",\n                    colour = G.C.MONEY,\n                    message_card = card\n                }\n            end\n        end\n    end,\n\n    add_to_deck = function(self, card, from_debuff)\n        local original_buy_card = buy_card\n        buy_card = function(args)\n            local bought_card = original_buy_card(args)\n            if bought_card then\n                bought_card.ability.shop_was_bought = true\n            end\n            return bought_card\n        end\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        buy_card = G.FUNCS.buy_card\n    end"
    },
    {
      "type": "Joker",
      "key": "logan",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'logan',\n    loc_txt = {\n        name = \"I think i {C:attention}saw{} someone\",\n        text = {\n            \"This guy gains {X:blue,C:white}X#2#{} Dislikes\",\n            \"for each {C:attention}Hanged Man{} used in this run.\",\n            \"{C:inactive}(Currently {X:blue,C:white}X#1#{} {C:inactive}Dislikes)\",\n            \"{C:inactive,s:0.9}I have made a severe lapse in my judgement.{}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 1, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xchips = 1, xchips_gain = 0.5 } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_hanged_man\n        return { vars = { card.ability.extra.xchips, card.ability.extra.xchips_gain } }\n    end,\n    calculate = function(self, card, context)\n        if context.using_consumeable and context.consumeable.config.center.key == \"c_hanged_man\" then\n            card.ability.extra.xchips = card.ability.extra.xchips + card.ability.extra.xchips_gain\n            return {\n                message = \"Severe lapse in my judgement.\",\n                colour = G.C.TAROT\n            }\n        end\n\n        if context.joker_main then\n            return {\n                x_chips = card.ability.extra.xchips\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "fourloko",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'fourloko',\n    loc_txt = {\n        text = {\n            \"This dude gains {X:mult,C:white}X#2#{} if played hand is a {C:attention}Four Of A Kind.{}\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 1, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 1, xmult_gain = 0.4 } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.xmult, card.ability.extra.xmult_gain }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and next(context.poker_hands['Four of a Kind']) then\n            card.ability.extra.xmult = card.ability.extra.xmult + card.ability.extra.xmult_gain\n            return {\n                x_mult = card.ability.extra.xmult,\n                message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.xmult } },\n                colour = G.C.MULT,\n                card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "upyourass",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"upyourass\",\n    loc_txt = {\n        name = \"Whoops!\",\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult if {C:attention}CD{} is inserted\",\n            \"if you don't have any, it will be {C:dark_edition}automatically{}\",\n            \"created if you play {C:attention}#2#{} {C:blue}Hands\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 1, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            xmult = 10,\n            hands_played = 0,\n            hands_needed = math.random(4, 5)\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.hands_needed } }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and context.main_eval and context.joker_main and not context.blueprint then\n            card.ability.extra.hands_played = card.ability.extra.hands_played + 1\n\n            if card.ability.extra.hands_played >= card.ability.extra.hands_needed then\n                local success, err = pcall(function()\n                    local file = io.open(\"CD.txt\", \"w\")\n                    if file then\n                        file:write(\"CD INSERTED.\")\n                        file:close()\n                    end\n                end)\n\n                if not success then\n                    print(\"MISSINGNO\", err)\n                end\n\n                card.ability.extra.hands_played = 0\n                card.ability.extra.hands_needed = math.random(4, 5)\n            end\n        end\n\n        local file_exists = io.open(\"CD.txt\", \"r\")\n        if file_exists then\n            file_exists:close()\n            os.remove(\"CD.txt\")\n\n            return {\n                message = \"CD INSERTED.\",\n                mult = card.ability.extra.xmult,\n                sound = 'tngt_neverforget'\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "mario",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'mario',\n    loc_txt = {\n        name = \"I've fucking had it with you\",\n        text = {\n            \"{C:attention,s:2}Woe!{}\",\n            \"{C:red}Bricks{} be upon ye.\",\n            \"{C:inactive,s:0.5}--------------------------------{}\",\n            \"Each {C:attention}played{} Stone card permanently gains {C:red}+#1#{} Mult.\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 1, y = 1 },\n    soul_pos = { x = 5, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult = 2 } },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.mult }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and not context.blueprint then\n            if SMODS.has_enhancement(context.other_card, \"m_stone\") then\n                context.other_card.ability.perma_mult = (context.other_card.ability.perma_mult or 0) +\n                    card.ability.extra.mult\n                return {\n                    message = localize('k_upgrade_ex'),\n                    colour = G.C.EDITION.BLUE\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "thisdogisfuckedup",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'thisdogisfuckedup',\n    loc_txt = {\n        name = \"This Joker is {C:red,E:2}fucked up{} {f:tngt_times}brah..{f:tngt_emoji}🥀\",\n        text = {\n            \"The first {C:attention}face card{} played\",\n            \"each round gets retriggered {C:attention}thrice\",\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 4, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            retriggered = false,\n            first_face_card = nil\n        }\n    },\n    calculate = function(self, card, context)\n        if context.setting_blind then\n            card.ability.extra.retriggered = false\n            card.ability.extra.first_face_card = nil\n        end\n\n        if context.individual and context.cardarea == G.play and\n            not card.ability.extra.retriggered then\n            local is_face = (context.other_card:get_id() == 11 or\n                context.other_card:get_id() == 12 or\n                context.other_card:get_id() == 13)\n\n            if is_face and not card.ability.extra.first_face_card then\n                card.ability.extra.first_face_card = context.other_card\n            end\n        end\n\n        if context.repetition and context.cardarea == G.play and\n            not card.ability.extra.retriggered and\n            card.ability.extra.first_face_card and\n            context.other_card == card.ability.extra.first_face_card then\n            card.ability.extra.retriggered = true\n            return {\n                repetitions = 3,\n                card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "mentlegen",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'mentlegen',\n    loc_txt = {\n        name = \"Buttsecks XD >:D\",\n        text = {\n            \"This Spy gives {C:blue}+#2#{} Chips and {C:red}+#1#{} Mult\",\n            \"{C:inactive}However, if played hand is a {C:attention}Flush{} {C:inactive}or{} {C:attention}Five Of A Kind{}\",\n            \"{}{X:blue,C:white}X#3#{} {C:inactive}Cloak instead\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            base_mult = 3,\n            xchips = 3.5,\n            base_chips = 25\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.base_mult,\n                card.ability.extra.base_chips,\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.scoring_hand and #context.scoring_hand == 5 then\n            local bonus_active = false\n            local ret = {\n                mult = card.ability.extra.base_mult,\n                chips = card.ability.extra.base_chips\n            }\n            local all_same_suit = true\n            local all_same_rank = true\n            local first_suit = context.scoring_hand[1].base.suit\n            local first_rank = context.scoring_hand[1]:get_id()\n            for i = 2, #context.scoring_hand do\n                if context.scoring_hand[i].base.suit ~= first_suit then\n                    all_same_suit = false\n                end\n                if context.scoring_hand[i]:get_id() ~= first_rank then\n                    all_same_rank = false\n                end\n                if not all_same_suit and not all_same_rank then break end\n                if not bonus_active then\n                    card:juice_up(0.2, 0.2)\n                end\n                if all_same_suit or all_same_rank then\n                    bonus_active = true\n                    ret.xchips = card.ability.extra.xchips\n                    ret.message = localize { type = 'variable', key = 'a_xchips', vars = { card.ability.extra.xchips } }\n                    play_sound('tngt_neverforget', 1.1)\n                    card:juice_up(0.5, 0.5)\n                    return ret\n                end\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "fantastic",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'fantastic',\n    loc_txt = {\n        name = \"Joker {C:blue}Four{}\",\n        text = {\n            \"If your played hand is a {C:attention}Straight Flush{},\",\n            \"create a {C:gold,E:2}Familiar {C:attention}Spectral{} Card.\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 2,\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 5, y = 0 },\n    config = { extra = { spectrals = { \"familiar\", \"grim\", \"incantation\", \"talisman\", \"immolate\", \"ankh\", \"trance\", \"cryptid\" } } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_familiar\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_grim\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_incantation\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_talisman\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_immolate\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_ankh\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_trance\n        info_queue[#info_queue + 1] = G.P_CENTERS.c_cryptid\n        return {}\n    end,\n    calculate = function(self, card, context)\n        if context.scoring_name == 'Straight Flush' and not context.blueprint then\n            for _, key in ipairs(card.ability.extra.spectrals) do\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.4,\n                    func = function()\n                        SMODS.add_card { set = 'Spectral', key = pseudorandom_element(card.ability.extra.spectrals, \"saythatagain\") }\n                        return true\n                    end\n                }))\n            end\n            return {\n                message = \"..Say that again?\",\n                colour = G.C.TAROT\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "sneakthruthedoorman",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'sneakthruthedoorman',\n    loc_txt = {\n        name = '{C:red,E:2}DOOR STUCK{}',\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult\",\n            \"{s:0.5}Sent to the {C:dark_edition,s:0.5}Void{} {s:0.5}if sold.\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 0, y = 0 },\n    cost = 2,\n    config = { extra = { xmult = 1.6 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end,\n\n    add_to_deck = function(self, card, from_debuff)\n        if not from_debuff then\n            local original_sell = Card.sell\n            function Card:sell()\n                if self == card then\n                    G.FUNCS.start_run()\n                    return\n                else\n                    return original_sell(self)\n                end\n            end\n        end\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        if not from_debuff then\n            function Card:sell()\n                if self == card then\n                    G.FUNCS.start_run()\n                    return\n                else\n                    return original_sell(self)\n                end\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "strike",
      "atlas": "ModdedVanilla5",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'strike',\n    loc_txt = {\n        name = 'Dear {C:gold}God{}, please {C:red}strike{} this {C:attention}Joker{} down.',\n        text = {\n            \"After #2# {C:attention}Rounds{}, sell this Cat to\",\n            \"add {C:dark_edition}Negative.{} to a random Joker\",\n            \"{C:inactive}(Currently {C:attention}#1#{}{C:inactive}/{}{C:inactive}#2#{} {C:inactive}Rounds)\"\n        }\n    },\n    config = {\n        extra = {\n            neg_rounds = 0,\n            total_rounds = 2\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.neg_rounds, card.ability.extra.total_rounds } }\n    end,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 3,\n    atlas = 'ModdedVanilla5',\n    pos = { x = 0, y = 0 },\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.end_of_round and context.main_eval and not context.blueprint and not context.game_over then\n            card.ability.extra.neg_rounds = card.ability.extra.neg_rounds + 1\n\n            if card.ability.extra.neg_rounds == card.ability.extra.total_rounds then\n                juice_card_until(card, function(c) return not c.REMOVED end, true)\n            end\n\n            return {\n                message = (card.ability.extra.neg_rounds < card.ability.extra.total_rounds)\n                    and (card.ability.extra.neg_rounds .. \"/\" .. card.ability.extra.total_rounds)\n                    or localize(\"k_active_ex\"),\n                colour = G.C.EDITION.negative\n            }\n        end\n\n        if context.selling_self and card.ability.extra.neg_rounds >= card.ability.extra.total_rounds and not context.blueprint then\n            local jokers = {}\n            for _, j in ipairs(G.jokers.cards) do\n                if j ~= card and not j.edition then\n                    table.insert(jokers, j)\n                end\n            end\n\n            if #jokers > 0 then\n                local chosen = pseudorandom_element(jokers, pseudoseed(\"strikethisfuckerdown\"))\n                chosen:set_edition(\"e_negative\", true)\n                juice_card(chosen, 0.6, 0.6)\n                return { message = localize(\"k_edition_applied_ex\") }\n            else\n                return { message = localize(\"k_no_other_jokers\") }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "steve",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'steve',\n    loc_txt = {\n        name = 'I.. am Joker.',\n        text = {\n            \"This Joker gives {C:red}+#1#{} Mult,\",\n            \"{C:red,s:2}BUT\",\n            \"{C:attention}adds{} another {C:red}+15{} Mult into the Joker based on his {C:attention}position{}.\",\n            \"{C:inactive}(EXAMPLE: Slot 1 = +15, Slot 2 = +30, Slot 3 = +45, and so on.)\",\n            \"{C:inactive}(Currently {C:red}+#2#{} {C:inactive}based on this position.)\"\n        }\n    },\n    config = { extra = { base_mult = 15, position_mult = 0 } },\n    loc_vars = function(self, info_queue, card)\n        local position_mult = 0\n        if G.jokers and G.jokers.cards then\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card then\n                    position_mult = i * card.ability.extra.base_mult\n                end\n            end\n        end\n        return { vars = { card.ability.extra.base_mult, position_mult or 0 } }\n    end,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 3,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 0, y = 0 },\n    cost = 4,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local position_mult = 0\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card then\n                    position_mult = i * card.ability.extra.base_mult\n                    break\n                end\n            end\n            return {\n                mult = position_mult\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "eggwuh",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = 'eggwuh',\n    loc_txt = {\n        name = 'It comes with {f:tngt_times}eggwah..~{}{f:emoji}👅',\n        text = {\n            \"Has {C:green}1{} in {C:green}#1#{} chance to give {C:attention}Egg Joker{}\",\n            \"whenever you {C:attention}buy{} something from the {C:attention}shop{}\"\n        }\n    },\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    rarity = 3,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 0, y = 0 },\n    cost = 6,\n    config = { extra = { chance = 2 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.chance } }\n    end,\n    calculate = function(self, card, context)\n        if context.buying_card and not context.blueprint then\n            if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n                if pseudorandom('hayadies') < G.GAME.probabilities.normal / card.ability.extra.chance then\n                    G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            SMODS.add_card({\n                                set = \"Joker\",\n                                key = \"j_egg\",\n                                key_append = \"eggroll\"\n                            })\n                            G.GAME.joker_buffer = 0\n\n                            card:juice_up(0.5, 0.5)\n                            play_sound('tngt_eggwah', 0.9 + math.random() * 0.1)\n                            return true\n                        end\n                    }))\n\n                    return {\n                        message = localize('k_plus_joker'),\n                        colour = G.C.BLUE,\n                        card = card\n                    }\n                end\n            else\n                return {\n                    message = localize('k_no_room_ex'),\n                    colour = G.C.RED\n                }\n            end\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "revive",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'revive',\n\tloc_txt = {\n\t\tname = 'Mr. Revive?',\n\t\ttext = {\n\t\t\t\"Prevents you from any source of {X:mult,C:white}DEATH{}\",\n\t\t\t\"if chips scored are atleast {C:attention}1%{} of the required chips\",\n\t\t\t\"Will {C:red}self destructs{} in {C:attention}2{} losses.\"\n\t\t}\n\t},\n\trarity = 2,\n\tatlas = 'ModdedVanilla',\n\tpos = { x = 1, y = 0 },\n\tcost = 3,\n\tunlocked = true,\n\tdiscovered = true,\n\tconfig = { extra = { rounds_left = 0 } },\n\tcalculate = function(self, card, context)\n\t\tcard.ability.extra.rounds_left = card.ability.extra.rounds_left + 1\n\t\tif card.ability.extra.rounds_left >= 2 then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\tfunc = function()\n\t\t\t\tG.hand_text_area.blind_chips:juice_up()\n\t\t\t\tG.hand_text_area.game_chips:juice_up()\n\t\t\t\tplay_sound('tarot1')\n\t\t\t\tcard:start_dissolve()\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t}))\n\t\tend\n\t\treturn {saved = true}\n    end,"
    },
    {
      "type": "Joker",
      "key": "geo",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'geo',\n    loc_txt = {\n        name = 'National Geographic',\n        text = {\n            \"Played {C:attention}Wild{} cards will gives you either {C:red}+#1#{} Mult,\",\n            \"{X:mult,C:white}X#2#{} Mult, {C:blue}+#3#{} Chips, or {C:gold}$#4#{} Dollars.\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 1, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult = 7, xmult = 1.5, chips = 65, dollars = 5 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.mult, card.ability.extra.xmult, card.ability.extra.chips, card.ability.extra.dollars } }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and context.other_card and SMODS.has_enhancement(context.other_card, 'm_wild') then\n            local roll = pseudorandom('NATIONALGEOGRAPHIC', 1, 4)\n            if roll == 1 then\n                return {\n                    mult = 5,\n                    colour = G.C.RED\n                }\n            elseif roll == 2 then\n                return {\n                    xmult = 1.5,\n                    colour = G.C.MAGENTA\n                }\n            elseif roll == 3 then\n                return {\n                    chips = 50,\n                    colour = G.C.BLUE\n                }\n            elseif roll == 4 then\n                return {\n                    dollars = 5,\n                    colour = G.C.YELLOW\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "atlas",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'atlas',\n    loc_txt = {\n        name = 'Atlas',\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult for each {C:dark_edition}precious{} {C:attention}Atlas{} in your {C:attention}Directory{}.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{C:inactive} Mult)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 1, y = 0 },\n    cost = 8,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 2 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult + atlussy } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult * atlussy\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "bigrig",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'bigrig',\n    loc_txt = {\n        name = \"{C:attention}YOU'RE WINNER !{}\",\n        text = {\n            \"Attempt to summon random {C:attention}Jokers{} upon\",\n            \"defeating the {C:attention}Boss Blind.{}\",\n            \"{C:inactive}(Cannot overflow, maybe..){}\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 1, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = {},\n    loc_vars = function(self, info_queue, card)\n        return {}\n    end,\n    calculate = function(self, card, context)\n        if G.GAME.blind.boss and context.end_of_round then\n            if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n                G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        SMODS.add_card {\n                            set = 'Joker',\n                            rarity = pseudorandom_element({ 'Common', 'Uncommon', 'Rare', 'Legendary' }, pseudoseed('BIGRIG')),\n                            key_append = 'spawned_by_boss'\n                        }\n                        G.GAME.joker_buffer = 0\n                        return true\n                    end\n                }))\n                return {\n                    message = localize('k_plus_joker'),\n                    colour = G.C.BLUE\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "jpeg",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'jpeg',\n    loc_txt = {\n        name = \"Do {C:attention}i{} look like i {C:attention}know{} what a {C:dark_edition}.JPEG{} is?\",\n        text = {\n            \"Shitty resolution = {X:mult,C:white}X1.5{} Mult.\",\n            \"{C:attention}Resize{} your damn {C:blue}Window{} to win it {s:1.5,C:gold}BIG{}\",\n            \"{C:inactive}(Will be punished if it's played Fullscreen.)\",\n            \"{C:inactive,s:0.7}Yahimod? What's that?\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 1, y = 0 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            mult = 1.0,\n            fullscreen_penalty = 0.5,\n            is_fucked = false\n        }\n    },\n\n    update = function(self, card, front)\n        local w, h = love.graphics.getDimensions()\n        local _xscale = w / 1920\n        local _yscale = h / 1080\n        local _factor = 1 / ((_xscale + _yscale) / 2)\n\n        local is_fullscreen = love.window.getFullscreen()\n            or (_xscale >= 1.0 and _yscale >= 1.0)\n\n        card.ability.extra.mult = math.floor(_factor * 100) / 100\n        card.ability.extra.is_fucked = is_fullscreen\n\n        if is_fullscreen and not card.ability.warned then\n            card.ability.warned = true\n            card:juice_up(0.5, 0.5)\n            play_sound('tngt_neverforget')\n        elseif not is_fullscreen then\n            card.ability.warned = false\n        end\n    end,\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.mult },\n            main_start = {\n                { n = G.UIT.T, config = { text = \" > Current: x\" .. card.ability.extra.mult, scale = 0.35, colour = G.C.GREEN } },\n                { n = G.UIT.T, config = { text = \" | Fullscreen Debuff: x\" .. card.ability.extra.fullscreen_penalty, scale = 0.35, colour = G.C.RED } },\n                {\n                    n = G.UIT.T,\n                    config = {\n                        text = card.ability.extra.is_fucked and \" | FUCKED. (Fullscreen)\" or \" | Aye :D (windowed)\",\n                        scale = 0.35,\n                        colour = card.ability.extra.is_fucked and G.C.RED or G.C.GREEN\n                    }\n                }\n            }\n        }\n    end,\n\n    calculate = function(self, card, context)\n        local effective_mult = card.ability.extra.mult or 1.0\n\n        if card.ability.extra.is_fucked then\n            effective_mult = effective_mult * card.ability.extra.fullscreen_penalty\n        end\n\n        return {\n            Xmult = effective_mult,\n            message = card.ability.extra.is_fucked and\n                \"FULLSCREEN PENALTY! X\" .. effective_mult or\n                \"Window Scaling: X\" .. effective_mult,\n            colour = card.ability.extra.is_fucked and G.C.RED or G.C.MULT\n        }\n    end"
    },
    {
      "type": "Joker",
      "key": "DMAN",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "key = 'DMAN',\n    loc_txt = {\n        name = \"DAMN!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n        text = {\n            \"Gives {X:mult,C:white}X#1#{} DAMN\",\n            \"for each {C:money}$4{} you have\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}DAMN){}\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 1, y = 0 },\n    cost = 3,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult_per_2_dollars = 1.5 } },\n    loc_vars = function(self, info_queue, card)\n        local current_mult = math.floor((G.GAME.dollars or 0) / 2) * card.ability.extra.mult_per_2_dollars\n        return { vars = { card.ability.extra.mult_per_2_dollars, current_mult } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local dollars = G.GAME.dollars or 0\n            local multiplier = math.floor(dollars / 4) * card.ability.extra.mult_per_2_dollars\n\n            if not nxkoo_dies.damnbird_png then\n                nxkoo_dies.damnbird_png = load_image(\"damnbird.png\")\n            end\n            nxkoo_dies.show_image = true\n            nxkoo_dies.image_timer = 0.5\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                blockable = false,\n                func = function()\n                    play_sound('tngt_damn', 1, 1)\n                    card:juice_up(0.5, 0.5)\n                    return true\n                end\n            }))\n\n            return {\n                xmult = multiplier\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "illusions",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'illusions',\n    loc_txt = {\n        name = 'This Joker',\n        text = {\n            \"If played hand contains only {C:spades}Spades{} or {C:clubs}Clubs{},\",\n            \"gives {C:mult}+#1#{} Mult. If both, gives {X:mult,C:white}X#2#{} Mult instead.\",\n            \"If held cards are also {C:spades}Spades{} or {C:clubs}Clubs{}, gives {X:mult,C:white}X#3#{} Mult\",\n            \"and {X:chips,C:white}X#4#{} Chips\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 2, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            base_mult = 10,\n            dual_xmult = 2.1,\n            held_xmult = 2,\n            held_xchips = 3.5\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = 'crazy', set = 'Other' }\n        return {\n            vars = {\n                card.ability.extra.base_mult,\n                card.ability.extra.dual_xmult,\n                card.ability.extra.held_xmult,\n                card.ability.extra.held_xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local all_black = true\n            local has_clubs = false\n            local has_spades = false\n\n            for _, playing_card in ipairs(context.scoring_hand) do\n                if not (playing_card:is_suit('Clubs', nil, true) or playing_card:is_suit('Spades', nil, true)) then\n                    all_black = false\n                    break\n                end\n                if playing_card:is_suit('Clubs', nil, true) then has_clubs = true end\n                if playing_card:is_suit('Spades', nil, true) then has_spades = true end\n            end\n\n            local held_match = true\n            if all_black then\n                for _, hand_card in ipairs(G.hand.cards) do\n                    if not context.scoring_hand or not tableContains(context.scoring_hand, hand_card) then\n                        if not (hand_card:is_suit('Clubs', nil, true) or hand_card:is_suit('Spades', nil, true)) then\n                            held_match = false\n                            break\n                        end\n                    end\n                end\n            end\n\n            if all_black then\n                local ret = {}\n\n                if not (has_clubs and has_spades) then\n                    ret.mult = card.ability.extra.base_mult\n                end\n\n                if has_clubs and has_spades then\n                    ret.xmult = card.ability.extra.dual_xmult\n                end\n\n                if held_match then\n                    ret.xmult = (ret.xmult or 1) * card.ability.extra.held_xmult\n                    ret.xchips = card.ability.extra.held_xchips\n                end\n\n                return ret\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "balatrez",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'balatrez',\n    loc_txt = {\n        name = 'I {C;red}LOVE{} MY BEAUTIFUL {C:attention}JOKERS{}',\n        text = {\n            \"Spawn a {C:attention}Gros Michel{} when you enter\",\n            \"a {C:attention}boss{} blind.\",\n            \"{C:inactive}Reacts differently if it's {C:attention}The Plant.{}\"\n        }\n    },\n    config = {},\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 2, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {}\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.setting_blind and context.blind.boss then\n            local spawn_key = (context.blind.name == \"The Plant\") and \"j_cavendish\" or \"j_gros_michel\"\n\n            if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then\n                G.GAME.joker_buffer = G.GAME.joker_buffer + 1\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        SMODS.add_card({\n                            set = \"Joker\",\n                            key = spawn_key,\n                            forced = true\n                        })\n                        G.GAME.joker_buffer = 0\n                        card:juice_up(0.5, 0.5)\n                        play_sound('tarot1')\n                        return true\n                    end\n                }))\n\n                return {\n                    message = (spawn_key == \"j_cavendish\") and\n                        \"Cavendish\" or\n                        \"Gros Michel\",\n                    colour = G.C.RARITY[4]\n                }\n            else\n                return {\n                    message = \"No room:(\",\n                    colour = G.C.RED\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "medicbag",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'medicbag',\n    loc_txt = {\n        name = \"Jallas\",\n        text = {\n            \"When exiting shop, rob initally {C:money}$1{} for every\",\n            \"{C:money}$1{} worth of Jokers {C:attention}left in shop{C:white}\",\n            \"{C:inactive}(Current shop value: {C:money}$#1#{C:inactive})\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 2, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { shop_value = 0 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.shop_value } }\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        play_sound(\"tngt_aughhh\", 1, 1)\n    end,\n    calculate = function(self, card, context)\n        if context.starting_shop then\n            card.ability.extra.shop_value = 0\n            for _, shop_joker in ipairs(G.shop_jokers.cards) do\n                if not shop_joker.uncosted then\n                    card.ability.extra.shop_value = card.ability.extra.shop_value + shop_joker.cost\n                end\n            end\n        end\n\n        if context.ending_shop and card.ability.extra.shop_value > 0 then\n            local payout = card.ability.extra.shop_value\n            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + payout\n\n            return {\n                card = card,\n                sound = 'tngt_ineedamedicbag'\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "itstartswith",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'itstartswith',\n    loc_txt = {\n        name = \"{C:attention}One{} thing, i {C:red}don't{} know {C:attention}why{}..\",\n        text = {\n            \"Gains {X:mult,C:white}X#2#{} for each {C:attention}played{} cards.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult.)\",\n            \"{C:inactive,s:0.7}(To be honest, this is just the worst version of Duplicare)\",\n            \"{C:inactive,s:0.7}(It's here for balancing reason.)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 2, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { Xmult = 1, Xmult_mod = 0.1 } }, -- From Cryptid, but i did tweak some shit to make it work here\n    loc_vars = function(self, info_queue, center)\n\t\treturn {\n\t\t\tvars = {\n\t\t\t\tnumber_format(center.ability.extra.Xmult),\n\t\t\t\tnumber_format(center.ability.extra.Xmult_mod),\n\t\t\t},\n\t\t}\n\tend,\n    calculate = function(self, card, context)\n\t\tif\n\t\t\tnot context.blueprint\n\t\t\tand (\n\t\t\t\t(context.post_trigger and context.other_joker ~= card)\n\t\t\t\tor (context.individual and context.cardarea == G.play)\n\t\t\t)\n\t\tthen\n\t\t\tcard.ability.extra.Xmult = (card.ability.extra.Xmult) + (card.ability.extra.Xmult_mod)\n\t\t\tcard_eval_status_text(card, \"extra\", nil, nil, nil, { message = localize(\"k_upgrade_ex\") })\n\t\tend\n\t\tif context.joker_main and card.ability.extra.Xmult then\n\t\t\tif context.forcetrigger then\n\t\t\t\tcard.ability.extra.Xmult =\n\t\t\t\t\t(card.ability.extra.Xmult) + (card.ability.extra.Xmult_mod)\n\t\t\tend\n\t\t\treturn {\n\t\t\t\tmessage = localize({\n\t\t\t\t\ttype = \"variable\",\n\t\t\t\t\tkey = \"a_xmult\",\n\t\t\t\t\tvars = {\n\t\t\t\t\t\tnumber_format(card.ability.extra.Xmult),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tXmult_mod = (card.ability.extra.Xmult),\n\t\t\t\tcolour = G.C.MULT,\n\t\t\t}\n\t\tend\n\tend"
    },
    {
      "type": "Joker",
      "key": "yogurt",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "key = 'yogurt',\n    loc_txt = {\n        name = \"{s:2}gurt:\",\n        text = {\n            \"yo\",\n            \"{C:inactive}(Earn {C:gold}$#1#{} {C:inactive}when playing {C:attention}#2#{} {C:inactive}consecutive cards in order)\"\n        }\n    },\n    rarity = 2,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 2, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            streak = 0,\n            last_id = nil,\n            payout = 4,\n            sequence_length = 3\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.payout,\n                card.ability.extra.sequence_length\n            },\n            colours = { G.C.MONEY, G.C.ATTENTION }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play then\n            if context.other_card:get_id() == (card.ability.extra.last_id or 0) + 1 then\n                card.ability.extra.streak = card.ability.extra.streak + 1\n                if card.ability.extra.streak % 3 == 0 then\n                    G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + card.ability.extra.payout\n                    return {\n                        message = localize { type = 'variable', key = 'a_dollars',\n                            vars = { card.ability.extra.payout } },\n                        colour = G.C.MONEY\n                    }\n                end\n            else\n                card.ability.extra.streak = 0\n            end\n            card.ability.extra.last_id = context.other_card:get_id()\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "freak",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'freak',\n    loc_txt = {\n        name = '{f:tngt_papyrus}jofreak{}',\n        text = {\n            \"{f:tngt_papyrus}i'm fr a {f:tngt_papyrus,X:dark_edition,C:white}freak{}, {f:tngt_papyrus}just {f:tngt_papyrus,C:attention,E:1}lmk...{}\",\n            \"{f:tngt_papyrus}Played {f:tngt_papyrus,C:attention}6{} {f:tngt_papyrus}and {f:tngt_papyrus,C:attention}9{} {f:tngt_papyrus}has {f:tngt_papyrus,C:green}#1# in #2#{} {f:tngt_papyrus}chance to give {f:tngt_papyrus,X:mult,C:white}X6.9{} {f:tngt_papyrus}Mult.\"\n        }\n    },\n    config = { extra = { odds = 2, xmult = 6.9 } },\n    rarity = 3,\n    atlas = 'ModdedVanilla',\n    pos = { x = 3, y = 0 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return { vars = { G.GAME.probabilities.normal or 1, card.ability.extra.odds, card.ability.extra.xmult } }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and (context.other_card:get_id() == 6 or context.other_card:get_id() == 9) and\n            pseudorandom('luhhfreakyy') < G.GAME.probabilities.normal / card.ability.extra.odds then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "dud",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'dud',\n    loc_txt = {\n        name = '{C:attention}dud{}',\n        text = {\n            \"{C:red}You{} found the {C:attention}dud.{}\",\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 3, y = 0 },\n    cost = 1,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 0.2 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult * ((G.deck and G.deck.cards) and #G.deck.cards or 52) } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult * #G.deck.cards\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "omori",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'omori',\n    loc_txt = {\n        name = \"{f:tngt_omori}Junny{}\",\n        text = {\n            \"Opens {E:2}OMORI{} {C:blue}website{} if triggered\",\n            \"{C:green}1{} in {C:green}1.000{} chances to fight {C:dark_edition}sans.{} instead.\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 3, y = 0 },\n    cost = 7,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            main_url = \"https://omori-game.com\",\n            secret_url = \"https://jcw87.github.io/c2-sans-fight/\",\n            odds = 1000,\n            triggered = false\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.main_url }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and not card.ability.extra.triggered and love.system then\n            card.ability.extra.triggered = true\n\n            local url = card.ability.extra.main_url\n            local message = \"OMORI\"\n\n            if pseudorandom('badtime' .. G.GAME.round_resets.ante) < G.GAME.probabilities.normal / card.ability.extra.odds then\n                url = card.ability.extra.secret_url\n                message = \"ya wanna have a bad time?\"\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.4,\n                    func = function()\n                        SMODS.add_card({\n                            set = \"Joker\",\n                            rarity = \"Legendary\"\n                        })\n                        card:juice_up(0.5, 0.5)\n                        play_sound('tngt_neverforget', 1, 1)\n                        card:start_dissolve()\n                        return true\n                    end\n                }))\n            end\n\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    love.system.openURL(url)\n                    return true\n                end\n            }))\n\n            return {\n                message = message,\n                colour = (url == card.ability.extra.secret_url) and G.C.PURPLE or G.C.BLUE,\n                sound = (url == card.ability.extra.secret_url) and 'tngt_neverforget' or nil\n            }\n        end\n    end,\n    reset_trigger = function(self, card)\n        card.ability.extra.triggered = false\n    end"
    },
    {
      "type": "Joker",
      "key": "mone",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "key = 'mone',\n    loc_txt = {\n        name = \"imagine {X:gold,C:white}X3{} money\",\n        text = {\n            \"{X:mult,C:white}Heck{}, imagine {X:gold,C:white}X4{} mone.\",\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 3, y = 0 },\n    cost = 7,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { x = 5 } },\n    calculate = function(self, card, context)\n        if context.end_of_round and context.main_eval then\n            return {\n                dollars = G.GAME.dollars * card.ability.extra.x - 1,\n                message = \"HECK.\",\n                message_card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "jesus",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'jesus',\n    loc_txt = {\n        name = \"{C:gold}He{} has rizzen.\",\n        text = {\n            \"This Jesus gains {X:mult,C:white}X#2#{} Mult\",\n            \"for each {X:dark_edition,C:white}Divine{} {X:dark_edition,C:white}Intervention{} happened in this run.\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 1, xmult_gain = 0.5 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult_gain } }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and context.game_over == false and context.main_eval then\n            card.ability.extra.mult = card.ability.extra.xmult + 0.5\n            return {\n                message = localize { type = 'variable', key = 'a_xmult', vars = { 0.5 } },\n                colour = G.C.RED,\n                card = card\n            }\n        end\n\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end,\n\n    callbacks = {\n        on_end_round = function(self, card)\n            if not G.GAME.round_resets.turn and not G.GAME.round_resets.ante then\n                card:juice_up(0.3, 0.3)\n            end\n            return nil\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "donpollo",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'donpollo',\n    loc_txt = {\n        name = \"El que quiera perder el tiempo- {f:tngt_emoji}📞📞📞📞{}\",\n        text = {\n            \"Upon {C:attention}selecting a blind{} or {C:attention}exiting a shop{},\",\n            \"create a {C:attention}Food{} Joker.\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            chips = 0,\n            mult = 0,\n            chips_gain = 100,\n            mult_gain = 5\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return { vars = {} }\n    end,\n\n    calculate = function(self, card, context)\n        if (context.setting_blind or context.ending_shop) and\n            not context.blueprint and\n            #G.jokers.cards < G.jokers.config.card_limit then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.4,\n                func = function()\n                    SMODS.add_card({\n                        set = \"Food\",\n                        key_append = \"gordon_ramsay\"\n                    })\n                    card:juice_up(0.5, 0.5)\n                    play_sound('tngt_neverforget', 1, 1)\n                    return true\n                end\n            }))\n\n            return {\n                message = \"DIO MÍO QUE HAGO\",\n                colour = G.C.BLUE\n            }\n        end\n    end,\n\n    sprite_effects = {\n        on_trigger = function(card)\n            if G.GAME.current_round and\n                (G.GAME.current_round.blind_select or G.GAME.current_round.shop_ended) then\n                card.children.floating_sprite:juice_up()\n            end\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "absolute",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'absolute',\n\tloc_txt = {\n\t\tname = \"Absolute cinema\",\n\t\ttext = {\n\t\t\t\"Upon {C:attention}selecting a blind{} or {C:attention}exiting a shop{},\",\n\t\t\t\"create a {C:attention}Food{} Joker.\"\n\t\t}\n\t},\n\trarity = 2,\n\tatlas = 'ModdedVanilla7',\n\tpos = { x = 4, y = 0 },\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = true,\n\tconfig = {\n\t\textra = {\n\t\t\tchips = 0,\n\t\t\tmult = 0,\n\t\t\tchips_gain = 100,\n\t\t\tmult_gain = 5\n\t\t}\n\t},\t\n\tloc_vars = function(self, info_queue, card)\n        return { vars = {} }\n    end,\n\n    calculate = function(self, card, context)\n        if next(SMODS.find_mod(\"kino\")) and (context.setting_blind or context.ending_shop) and\n           not context.blueprint and\n           #G.jokers.cards < G.jokers.config.card_limit then\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.4,\n                func = function()\n                    SMODS.add_card({\n                        set = \"Food\",\n                        key_append = \"gordon_ramsay\"\n                    })\n                    card:juice_up(0.5, 0.5)\n                    play_sound('tngt_neverforget', 1, 1)\n                    return true\n                end\n            }))\n\n            return {\n                message = \"DIO MÍO QUE HAGO\",\n                colour = G.C.BLUE\n            }\n        end\n    end,\n\n    sprite_effects = {\n        on_trigger = function(card)\n            if G.GAME.current_round and\n               (G.GAME.current_round.blind_select or G.GAME.current_round.shop_ended) then\n                card.children.floating_sprite:juice_up()\n            end\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "whosbro",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "key = 'whosbro',\n    loc_txt = {\n        name = \"The Joker nobody invited:\",\n        text = {\n            \"This dude gives both {C:attention}Rare Tag{} and {C:attention}Negative Tag{}\",\n            \"when {X:attention,C:white}IMMEDIATELY{} sold if you find or bought them.\",\n            \"{C:inactive}(Who invited him.)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 4, y = 0 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = 'tag_rare', set = 'Tag' }\n        info_queue[#info_queue + 1] = { key = 'tag_negative', set = 'Tag' }\n        return {}\n    end,\n    calculate = function(self, card, context)\n        if G.booster_pack and not G.booster_pack.REMOVED and SMODS.OPENED_BOOSTER then\n            for _, booster_card in ipairs(G.booster_pack.cards) do\n                if booster_card.config.center.key == self.key then\n                    G.FUNCS.use_card(booster_card)\n                    return {\n                        message = \"What's good gng\",\n                        colour = G.C.BLUE,\n                        sound = 'chips1'\n                    }\n                end\n            end\n        end\n\n        if G.shop_jokers and not context then\n            for _, shop_card in ipairs(G.shop_jokers.cards) do\n                if shop_card.config.center.key == self.key and G.GAME.dollars >= shop_card.cost then\n                    G.FUNCS.buy_from_shop(shop_card)\n                    return {\n                        message = \"Whaddup slime\",\n                        colour = G.C.GREEN,\n                        sound = 'tngt_neverforget'\n                    }\n                end\n            end\n        end\n\n        if context and context.selling_self and not context.blueprint then\n            return {\n                message = \"YO WAI-\",\n                colour = G.C.PURPLE,\n                sound = 'tarot1',\n                func = function()\n                    add_tag(Tag(\"tag_rare\"))\n                    add_tag(Tag(\"tag_negative\"))\n                    play_sound('tngt_neverforget', 1.2)\n                    card:juice_up(0.8, 0.5)\n                end\n            }\n        end\n    end,\n    callbacks = {\n        on_shop_refresh = function(card)\n            card:calculate()\n        end,\n        on_booster_opened = function(card)\n            card:calculate()\n        end\n    }"
    },
    {
      "type": "Joker",
      "key": "teto",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'teto',\n    loc_txt = {\n        name = \"{C:red,s:2}TETO.{}\",\n        text = {\n            \"Played {C:red}Hearts{} will gives you either {X:mult,C:white}+#1#{} Mult,\",\n            \"{X:mult,C:white}X#2#{} Mult, {X:mult,C:white}+#3#{} Chips, or {X:mult,C:white}$#4#{} Dollars.\",\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 1, y = 1 },\n    cost = 7,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { mult_bonus = 20, xmult_bonus = 11, chip_bonus = 20.12, dollar_bonus = 14 } },\n    loc_vars = function(self, info_queue, card)\n        info_queue[#info_queue + 1] = { key = \"teto\", set = \"Other\" }\n        return { vars = { card.ability.extra.mult_bonus, card.ability.extra.xmult_bonus, card.ability.extra.chip_bonus, card.ability.extra.dollar_bonus } }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play and context.other_card and context.other_card.base and context.other_card.base.suit == 'Hearts' then\n            local bonus_type = pseudorandom('IFUCKINGLOVEKASANETETO', 1, 4)\n            local extra = card.ability.extra\n\n            if bonus_type == 1 then\n                return {\n                    mult = extra.mult_bonus,\n                    colour = G.C.SUITS.Hearts\n                }\n            elseif bonus_type == 2 then\n                return {\n                    xmult = extra.xmult_bonus,\n                    colour = G.C.SUITS.Hearts\n                }\n            elseif bonus_type == 3 then\n                return {\n                    chips = extra.chip_bonus,\n                    colour = G.C.SUITS.Hearts\n                }\n            elseif bonus_type == 4 then\n                return {\n                    dollars = extra.dollar_bonus,\n                    colour = G.C.SUITS.Hearts\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "flasbangout",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = \"flasbangout\",\n    loc_txt = {\n        name = \"Think fast, {C:dark_edition}Chucklenuts\",\n        text = {\n            \"Throwing {C:attention}flashbangs{} for ALL interactions\",\n            \"Gains {C:chips}+#1#{} Chips per unique flashbang\",\n            \"Gains {X:mult,C:white}X#2#{} Mult when scoring\",\n            \"{C:inactive}(Currently {C:chips}+#3#{C:inactive} Chips and {X:mult,C:white}X#4#{C:inactive} Mult)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 1, y = 1 },\n    cost = 5,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = true,\n    config = {\n        extra = {\n            base_chips = 50,\n            chip_per_flashbang = 25,\n            base_mult = 1,\n            mult_per_flashbang = 0.5,\n            flashbangs_shown = 0\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.chip_per_flashbang,\n                card.ability.extra.mult_per_flashbang,\n                card.ability.extra.base_chips +\n                (card.ability.extra.flashbangs_shown * card.ability.extra.chip_per_flashbang),\n                card.ability.extra.base_mult +\n                (card.ability.extra.flashbangs_shown * card.ability.extra.mult_per_flashbang)\n            }\n        }\n    end,\n\n    show_omnipotent_flashbang = function(self, card, flashbang_key)\n        if not nxkoo_dies.flashbangs_loaded then\n            for k, v in pairs(nxkoo_dies.flashbangs) do\n                nxkoo_dies.flashbangs[k] = load_flashbang(v)\n            end\n            nxkoo_dies.flashbangs_loaded = true\n        end\n\n        nxkoo_dies.current_flashbang = nxkoo_dies.flashbangs[flashbang_key]\n        nxkoo_dies.show_flashbang = true\n        nxkoo_dies.flashbang_timer = 0.75\n\n        if not card.ability.extra.shown_flashbangs then\n            card.ability.extra.shown_flashbangs = {}\n        end\n\n        if not card.ability.extra.shown_flashbangs[flashbang_key] then\n            card.ability.extra.shown_flashbangs[flashbang_key] = true\n            card.ability.extra.flashbangs_shown = card.ability.extra.flashbangs_shown + 1\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.2,\n                blockable = false,\n                func = function()\n                    play_sound('tarot1', 1.2, 0.4)\n                    card:juice_up(0.5, 0.5)\n                    return true\n                end\n            }))\n        end\n    end,\n\n    calculate = function(self, card, context)\n        if context.starting_shop and not context.blind then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if context.ending_shop and not context.blind then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if context.buying_card then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if context.selling_card then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if context.reroll_shop then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if G.booster_pack and not G.booster_pack.REMOVED and SMODS.OPENED_BOOSTER then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if context.setting_blind and context.blind then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'blind')\n        end\n\n        if context.skip_blind then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'shop')\n        end\n\n        if G.GAME.blind and G.GAME.blind.boss and context.end_of_round and not context.game_over then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'blind')\n        end\n\n        if context.before and context.main_eval then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'hand_played')\n        end\n\n        if context.discard then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'discard')\n        end\n\n        if context.end_of_round and not context.blueprint then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'round_start')\n        end\n\n        if context.joker_main then\n            play_sound(\"tngt_flashbang\")\n            self:show_omnipotent_flashbang(card, 'joker_trigger')\n\n            local chips = card.ability.extra.base_chips +\n                (card.ability.extra.flashbangs_shown * card.ability.extra.chip_per_flashbang)\n            local mult = card.ability.extra.base_mult +\n                (card.ability.extra.flashbangs_shown * card.ability.extra.mult_per_flashbang)\n\n            return {\n                chips = chips,\n                xmult = mult,\n                card_eval_status = 'jokers'\n            }\n        end\n    end,\n\n    remove_from_deck = function(self, card, from_debuff)\n        card.ability.extra.shown_flashbangs = {}\n        card.ability.extra.flashbangs_shown = 0\n    end"
    },
    {
      "type": "Joker",
      "key": "birdthatihate",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"birdthatihate\",\n    loc_txt = {\n        name = \"That {C:red,s:2}FUCKIN'{} {C:green}Bird{} That I {C:attention}Hate{}\"\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 2, y = 1 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 2 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult } }\n    end,\n    calculate = function(self, card, context)\n        if context.individual and context.cardarea == G.play then\n            local c = context.other_card\n            local is_last_card = c == G.play.cards[#G.play.cards]\n\n            return {\n                xmult = 2,\n                sound = is_last_card and \"tngt_thatFUCKINbirdthatihate\" or \"tngt_birdthatihate\",\n                message = is_last_card and \"T H A T  F U C K I N '  B I R D  T H A T  I  H A T E.\" or nil\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "Ass",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"Ass\",\n    loc_txt = {\n        name = \"Joker World\",\n        text = {\n            \"{C:attention}Playing{} a hand that contains an {C:attention}Ace{} and a {C:attention}Pair of 5s{}\",\n            \"will {C:attention}level up {C:green,E:2}mostly{} {C:attention}Full House{}.\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 2, y = 1 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {},\n    loc_vars = function(self, info_queue, card)\n        return {}\n    end,\n    calculate = function(self, card, context)\n        if context.before and context.main_eval then\n            if next(context.poker_hands[\"Full House\"]) then\n                local has_ace = false\n                local has_two_fives = false\n                local five_count = 0\n\n                for _, c in ipairs(context.scoring_hand) do\n                    if c:get_id() == 14 then\n                        has_ace = true\n                    elseif c:get_id() == 5 then\n                        five_count = five_count + 1\n                    end\n                end\n\n                has_two_fives = (five_count == 2)\n\n                if has_ace and has_two_fives then\n                    return {\n                        level_up = true,\n                        level_up_hand = \"Full House\",\n                        message = localize('k_level_up_ex'),\n                        colour = G.C.BLUE\n                    }\n                end\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "slopperin",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"slopperin\",\n    loc_txt = {\n        name = \"The boy's hungry\",\n        text = {\n            'After playing a hand,',\n            'create {C:attention}1{} random {C:common}Common Joker{}',\n            'and {C:attention}1{} random {C:attention}consumable{}',\n            '{C:inactive}(Must have room)'\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 2, y = 1 },\n    cost = 4,\n    unlocked = true,\n    discovered = true,\n    config = { extra = {} },\n\n    calculate = function(self, card, context)\n        if context.after and not context.blueprint and context.cardarea == G.play then\n            local can_spawn_joker = G.jokers and #G.jokers.cards < G.jokers.config.card_limit\n            local can_spawn_consumable = G.consumeables and\n                (#G.consumeables.cards + (G.GAME.consumeable_buffer or 0)) < G.consumeables.config.card_limit\n\n            if can_spawn_joker or can_spawn_consumable then\n                G.E_MANAGER:add_event(Event({\n                    trigger = 'after',\n                    delay = 0.4,\n                    func = function()\n                        if can_spawn_joker then\n                            SMODS.add_card({\n                                set = 'Joker',\n                                rarity = 'Common',\n                                key_append = 'sloplive2'\n                            })\n                        end\n\n                        if can_spawn_consumable then\n                            local consumable_types = { 'Tarot', 'Planet', 'Spectral' }\n                            local selected_type = pseudorandom_element(consumable_types, pseudoseed('sloppy'))\n                            SMODS.add_card({\n                                set = selected_type,\n                                key_append = 'sloplive3'\n                            })\n                        end\n\n                        card:juice_up()\n                        return true\n                    end\n                }))\n            end\n\n            return {\n                message = can_spawn_joker or can_spawn_consumable and localize('k_created_ex') or\n                localize('k_no_space_ex'),\n                colour = can_spawn_joker or can_spawn_consumable and G.C.GREEN or G.C.RED\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "morshu",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "key = \"morshu\",\n    loc_txt = {\n        name = \"{C:attention}Come back{} when you a little, {X:green,C:white}mmmmmm{}, {C:gold}richer\",\n        text = {\n            \"When you have between {C:attention}$#2#-{}\",\n            \"{C:attention}$#3#{}, gives {C:money}#1#%{} discount\",\n            \"{C:inactive}(Updates when money changes)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 2, y = 1 },\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = {\n        extra = {\n            discount_percent = 75,\n            threshold = 100,\n            buffer = 15\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.discount_percent,\n                card.ability.extra.threshold - card.ability.extra.buffer,\n                card.ability.extra.threshold + card.ability.extra.buffer\n            },\n            colours = { G.C.MONEY, G.C.FILTER }\n        }\n    end,\n    calculate = function(self, card, context)\n        if (context.dollars_modified or context.first_hand_drawn) and not context.blueprint then\n            local current_money = G.GAME.dollars + (G.GAME.dollar_buffer or 0)\n            local lower_bound = card.ability.extra.threshold - card.ability.extra.buffer\n            local upper_bound = card.ability.extra.threshold + card.ability.extra.buffer\n\n            if current_money >= lower_bound and current_money <= upper_bound then\n                G.GAME.discount_percent = card.ability.extra.discount_percent\n                card:juice_up(0.5, 0.5)\n            else\n                G.GAME.discount_percent = 0\n            end\n\n            G.E_MANAGER:add_event(Event({\n                func = function()\n                    for _, v in pairs(G.I.CARD) do\n                        if v.set_cost then v:set_cost() end\n                    end\n                    return true\n                end\n            }))\n        end\n    end,\n\n    remove_from_deck = function(self, card)\n        G.GAME.discount_percent = 0\n        for _, v in pairs(G.I.CARD) do\n            if v.set_cost then v:set_cost() end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "crash",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "key = 'crash',\n    loc_txt = {\n        name = '{C:red}Finna Crashout{}',\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult for each {C:red}Crash Logs{}\",\n            \"in your {C:attention}Desktop{}\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{C:inactive} Mult)\"\n        }\n    },\n    rarity = 3,\n    atlas = 'ModdedVanilla2',\n    pos = { x = 1, y = 1 },\n    cost = 7,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { xmult = 1.5 } },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra.xmult, card.ability.extra.xmult * (#NFS.getDirectoryItems(SMODS.MODS_DIR .. \"/lovely/log\")) } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult * #G.deck.cards\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "solly",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'solly',\n\tloc_txt = {\n\t\tname = '{C:green}weed{} joker {C:red}tf{}{C:blue}2{} {C:red}(high af){}',\n\t\ttext = {\n            \"If played hand is a {C:attention}#1#{}, retriggers it equal to their rank\",\n            \"fixed {C:green}#2#{} chance to Soldier to {C:red}shoot{} the Blind with {C:dark_edition}Rocket Launcher.\"\n\t\t}\n\t},\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\teternal_compat = true,\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = true,\n\tatlas = 'ModdedVanilla2',\n\tpos = { x = 5, y = 0 },\n\tconfig = { extra = {} },\n    loc_vars = function(self, info_queue, card)\n        return { vars = { \"High Card\", \"50%\" } }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main and context.repetition and next(context.poker_hands['High Card']) then\n            local retriggers = 0\n            local highest_rank = 0\n\n            for _, playing_card in ipairs(context.scoring_hand) do\n                local rank = playing_card:get_id()\n                if rank > highest_rank then\n                    highest_rank = rank\n                end\n            end\n\n            if highest_rank >= 11 and highest_rank <= 14 then\n                retriggers = 10\n            elseif highest_rank <= 10 then\n                retriggers = highest_rank\n            end\n            if retriggers > 0 then\n                return {\n                    repetitions = retriggers,\n                    message = localize{type='variable', key='a_repetitions', vars={retriggers}},\n                    card = card\n                }\n            end\n        end\n        if context.after and context.joker_main then\n            if pseudorandom('DOMINATED') < 0.5 then\n                G.E_MANAGER:add_event(Event({\n                    func = function()\n                        play_sound('tngt_neverforget', 1.2)\n                        G.GAME.chips = G.GAME.blind.chips\n                        G.STATE = G.STATES.HAND_PLAYED\n                        G.STATE_COMPLETE = true\n                        end_round()\n                        return true\n                    end\n                }))\n                return {\n                    message = \"DOMINATED, CYCLOPS.\",\n                    colour = G.C.GOLD,\n                    card = card\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "puzzles",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'puzzles',\n    loc_txt = {\n        name = \"{C:attention}I'd{} like to solve the {C:green}puzzle{}\",\n        text = {\n            \"{X:mult,C:white}X#1#{} Mult per {C:attention}vowel{} in name of card to its {C:attention}left{}\",\n            \"{X:blue,C:white}X#2#{} Chips per {C:attention}consonant{} in name of card to its {C:attention}right{}\",\n            \"{X:mult,C:white}X1.5{} bonus if descriptions match\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#3#{C:inactive} Mult and {X:blue,C:white}X#4#{C:inactive} Chips)\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 3,\n    cost = 8,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla3',\n    pos = { x = 5, y = 0 },\n    config = {\n        extra = {\n            mult_per_vowel = 1.5,\n            chips_per_consonant = 2.5,\n            current_mult = 0,\n            current_chips = 0,\n            description_bonus = 1.5\n        }\n    },\n\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.mult_per_vowel,\n                card.ability.extra.chips_per_consonant,\n                card.ability.extra.current_mult,\n                card.ability.extra.current_chips\n            }\n        }\n    end,\n\n    update = function(self, card, dt)\n        if G.jokers then\n            local self_id = nil\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card then self_id = i end\n            end\n\n            card.ability.extra.current_mult = 0\n            card.ability.extra.current_chips = 0\n            local bonus_multiplier = 1\n\n            local left_vowels = 0\n            local left_description = nil\n            if self_id and self_id > 1 then\n                local left_card = G.jokers.cards[self_id - 1]\n                local left_name = left_card.config.center.name\n\n                if string.find(left_name, \"j_\") then\n                    left_name = left_card.config.center.loc_txt.name\n                    left_description = left_card.config.center.loc_txt.text\n                end\n\n                left_vowels = #string.gsub(left_name, \"[AEIOUaeiou]\", \"\")\n                card.ability.extra.current_mult = left_vowels + card.ability.extra.mult_per_vowel\n            end\n\n            local right_consonants = 0\n            local right_description = nil\n            if self_id and G.jokers.cards[self_id + 1] then\n                local right_card = G.jokers.cards[self_id + 1]\n                local right_name = right_card.config.center.name\n\n                if string.find(right_name, \"j_\") then\n                    right_name = right_card.config.center.loc_txt.name\n                    right_description = right_card.config.center.loc_txt.text\n                end\n\n                right_consonants = #string.gsub(right_name, \"[^A-Za-z]\", \"\") -\n                    #string.gsub(right_name, \"[AEIOUaeiou]\", \"\")\n                card.ability.extra.current_chips = right_consonants + card.ability.extra.chips_per_consonant\n            end\n\n            if left_description and right_description and\n                tostring(left_description) == tostring(right_description) then\n                bonus_multiplier = card.ability.extra.description_bonus\n                card.ability.extra.current_mult = card.ability.extra.current_mult * bonus_multiplier\n                card.ability.extra.current_chips = card.ability.extra.current_chips * bonus_multiplier\n            end\n        end\n    end,\n\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local bonus_active = false\n            local self_id = nil\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card then self_id = i end\n            end\n\n            if self_id then\n                local left_description = nil\n                local right_description = nil\n\n                if self_id > 1 then\n                    local left_card = G.jokers.cards[self_id - 1]\n                    if left_card.config.center.loc_txt then\n                        left_description = left_card.config.center.loc_txt.text\n                    end\n                end\n\n                if G.jokers.cards[self_id + 1] then\n                    local right_card = G.jokers.cards[self_id + 1]\n                    if right_card.config.center.loc_txt then\n                        right_description = right_card.config.center.loc_txt.text\n                    end\n                end\n\n                bonus_active = left_description and right_description and\n                    tostring(left_description) == tostring(right_description)\n            end\n\n            return {\n                mult = card.ability.extra.current_mult,\n                xchips = card.ability.extra.current_chips,\n                card = card,\n                colour = bonus_active and G.C.PURPLE or G.C.RED\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "proceed",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'proceed',\n    loc_txt = {\n        name = \"{f:DETERMINATION,C:gold}PROCEED.{}\",\n        text = {\n            \"When starting a {C:attention}new round{}, immediately draw\",\n            \"Ace of {C:red}Hearts{} and play it.\",\n            \"{C:inactive}There's no such thing as free will.\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 3,\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    config = { extra = { chips = 0, chip_mod = 3 } },\n    atlas = 'ModdedVanilla4',\n    pos = { x = 5, y = 0 },\n    loc_vars = function(self, info_queue, card)\n        return {\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.setting_blind and not context.blueprint then\n            G.E_MANAGER:add_event(Event({\n                delay = 0.2,\n                func = function()\n                    local _card = SMODS.add_card({\n                        set = \"Playing Card\",\n                        rank = \"Ace\",\n                        suit = \"Hearts\"\n                    })\n                    G.hand:add_to_highlighted(_card)\n                    G.FUNCS.play_cards_from_highlighted()\n                    return true\n                end\n            }))\n            return {\n                message = \"P R O C E E D.\",\n                colour = G.C.SUITS.Hearts\n            }\n        end\n        if context.individual and context.joker_main then\n            return {\n                sound = \"tngt_snowgrave\",\n                xmult = 99999999999999999999999,\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "waddle",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'waddle',\n\tloc_txt = {\n\t\tname = \"Do you got any {C:blue}Venus?{}\",\n\t\ttext = {\n\t\t\t\"{s:1.5}And he said 'No, we only have {C:blue,s:1.5}#1#{}'\",\n\t\t\t\"{C:inactive}-----------------------------------------{}\",\n\t\t\t\"This Duck {C:red,E:2}self destructs{} and gives {C:gold}$30{} if you {C:attention}use{} {C:blue}#1#{}\",\n\t\t\t\"{C:inactive}And he waddled away, waddle waddle..\"\n\t\t}\n\t},\n\tblueprint_compat = true,\n\tperishable_compat = false,\n\teternal_compat = true,\n\trarity = 2,\n\tcost = 6,\n\tunlocked = true,\n\tdiscovered = true,\n\tatlas = 'ModdedVanilla7',\n\tpos = { x = 5, y = 0 },\t\n\t\tconfig = { extra = { desired_planet = \"c_mercury\" } },\n\t\tloc_vars = function(self, info_queue, card)\n\t\t\tlocal planet_name = card.ability.extra.desired_planet\n\t\t\treturn { vars = { localize{ type = \"name_text\", set = \"Planet\", key = card.ability.extra.desired_planet } } }\n\t\tend,\n\t\tcalculate = function(self, card, context)\n\t\t\tif context.using_consumeable and context.consumeable.ability.set == 'Planet' then\n\t\t\t\tif context.consumeable.config.center.key == card.ability.extra.desired_planet then\n\t\t\t\t\tG.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 30\n\n\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tplay_sound('tngt_neverforget')\n\t\t\t\t\t\t\tcard.T.r = -0.2\n\t\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\n\t\t\t\t\t\t\tcard.states.drag.is = true\n\t\t\t\t\t\t\tcard.children.center.pinch.x = true\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\ttrigger = 'after',\n\t\t\t\t\t\t\t\tdelay = 0.3,\n\t\t\t\t\t\t\t\tblockable = false,\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\tcard:remove()\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\t}))\n\t\t\t\t\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdollars = 30,\n\t\t\t\t\t\tmessage = \"And he waddle away, waddle waddle!\",\n\t\t\t\t\t\tcolour = G.C.MONEY,\n\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\t\t\t\t\tfunc = function()\n\t\t\t\t\t\t\t\t\tG.GAME.dollar_buffer = 0\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\tend\n\t\t\t\t\t}\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tif context.setting_blind and not context.blueprint then\n\t\t\t\tlocal planet_keys = {}\n\t\t\t\tfor k, _ in pairs(G.P_CENTER_POOLS.Planet) do\n\t\t\t\t\tif string.match(k, \"^c_\") then\n\t\t\t\t\t\ttable.insert(planet_keys, k)\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tlocal new_planet = card.ability.extra.desired_planet\n\t\t\t\twhile new_planet == card.ability.extra.desired_planet and #planet_keys > 1 do\n\t\t\t\t\tnew_planet = pseudorandom_element(planet_keys, pseudoseed('andhewaddleaway'..G.GAME.round_resets.ante))\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tcard.ability.extra.desired_planet = new_planet\n\t\t\t\treturn {\n\t\t\t\t\tmessage = localize('k_reset'),\n\t\t\t\t\tcolour = G.C.BLUE\n\t\t\t\t}\n\t\t\tend\n\t\tend,\n\t\tadd_to_deck = function(self, card, from_debuff)\n\t\t\tif not card.ability.extra.desired_planet then\n\t\t\t\tlocal planet_keys = {}\n\t\t\t\tfor k, _ in pairs(G.P_CENTER_POOLS.Planet) do\n\t\t\t\t\tif string.match(k, \"^c_\") then\n\t\t\t\t\t\ttable.insert(planet_keys, k)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tcard.ability.extra.desired_planet = pseudorandom_element(planet_keys, pseudoseed('andhewaddleaway'))\n\t\t\tend\n\t\tend"
    },
    {
      "type": "Joker",
      "key": "ashbaby",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "key = 'ashbaby',\n    loc_txt = {\n        name = \"{C:inactive}AAAAAAAAAAAAA{}\",\n        text = {\n            \"{C:attention}Destroyed{} cards has {C:green}1{} in {C:green}#3#{} chance to be {C:attention}duplicated{}\",\n            \"and gains {X:mult,C:white}X#1#{} for each destroyed cards\",\n            \"{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)\"\n        }\n    },\n    blueprint_compat = true,\n    perishable_compat = false,\n    eternal_compat = true,\n    rarity = 3,\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    atlas = 'ModdedVanilla8',\n    pos = { x = 5, y = 0 },\n    config = {\n        extra = {\n            xmult = 1,\n            xmult_gain = 2,\n            odds = 2\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.xmult_gain,\n                card.ability.extra.xmult,\n                card.ability.extra.odds\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.remove_playing_cards and not context.blueprint then\n            local destroyed_count = 0\n\n            for _, removed_card in ipairs(context.removed) do\n                destroyed_count = destroyed_count + 1\n\n                if pseudorandom('wootwoot' .. G.GAME.round_resets.ante) < G.GAME.probabilities.normal / card.ability.extra.odds then\n                    local copy = copy_card(removed_card, nil, nil, nil, removed_card.edition)\n                    copy:add_to_deck()\n                    G.deck.config.card_limit = G.deck.config.card_limit + 1\n\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            G.hand:emplace(copy)\n                            copy:start_materialize()\n                            play_sound('tarot1', 0.9)\n                            return true\n                        end\n                    }))\n                end\n            end\n\n            if destroyed_count > 0 then\n                card.ability.extra.xmult = card.ability.extra.xmult + (destroyed_count * card.ability.extra.xmult_gain)\n                return {\n                    message = localize {\n                        type = 'variable',\n                        key = 'a_xmult',\n                        vars = { card.ability.extra.xmult }\n                    },\n                    colour = G.C.PURPLE\n                }\n            end\n        end\n\n        if context.joker_main then\n            return {\n                xmult = card.ability.extra.xmult\n            }\n        end\n    end"
    },
    {
      "type": "Atlas",
      "key": "tennas",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tennas\",\n    path = \"tennas.png\",\n    px = 64,\n    py = 64,"
    },
    {
      "type": "Joker",
      "key": "tenna",
      "atlas": "tennas",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "key = \"tenna\",\n    display_size = { w = 64, h = 64 },\n    pos = { x = 0, y = 0 },\n    frames = 93,\n    frame_delay = 0.01,\n    atlas = \"tennas\",\n    loc_txt = {\n        name = \"{f:tngt_DETERMINATION}Mr. (Ant) Tenna{}\",\n        text = {\n\t\t\t\t\t\"{X:mult,C:white,f:tngt_DETERMINATION}X#1#{} {f:tngt_DETERMINATION}Mult for each time\",\n\t\t\t\t\t\"{f:tngt_DETERMINATION}the words {C:attention}{f:tngt_DETERMINATION}\\\"I LOVE TV\\\"{}\",\n\t\t\t\t\t\"{f:tngt_DETERMINATION}have been said in the {C:attention,f:tngt_DETERMINATION}Balatro Discord Server{}\",\n\t\t\t\t\t\"{C:inactive,f:tngt_DETERMINATION}(Currently {X:mult,C:white,f:tngt_DETERMINATION}X#2#{C:inactive,f:tngt_DETERMINATION} Mult)\",\n\t\t\t\t\t\"{C:blue,s:0.7,f:tngt_DETERMINATION}https://discord.gg/balatro{}\",\n        }\n    },\n    config = {\n\t\textra = {\n\t\t\tILOVETV = 50,\n\t\t\ttenna_mult = 1 \n\t\t}\n\t},\n    loc_vars = function(self, info_queue, card)\n    info_queue[#info_queue + 1] = { key = 'ilovetv', set = 'Other' }\n    info_queue[#info_queue + 1] = { key = 'manually', set = 'Other' }\n\t\treturn {\n\t\t\tvars = { card.ability.extra.tenna_mult, card.ability.extra.ILOVETV * card.ability.extra.tenna_mult } \n\t\t}\n\tend,\n    rarity = 3,\n    cost = 6,\n    unlocked = true,\n    discovered = true,\n    set_ability = function(self, card, initial, delay_sprites)\n        add_animated_sprite(card)\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n\t\t\t\treturn {\n\t\t\t\t\tx_mult = card.ability.extra.ILOVETV * card.ability.extra.tenna_mult\n\t\t\t\t}\n\t\t\tend\n    end"
    },
    {
      "type": "Joker",
      "key": "lowtiergod",
      "atlas": "ModdedVanilla",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'lowtiergod',\n    loc_txt = {\n        name = '{C:red}Low{}{C:gold}Tier{}{C:dark_edition}God{}',\n        text = {\n            \"{X:attention,C:white}X#1#{} Blind Requirements\"\n        }\n    },\n    rarity = 4,\n    atlas = 'ModdedVanilla',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    config = { extra = 0.5 },\n\n    loc_vars = function(self, info_queue, card)\n        return { vars = { card.ability.extra } }\n    end,\n\n    calculate = function(self, card, context)\n        if context.setting_blind and not card.getting_sliced then\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = 0.1,\n                func = function()\n                    G.GAME.blind.chips = math.floor(G.GAME.blind.chips * card.ability.extra)\n                    G.GAME.blind.chip_text = number_format(G.GAME.blind.chips)\n\n                    local chips_UI = G.hand_text_area.blind_chips\n                    G.FUNCS.blind_chip_UI_scale(chips_UI)\n                    G.HUD_blind:recalculate()\n\n                    if context.blueprint_card then\n                        context.blueprint_card:juice_up()\n                    else\n                        card:juice_up()\n                    end\n                    chips_UI:juice_up()\n                    play_sound('tngt_NOW')\n\n                    return true\n                end\n            }))\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "sybau",
      "atlas": "ModdedVanilla2",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'sybau',\n\tloc_txt = {\n\t\tname = '{f:tngt_times}SYBAU{}{f:tngt_emoji}💔{}',\n\t\ttext = {\n\t\t\t\"Every {C:attention}played cards{} are retriggered {C:attention}twice{},\",\n\t\t\t\"but {C:dark_edition}shut yo bitch ass up.{}\"\n\t\t}\n\t},\n\trarity = 4,\n\tatlas = 'ModdedVanilla2',\n\tpos = { x = 0, y = 1 },\n\tsoul_pos = { x = 4, y = 1 },\n\tcost = 20,\n\tunlocked = true,\n\tdiscovered = true,\n\tconfig = { extra = {\n        stored_volumes = {music = 0, sounds = 0, master = 0},\n        mute_duration = 0.5\n    }},\n\n    loc_vars = function(self, info_queue, card)\n        return { vars = { \"2×\" }, retriggers = 2 }\n    end,\n\n    calculate = function(self, card, context)\n        if context.repetition and context.cardarea == G.play then\n            if card.ability.extra.stored_volumes.music == 0 then\n                card.ability.extra.stored_volumes = {\n                    music = G.SETTINGS.SOUND.music_volume,\n                    sounds = G.SETTINGS.SOUND.sounds_volume,\n                    master = G.SETTINGS.SOUND.master_volume\n                }\n            end\n\n            G.SETTINGS.SOUND.music_volume = 0\n            G.SETTINGS.SOUND.sounds_volume = 0\n            G.SETTINGS.SOUND.master_volume = 0\n\n            G.E_MANAGER:add_event(Event({\n                trigger = 'after',\n                delay = card.ability.extra.mute_duration,\n                blockable = false,\n                func = function()\n                    self:restore_volumes(card)\n                    return true\n                end\n            }))\n\n            return {\n                repetitions = 2,\n                colour = G.C.BLUE\n            }\n        end\n    end,\n\n    restore_volumes = function(self, card)\n        if card and card.ability and card.ability.extra and card.ability.extra.stored_volumes then\n            G.SETTINGS.SOUND.music_volume = card.ability.extra.stored_volumes.music\n            G.SETTINGS.SOUND.sounds_volume = card.ability.extra.stored_volumes.sounds\n            G.SETTINGS.SOUND.master_volume = card.ability.extra.stored_volumes.master\n        end\n    end,\n    remove_from_deck = function(self, card, from_debuff)\n        self:restore_volumes(card)\n    end,\n    calculate = function(self, card, context)\n        if context.remove_playing_cards and context.cards and #context.cards > 0 then\n            for _, c in ipairs(context.cards) do\n                if c == card then\n                    self:restore_volumes(card)\n                    break\n                end\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "you",
      "atlas": "ModdedVanilla3",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'you',\n\tloc_txt = {\n\t\tname = '{f:tngt_DETERMINATION}You{}',\n\t\ttext = {\n\t\t\t\"{f:tngt_DETERMINATION,}* Despite everything, it's still you.{}\"\n\t\t}\n\t},\n\tconfig = { extra = {} },\n\trarity = \"tngt_4TH WALL\",\n\tatlas = 'ModdedVanilla3',\n\tpos = { x = 0, y = 1 },\n\tsoul_pos = { x = 4, y = 1 },\n\tcost = 20,\n\tunlocked = true,\n\tdiscovered = true,\n\tloc_vars = function(self, info_queue, card)\n\t\tinfo_queue[#info_queue + 1] = G.P_CENTERS.e_negative\n\tend,\n\tcalculate = function(self, card, context)\n\t\tif context.ending_shop then\n\t\t\tG.E_MANAGER:add_event(Event({\n\t\t\t\tfunc = function()\n\t\t\t\t\tlocal card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('perkeo2')), nil)\n\t\t\t\t\tcard:set_edition('e_negative', true)\n\t\t\t\t\tcard:add_to_deck()\n\t\t\t\t\tG.consumeables:emplace(card)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t}))\n\t\t\tcard_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil,\n\t\t\t\t{ message = localize('k_duplicated_ex') })\n\t\tend\n\tend"
    },
    {
      "type": "Joker",
      "key": "flamingo",
      "atlas": "ModdedVanilla4",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'flamingo',\n    loc_txt = {\n        name = \"{C:red,E:1}F{}{C:green,E:1}l{C:blue,E:1}a{}{C:red,E:1}m{C:green,E:1}i{C:blue,E:1}n{C:red,E:1}g{C:green,E:1}o{C:blue,E:1}.\",\n        text = {\n            \"If played hand is a {C:attention}Flush{}, convert\",\n            \"all cards in hand to the suit of the played hand.\"\n        }\n    },\n    config = { extra = {} },\n    rarity = 4,\n    atlas = 'ModdedVanilla4',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    loc_vars = function(self, info_queue, card)\n        return { vars = {} }\n    end,\n    calculate = function(self, card, context)\n        if context.after and context.poker_hands and context.poker_hands['Flush'] and #context.poker_hands['Flush'] > 0 then\n            local flush_cards = context.poker_hands[\"Flush\"][1]\n            local example_card = flush_cards[1]\n            if example_card and example_card.base and example_card.base.suit then\n                local flush_suit = example_card.base.suit\n\n                for _, c in ipairs(G.hand.cards) do\n                    if c and c.base then\n                        SMODS.change_base(c, flush_suit)\n                        c:juice_up(0.5, 0.5)\n                    end\n                end\n\n                return {\n                    message = \"Shrimps are pretty rich.\",\n                    colour = G.C.SUITS[flush_suit]\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "jarvis",
      "atlas": "ModdedVanilla6",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'jarvis',\n    loc_txt = {\n        name = \"Clearly, {C:red}you{} don't {C:attention}own{} a {C:blue}Blueprint{}\",\n        text = {\n            \"Copies the abilities of both left AND right {C:attention}Jokers{}.\",\n            \"{C:inactive}(Jarvis, inspect this guy's balls.)\"\n        }\n    },\n    config = { extra = {} },\n    rarity = 4,\n    atlas = 'ModdedVanilla6',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = false,\n    eternal_compat = true,\n    config = {},\n\n    loc_vars = function(self, info_queue, card)\n        if card.area and card.area == G.jokers then\n            local left_joker, right_joker = nil, nil\n            local left_compat, right_compat = false, false\n\n            for i = 1, #G.jokers.cards do\n                if G.jokers.cards[i] == card then\n                    left_joker = G.jokers.cards[i - 1]\n                    right_joker = G.jokers.cards[i + 1]\n                    break\n                end\n            end\n\n            left_compat = left_joker and left_joker ~= card and left_joker.config.center.blueprint_compat\n            right_compat = right_joker and right_joker ~= card and right_joker.config.center.blueprint_compat\n\n            local left_indicator = {\n                n = G.UIT.C,\n                config = {\n                    align = \"cm\",\n                    padding = 0.05,\n                    minw = 1.5,\n                    r = 0.1,\n                    colour = left_compat and G.C.GREEN or G.C.RED\n                },\n                nodes = {\n                    {\n                        n = G.UIT.R,\n                        config = {\n                            align = \"cm\",\n                            text = \"← \" .. (left_joker and string.sub(left_joker.config.center.name, 1, 8) or \"None\"),\n                            scale = 0.32,\n                            colour = G.C.UI.TEXT_LIGHT\n                        }\n                    }\n                }\n            }\n\n            local right_indicator = {\n                n = G.UIT.C,\n                config = {\n                    align = \"cm\",\n                    padding = 0.05,\n                    minw = 1.5,\n                    r = 0.1,\n                    colour = right_compat and G.C.GREEN or G.C.RED\n                },\n                nodes = {\n                    {\n                        n = G.UIT.R,\n                        config = {\n                            align = \"cm\",\n                            text = (right_joker and string.sub(right_joker.config.center.name, 1, 8) or \"None\") .. \" →\",\n                            scale = 0.32,\n                            colour = G.C.UI.TEXT_LIGHT\n                        }\n                    }\n                }\n            }\n\n            return {\n                main_end = {\n                    {\n                        n = G.UIT.R,\n                        config = { align = \"cm\", padding = 0, minh = 0.6 },\n                        nodes = { left_indicator, right_indicator }\n                    }\n                },\n                vars = {\n                    left_compat and \"Compatible\" or \"Incompatible\",\n                    right_compat and \"Compatible\" or \"Incompatible\"\n                }\n            }\n        end\n        return { vars = {} }\n    end,\n\n    calculate = function(self, card, context)\n        if not G.jokers then return nil end\n\n        local left_effect, right_effect = nil, nil\n\n        for i = 1, #G.jokers.cards do\n            if G.jokers.cards[i] == card then\n                local left_joker = G.jokers.cards[i - 1]\n                local right_joker = G.jokers.cards[i + 1]\n\n                if left_joker and left_joker ~= card and left_joker.config.center.blueprint_compat then\n                    left_effect = SMODS.blueprint_effect(card, left_joker, context)\n                end\n\n                if right_joker and right_joker ~= card and right_joker.config.center.blueprint_compat then\n                    right_effect = SMODS.blueprint_effect(card, right_joker, context)\n                end\n                break\n            end\n        end\n\n        if left_effect or right_effect then\n            local merged_effect = SMODS.merge_effects(\n                { left_effect or {} },\n                { right_effect or {} }\n            )\n\n            return merged_effect\n        else\n            return nil\n        end\n    end,"
    },
    {
      "type": "Joker",
      "key": "spoiler",
      "atlas": "ModdedVanilla7",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'spoiler',\n    loc_txt = {\n        name = \"{X:dark_editon,C:white}(SPOILER){}\",\n        text = {\n            \"All cards {C:attention}held in hand{} are flipped\",\n            \"But each cards contains {X:mult,C:white}X#1#{} Mult.\",\n            \"{C:inactive}(Spoiler it bro, it just came out yesterday..){}\"\n        }\n    },\n    config = { extra = {} },\n    rarity = 4,\n    atlas = 'ModdedVanilla7',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = false,\n    eternal_compat = true,\n    config = {\n        extra = {\n            xmult = 5\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = { card.ability.extra.xmult }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.first_hand_drawn and not context.blueprint then\n            for _, v in ipairs(G.hand.cards) do\n                if v.ability.play_flipped ~= true then\n                    v.ability.play_flipped = true\n                    v:flip()\n                end\n            end\n        end\n\n        if context.individual and context.cardarea == G.play then\n            if context.other_card.ability.play_flipped then\n                return {\n                    xmult = card.ability.extra.xmult\n                }\n            end\n        end\n\n        if context.end_of_round then\n            for _, v in ipairs(G.hand.cards) do\n                if v.ability.play_flipped then\n                    v.ability.play_flipped = nil\n                    v:flip()\n                end\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "flightreacts",
      "atlas": "ModdedVanilla8",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'flightreacts',\n\tloc_txt = {\n\t\t\tname = \"There's no {C:dark_edition}limit{} in {C:attention}glazing{}\",\n\t\ttext = {\n            \"If you reach next {C:attention}Ante{}\",\n            \"in {C:attention}#2#{} rounds or less,\",\n            \"create a {C:dark_edition}negative{} copy of\",\n            \"a random {C:uncommon}Uncommon Joker{}\",\n            \"{C:inactive}(Current round: {C:attention}#3#{C:inactive})\"\n\t\t}\n\t},\n\trarity = 4,\n\tatlas = 'ModdedVanilla8',\n\tpos = { x = 0, y = 1 },\n\tsoul_pos = { x = 4, y = 1 },\n\tcost = 20,\n\tunlocked = true,\n\tdiscovered = true,\n\tblueprint_compat = false,\n    eternal_compat = true,\n    config = {\n        extra = {\n            max_rounds = 2,\n            ante_target = 1,\n            activated = false\n        }\n    },\n\tloc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.ante_target,\n                card.ability.extra.max_rounds,\n                G.GAME.round_resets.ante,\n                G.GAME.round\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.end_of_round and not context.blueprint and not card.ability.extra.activated then\n            if G.GAME.round_resets.ante >= card.ability.extra.ante_target and\n               G.GAME.round <= card.ability.extra.max_rounds then\n                card.ability.extra.activated = true\n\n                local uncommon_jokers = {}\n                for _, joker in pairs(G.P_CENTER_POOLS.Joker) do\n                    if joker.rarity == 2 then\n                        table.insert(uncommon_jokers, joker.key)\n                    end\n                end\n\n                if #uncommon_jokers > 0 and #G.jokers.cards < G.jokers.config.card_limit then\n                    local chosen_key = pseudorandom_element(uncommon_jokers, pseudoseed('damndaniel'))\n                    G.E_MANAGER:add_event(Event({\n                        func = function()\n                            local new_joker = SMODS.add_card({\n                                set = \"Joker\",\n                                key = chosen_key,\n                                edition = \"e_negative\",\n                                from_card = card\n                            })\n                            new_joker:juice_up()\n                            play_sound('tngt_neverforget', 1.1)\n                            return true\n                        end\n                    }))\n\n                    return {\n                        message = localize('k_plus_joker')..\" (\"..localize('k_negative_edition')..\")\",\n                        colour = G.C.PURPLE\n                    }\n                end\n            elseif G.GAME.round > card.ability.extra.max_rounds then\n                card.ability.extra.activated = true\n                return {\n                    message = \"damn daniel..\",\n                    colour = G.C.RED\n                }\n            end\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "whuh",
      "atlas": "ModdedVanilla9",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'whuh',\n    loc_txt = {\n        name = \"What in the {C:red,E:2}fuck{}\",\n        text = {\n            \"{C:green}In the Before Times{}, when the cosmos was young and {C:blue}probability\", -- AI slop, im not finishing writing this stupid ass description just for a shit joker\n            \"still flowed like {C:red}molten gold through the veins of creation, the\",\n            \"{C:attention}Elder Gods of Chance forged this artifact from the {C:purple}crystallized\",\n            \"essence of infinite {X:green,C:white}possibilities{}. Its very existence {C:red}warps the\",\n            \"fundamental {C:green}mathematics of luck itself to serve its {C:attention}chosen bearer\",\n            \"\",\n            \"{C:mult}+#1#{} to thy {C:attention}Eternal Mult - {C:green}not merely a number, but a {C:tarot}sacred covenant with the {C:blue}arithmetic deities, elevating thy\",\n            \"scoring potential {C:red}beyond mortal comprehension. Each point\",\n            \"represents one of the {C:dark_edition}Ten Commandments of {C:green}Gambling handed\",\n            \"down from the {C:purple}High Priests of Poker to their {C:blue}chosen disciples\",\n            \"\",\n            \"{C:chips}+#2#{} to thy {C:attention}Divine Chips - {C:green}a blessing so potent that even the {C:red}lowliest High Card shall shine with the {C:blue}radiance of\",\n            \"a {C:attention}Royal Flush. These chips contain {C:tarot}fragments of the\",\n            \"{C:purple}original dice cast by the {C:red}Fates when determining the\",\n            \"{C:blue}destinies of men and {C:attention}gods alike\",\n            \"\",\n            \"{X:mult,C:white}X#3#{} to thy {C:attention}Cosmic Multiplier - {C:green}a coefficient of such {C:red}magnitude that {C:blue}Pythagoras himself would weep at its {C:purple}perfection\",\n            \"This {C:tarot}golden ratio of victory transforms {C:green}modest hands into\",\n            \"{C:attention}earth-shaking triumphs, each multiplication {C:red}echoing through\",\n            \"the {C:blue}infinite gambling halls of the {X:purple,C:white}multiverse\",\n            \"\",\n            \"{X:chips,C:white}#4#{} to thy {C:attention}Apocalyptic Chips - {C:red}a doubling so {C:green}profound that it creates {C:blue}ripples in the {C:purple}space-time continuum of chance\",\n            \"{C:tarot}Legend tells that when this {C:attention}multiplier activates, the\",\n            \"{C:green}ghost of {X:green,C:white}Cardano{} can be heard {C:blue}cheering from beyond the\",\n            \"{C:red}veil of probability\",\n            \"\",\n            \"{C:attention}WARNING: The {C:purple}Vatican's Secret Gambling Division has classified this Joker as a '{C:red}Divine Intervention Level' artifact\",\n            \"{C:green}Prolonged exposure may cause:\",\n            \"{C:blue}- Spontaneous combustion of nearby poker chips\",\n            \"{C:red}- Unexplained appearance of royal flushes\",\n            \"{C:tarot}- Temporary omniscience regarding river cards\",\n            \"{C:purple}- Permanent alteration of local probability fields\",\n            \"\",\n            \"The {C:attention}Archdeacon of Blackjack has declared that {C:red}three (3) of these\",\n            \"Jokers constitutes a {C:blue}Class-X Miracle\",\n            \"and must be reported to the {C:green}International Luck Regulatory Board\",\n            \"\",\n            \"{C:tarot}Handle with reverence, for you wield {C:red}not merely a game piece,\",\n            \"but a {C:attention}fragment of the primordial chaos from which all\",\n            \"{C:purple}gambling was born. May your victories be {C:blue}legendary, your\",\n            \"{C:green}draws fortunate, and your opponents {C:red}forever in awe of your\",\n            \"{C:attention}divinely-enhanced statistical superiority\"\n        }\n    },\n    config = { extra = {} },\n    rarity = 4,\n    atlas = 'ModdedVanilla9',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = false,\n    eternal_compat = true,\n    config = {\n        extra = {\n            mult = 10,\n            chips = 50,\n            xmult = 1.5,\n            xchips = 2\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.mult,\n                card.ability.extra.chips,\n                card.ability.extra.xmult,\n                card.ability.extra.xchips\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            return {\n                mult = card.ability.extra.mult,\n                chips = card.ability.extra.chips,\n                xmult = card.ability.extra.xmult,\n                xchips = card.ability.extra.xchips,\n                card = card\n            }\n        end\n    end"
    },
    {
      "type": "Joker",
      "key": "wherethefuck",
      "atlas": "ModdedVanilla10",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "key = 'wherethefuck',\n    loc_txt = {\n        name = \"{f:tngt_DETERMINATION,s:2}GOD FUCKING DAMNIT {C:blue,f:tngt_DETERMINATION,s:2}KRIS{}\",\n        text = {\n            \"{f:tngt_DETERMINATION,X:mult,C:white}X2.75{} {f:tngt_DETERMINATION}Mult If played hand has exactly\",\n            \"{f:tngt_DETERMINATION,C:attention}4{} {f:tngt_DETERMINATION} cards of the same suit.\"\n        }\n    },\n    rarity = 4,\n    atlas = 'ModdedVanilla10',\n    pos = { x = 0, y = 1 },\n    soul_pos = { x = 4, y = 1 },\n    cost = 20,\n    unlocked = true,\n    discovered = true,\n    blueprint_compat = false,\n    eternal_compat = true,\n    config = {\n        extra = {\n            xmult = 2.75\n        }\n    },\n    loc_vars = function(self, info_queue, card)\n        return {\n            vars = {\n                card.ability.extra.xmult\n            }\n        }\n    end,\n    calculate = function(self, card, context)\n        if context.joker_main then\n            local suits_in_hand = {}\n\n            for _, playing_card in ipairs(context.scoring_hand) do\n                if not playing_card.debuff then -- Ignore debuffed cards\n                    for suit, _ in pairs(G.C.SUITS) do\n                        if playing_card:is_suit(suit) then\n                            suits_in_hand[suit] = true\n                        end\n                    end\n                end\n            end\n\n            local suit_count = 0\n            for _ in pairs(suits_in_hand) do\n                suit_count = suit_count + 1\n            end\n\n            if suit_count == 2 then\n                return {\n                    xmult = card.ability.extra.xmult,\n                    message = localize('k_two_suits'),\n                    colour = G.C.MULT\n                }\n            end\n        end\n    end"
    }
  ],
  "version": "no-tag"
}