{
  "locMap": {
    "b_picubed_wonderfuldeck": {
      "name": "Wonderful Deck",
      "text": [
        "Start with a",
        "{C:attention}Talking Flower{}"
      ],
      "type": "Back"
    },
    "b_picubed_myepicdeck": {
      "name": "my epic deck by pi_cubed",
      "text": [
        "{C:tarot}pi_cubed's Jokers{}' {C:attention}Jokers{} are",
        "{C:attention}3x{} more likely to appear"
      ],
      "type": "Back"
    },
    "b_picubed_rejuvinationdeck": {
      "name": "Rejuvination Deck",
      "text": [
        "Start with {C:attention}#1#{} Joker slots,",
        "{C:attention}+#2#{} slot after Boss Blind",
        "is defeated"
      ],
      "type": "Back"
    },
    "b_picubed_covetousdeck": {
      "name": "Covetous Deck",
      "text": [
        "Start with a {C:attention}#1#{},",
        "{C:attention}#2#{}, and {C:attention}#3#{}"
      ],
      "type": "Back"
    },
    "b_picubed_collectorsdeck": {
      "name": "Collector's Deck",
      "text": [
        "Start with a {C:attention}#1#{},",
        "{C:attention}#2#{}, and {C:attention}#3#{}"
      ],
      "type": "Back"
    },
    "j_picubed_itsaysjokerontheceiling": {
      "name": "It Says \"Joker\" on the Ceiling",
      "text": [
        "Round {C:chips}Chips{} to the next #1#,",
        "Round {C:mult}Mult{} to the next #2#"
      ],
      "type": "Joker"
    },
    "j_picubed_d2": {
      "name": "D2",
      "text": [
        "{C:green}#2# in #3#{} chance",
        "to give {C:mult}+#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_picubed_wordsearch": {
      "name": "Word Search",
      "text": [
        "This Joker gains {C:mult}+#2#{} Mult",
        "per scoring {C:attention}#1#{} card",
        "{s:0.8}Rank changes every round",
        "{C:inactive}(Currently {C:mult}+#3#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_picubed_moltenjoker": {
      "name": "Molten Joker",
      "text": [
        "Retrigger {C:attention}Gold{}, {C:attention}Steel{},",
        "and {C:attention}Stone{} cards"
      ],
      "type": "Joker"
    },
    "j_picubed_chisel": {
      "name": "Chisel",
      "text": [
        "If {C:attention}first{} played card",
        "is a {C:attention}Stone{} card, {C:attention}remove{}",
        "the enhancement and add",
        "{C:chips}+#1# {C:attention}bonus{} {C:attention}chips{} to the card"
      ],
      "type": "Joker"
    },
    "j_picubed_upgradedjoker": {
      "name": "Upgraded Joker",
      "text": [
        "Each played {C:attention}Enhanced card{}",
        "gives {C:chips}+#1#{} Chips and",
        "{C:mult}+#2#{} Mult when scored"
      ],
      "type": "Joker"
    },
    "j_picubed_jokinhood": {
      "name": "Jokin' Hood",
      "text": [
        "{C:attention}Non-face cards{} give {C:money}$#1#{}",
        "when scored, {C:attention}face cards{} give",
        "{C:money}$#2#{} when scored"
      ],
      "type": "Joker"
    },
    "j_picubed_prime7": {
      "name": "Prime 7",
      "text": [
        "If hand is a single {C:attention}7{},",
        "it becomes {C:dark_edition}Negative{}"
      ],
      "type": "Joker"
    },
    "j_picubed_landslide": {
      "name": "Landslide",
      "text": [
        "A random card held in hand",
        "becomes a {C:attention}Stone Card{}",
        "if {C:chips}Chips{} exceeds {C:mult}Mult",
        "after scoring"
      ],
      "type": "Joker"
    },
    "j_picubed_runnerup": {
      "name": "Runner-up",
      "text": [
        "{X:mult,C:white}X#1#{} Mult on {C:attention}second{}",
        "hand of round"
      ],
      "type": "Joker"
    },
    "j_picubed_oooshiny": {
      "name": "Ooo! Shiny!",
      "text": [
        "{C:dark_edition}Polychrome{} cards",
        "give {C:money}$#1#{} when scored"
      ],
      "type": "Joker"
    },
    "j_picubed_stonemason": {
      "name": "Stonemason",
      "text": [
        "{C:attention}Stone{} cards gain {X:mult,C:white}X#1#{} Mult",
        "when scored, Stone cards have a",
        "{C:green}#2# in #3#{} chance to be {C:attention}destroyed",
        "after scoring is finished"
      ],
      "type": "Joker"
    },
    "j_picubed_snakeeyes": {
      "name": "Snake Eyes",
      "text": [
        "When this card is {C:attention}sold{}, Joker",
        "to the {C:attention}left{} has its listed ",
        "{E:1,C:green}probabilities {C:attention}guaranteed",
        "{C:inactive}(ex: {C:green}1 in 6 {C:inactive}-> {C:green}1 in 1{C:inactive})"
      ],
      "type": "Joker"
    },
    "j_picubed_789": {
      "name": "7 8 9",
      "text": [
        "If played hand contains a {C:attention}scoring",
        "{C:attention}7 {}and {C:attention}9{}, {C:attention}destroy{} all scored {C:attention}9s{},",
        "and gain {X:mult,C:white}X#1#{} Mult per 9 scored",
        "{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_picubed_hiddengem": {
      "name": "Hidden Gem",
      "text": [
        "{C:attention}Discarded{} cards have a {C:green}#1# in #2#{}",
        "chance to be {C:attention}destroyed{} and",
        "create a {C:spectral}Spectral{} card",
        "{C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_picubed_ambigram": {
      "name": "Ambigram",
      "text": [
        "If this Joker is the {C:attention}left-most{},",
        "played {C:attention}6s{} become {C:attention}9s{}",
        "If this Joker is the {C:attention}right-most{},",
        "played {C:attention}9s{} become {C:attention}6s{}"
      ],
      "type": "Joker"
    },
    "j_picubed_superwrathfuljoker": {
      "name": "Super Wrathful Joker",
      "text": [
        "All played {C:spades}Spade{} cards",
        "become {C:attention}Kings{} when scored"
      ],
      "type": "Joker"
    },
    "j_picubed_acecomedian": {
      "name": "Ace Comedian",
      "text": [
        "Retrigger each played",
        "{C:attention}Ace{}, {C:attention}10{}, {C:attention}9{}, and {C:attention}8{}"
      ],
      "type": "Joker"
    },
    "j_picubed_advancedskipping": {
      "name": "Advanced Skipping",
      "text": [
        "Receive {C:attention}#1#{} additional random {C:attention}tags",
        "when blind is {C:attention}skipped{},",
        "{C:attention}+#2# tag{} after each skip",
        "{C:inactive}(Capped at current {}{C:attention}Ante{}{C:inactive}){}"
      ],
      "type": "Joker"
    },
    "j_picubed_echolocation": {
      "name": "Echolocation",
      "text": [
        "{C:attention}+#3#{} hand size,",
        "{C:green}#1# in #2#{} playing cards",
        "are drawn {C:attention}face down"
      ],
      "type": "Joker"
    },
    "j_picubed_shoppingtrolley": {
      "name": "Shopping Trolley",
      "text": [
        "{C:green}#1# in #2#{} chance for",
        "{C:attention}+#3#{} hand size",
        "in {C:attention}Booster Packs"
      ],
      "type": "Joker"
    },
    "j_picubed_extrapockets": {
      "name": "Extra Pockets",
      "text": [
        "{C:attention}+#1#{} hand size for",
        "each held {C:attention}Consumable"
      ],
      "type": "Joker"
    },
    "j_picubed_peartree": {
      "name": "Pear Tree",
      "text": [
        "{C:mult}+#1#{} Mult if cards",
        "{C:attention}held in hand{}",
        "contain a {C:attention}Pair"
      ],
      "type": "Joker"
    },
    "j_picubed_spectraljoker": {
      "name": "Spectral Joker",
      "text": [
        "After {C:attention}Boss Blind{} is",
        "defeated, create a",
        "free {C:attention}Ethereal Tag{}"
      ],
      "type": "Joker"
    },
    "j_picubed_siphon": {
      "name": "Siphon",
      "text": [
        "This Joker gains {C:chips}+#1#{} Chips",
        "when another Joker is {C:attention}sold",
        "or {C:attention}destroyed",
        "{C:inactive}(Currently {C:chips}+#2#{C:inactive} Chips)"
      ],
      "type": "Joker"
    },
    "j_picubed_inkjetprinter": {
      "name": "Inkjet Printer",
      "text": [
        "{C:attention}Consumables{} have a {C:green}#1# in #2#",
        "chance to be {C:attention}recreated{} on use,",
        "this card has a {C:green}#1# in #3#{} chance to",
        "be {C:attention}destroyed{} after activating",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Joker"
    },
    "j_picubed_blackjoker": {
      "name": "Black Joker",
      "text": [
        "If the {C:attention}sum rank{} of",
        "{C:attention}first{} played or discarded",
        "cards is {C:attention}#2#{}, earn {C:money}$#3#{}"
      ],
      "type": "Joker"
    },
    "j_picubed_bisexualflag_spectrums": {
      "name": "Bisexual Flag",
      "text": [
        "If {C:attention}played hand{} contains either",
        "a {C:attention}Straight{} and {C:attention}all four default{}",
        "{C:attention}suits{}, or a {C:attention}Straight Spectrum{},",
        "create 3 {C:dark_edition}Negative {C:purple}Tarot{} cards"
      ],
      "type": "Joker"
    },
    "j_picubed_bisexualflag": {
      "name": "Bisexual Flag",
      "text": [
        "If {C:attention}played hand{} contains a",
        "{C:attention}Straight{} and {C:attention}all four suits{},",
        "create 3 {C:dark_edition}Negative {C:purple}Tarot{} cards"
      ],
      "type": "Joker"
    },
    "j_picubed_tradein": {
      "name": "Trade-in",
      "text": [
        "Earn {C:money}$#1#{} when a",
        "playing card is",
        "{C:attention}destroyed"
      ],
      "type": "Joker"
    },
    "j_picubed_apartmentcomplex": {
      "name": "Apartment Complex",
      "text": [
        "This Joker gains {X:mult,C:white}X#1#{} Mult",
        "if {C:attention}played hand{} is a",
        "{C:attention}Flush House{}",
        "{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_picubed_incompletesurvey": {
      "name": "Incomplete Survey",
      "text": [
        "Earn {C:money}$#1#{} at start of round,",
        "{C:attention}final card{} drawn to hand is",
        "drawn {C:attention}face down{}"
      ],
      "type": "Joker"
    },
    "j_picubed_allin": {
      "name": "All In",
      "text": [
        "All {C:attention}face down{} cards and",
        "Jokers are retriggered",
        "{C:attention}#1#{} additional times",
        "{C:inactive}(except All In)"
      ],
      "type": "Joker"
    },
    "j_picubed_gottheworm": {
      "name": "Got the Worm",
      "text": [
        "{C:attention}Skipping{} a blind",
        "also gives {C:money}$#1#{}"
      ],
      "type": "Joker"
    },
    "j_picubed_extralimb": {
      "name": "Extra Limb",
      "text": [
        "{C:attention}+#1#{} Consumable Slots,",
        "{C:mult}+#2#{} Mult per held",
        "Consumable",
        "{C:inactive}(Currently {C:mult}+#3# {C:inactive}Mult)"
      ],
      "type": "Joker"
    },
    "j_picubed_perfectscore": {
      "name": "Perfect Score",
      "text": [
        "{C:chips}+#1# {}Chips if scoring",
        "hand contains a {C:attention}10{}"
      ],
      "type": "Joker"
    },
    "j_picubed_explosher": {
      "name": "Explosher",
      "text": [
        "After scoring is complete,",
        "give {C:attention}#1# {}random cards",
        "held in hand a {C:attention}random suit"
      ],
      "type": "Joker"
    },
    "j_picubed_rhythmicjoker": {
      "name": "Rhythmic Joker",
      "text": [
        "{C:mult}+#1#{} Mult if Hands",
        "remaining is {C:attention}even"
      ],
      "type": "Joker"
    },
    "j_picubed_goldenpancakes": {
      "name": "Golden Pancakes",
      "text": [
        "Earn {C:money}$#1#{} after hand is",
        "played, {C:green}#2# in #3#{} chance",
        "to be {C:attention}destroyed",
        "at end of round"
      ],
      "type": "Joker"
    },
    "j_picubed_preorderbonus": {
      "name": "Preorder Bonus",
      "text": [
        "Booster Packs",
        "cost {C:attention}#1#% less{}"
      ],
      "type": "Joker"
    },
    "j_picubed_preorderbonus_hookless": {
      "name": "Preorder Bonus",
      "text": [
        "After opening a",
        "Booster Pack, refund",
        "{C:attention}#1#%{} of the cost"
      ],
      "type": "Joker"
    },
    "j_picubed_waterbottle": {
      "name": "Water Bottle",
      "text": [
        "{C:chips}+#1#{} Chips for each",
        "Consumable used this {C:attention}Ante{}",
        "{C:inactive}(Currently {C:chips}+#2# {C:inactive}Chips)"
      ],
      "type": "Joker"
    },
    "j_picubed_currencyexchange": {
      "name": "Currency Exchange",
      "text": [
        "Cards held in hand",
        "give {C:mult}+#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_picubed_arrogantjoker": {
      "name": "Arrogant Joker",
      "text": [
        "{X:mult,C:white}X#1#{} Mult if this Joker",
        "is the {C:attention}left-most {}Joker"
      ],
      "type": "Joker"
    },
    "j_picubed_fusionmagic": {
      "name": "Fusion Magic",
      "text": [
        "After {C:attention}selling #1#{} {C:inactive}[#2#]{} {C:tarot}Tarot{} cards,",
        "create a {C:spectral}Spectral {}card",
        "{C:inactive}(Must have room)"
      ],
      "type": "Joker"
    },
    "j_picubed_supergreedyjoker": {
      "name": "Super Greedy Joker",
      "text": [
        "Create a random {C:attention}Editioned {}Joker",
        "when a {C:diamonds}Diamond {}card scores",
        "{C:inactive}(Must have room?)"
      ],
      "type": "Joker"
    },
    "j_picubed_pi": {
      "name": "Pi",
      "text": [
        "Cards with an {C:attention}edition{}",
        "give {X:mult,C:white}X#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_picubed_onbeat": {
      "name": "On-beat",
      "text": [
        "Retrigger the {C:attention}1st{}, {C:attention}3rd{},",
        "and {C:attention}5th{} cards played",
        "{s:0.8}After hand is played,",
        "{s:0.8}becomes {s:0.8,C:attention}Off-beat{}"
      ],
      "type": "Joker"
    },
    "j_picubed_offbeat": {
      "name": "Off-beat",
      "text": [
        "Retrigger the {C:attention}2nd{}",
        "and {C:attention}4th{} cards played",
        "{s:0.8}After hand is played,",
        "{s:0.8}becomes {s:0.8,C:attention}On-beat{}"
      ],
      "type": "Joker"
    },
    "j_picubed_polyrhythm": {
      "name": "Polyrhythm",
      "text": [
        "Receive {C:money}$#1#{} every {C:attention}#2#{} {C:inactive}[#4#]{}",
        "hands played, create a {C:tarot}Tarot{}",
        "card every {C:attention}#3#{} {C:inactive}[#5#]{} discards",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Joker"
    },
    "j_picubed_pot": {
      "name": "Pot",
      "text": [
        "{C:green}#1# in #2#{} chance for {X:mult,C:white}X#3#{} Mult,",
        "gives a {C:attention}cue{} if this Joker",
        "will activate for played hand",
        "{C:inactive}Currently #4#{}"
      ],
      "type": "Joker"
    },
    "j_picubed_supergluttonousjoker": {
      "name": "Super Gluttonous Joker",
      "text": [
        "When a {C:clubs}Club{} card is",
        "drawn to hand, draw an",
        "{C:attention}additional{} card to hand"
      ],
      "type": "Joker"
    },
    "j_picubed_mountjoker": {
      "name": "Mount Joker",
      "text": [
        "If played hand has at",
        "least 4 {C:attention}Stone{} cards,",
        "poker hand is your",
        "{C:attention}most played poker hand{}"
      ],
      "type": "Joker"
    },
    "j_picubed_oxplow": {
      "name": "Ox Plow",
      "text": [
        "Earn {C:money}$#1#{} if played",
        "hand is {C:attention}not{} your {C:attention}most{}",
        "{C:attention}played poker hand{}"
      ],
      "type": "Joker"
    },
    "j_picubed_offthehook": {
      "name": "Off the Hook",
      "text": [
        "After play, all",
        "{C:attention}unenhanced{} cards held",
        "in hand are discarded",
        "{C:chips}+#1#{} Hand"
      ],
      "type": "Joker"
    },
    "j_picubed_eyepatch": {
      "name": "Eye Patch",
      "text": [
        "This Joker gains {X:mult,C:white}X#2#{} Mult",
        "if {C:attention}poker hand{} has {C:attention}not{}",
        "been played this {C:attention}Ante{}, resets",
        "when {C:attention}Boss Blind{} is defeated",
        "{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult){}",
        "{s:0.8}#3#{}"
      ],
      "type": "Joker"
    },
    "j_picubed_timidjoker": {
      "name": "Timid Joker",
      "text": [
        "{C:mult}+#1#{} Mult if this Joker",
        "is the {C:attention}right-most{} Joker"
      ],
      "type": "Joker"
    },
    "j_picubed_rushedjoker": {
      "name": "Rushed Joker",
      "text": [
        "{C:attention}First{} card played",
        "gives {C:mult}+#1#{} Mult",
        "when scored"
      ],
      "type": "Joker"
    },
    "j_picubed_tyredumpyard": {
      "name": "Tyre Dumpyard",
      "text": [
        "When {C:attention}Boss Blind{} is selected,",
        "fill all Consumable slots",
        "with {C:attention}The Wheel of Fortune{}",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Joker"
    },
    "j_picubed_acorntree": {
      "name": "Acorn Tree",
      "text": [
        "When {C:attention}Blind{} is selected, all",
        "Jokers are {C:attention}flipped and{}",
        "{C:attention}shuffled{}, and earn {C:money}$#1#{} for",
        "each other Joker affected"
      ],
      "type": "Joker"
    },
    "j_picubed_forgery": {
      "name": "Forgery",
      "text": [
        "When {C:attention}Blind{} is selected,",
        "{C:attention}destroy{} 1 random card in",
        "{C:attention}deck{}, and add half its",
        "{C:chips}Chips{} to this Joker as {C:mult}Mult",
        "{C:inactive}(Currently {C:mult}+#1#{C:inactive} Mult)"
      ],
      "type": "Joker"
    },
    "j_picubed_yawningcat": {
      "name": "Yawning Cat",
      "text": [
        "If {C:attention}played hand{} contains",
        "at least {C:attention}#1#{} scoring",
        "cards, {C:attention}retrigger{} playing",
        "cards {C:attention}#2# additional times{}"
      ],
      "type": "Joker"
    },
    "j_picubed_weemini": {
      "name": "Wee Mini",
      "text": [
        "If played hand or cards held",
        "in hand contain a {C:attention}2{},",
        "played hand contains a",
        "{C:attention}Two Pair{} and apply {C:attention}Splash{}"
      ],
      "type": "Joker"
    },
    "j_picubed_lowballdraw": {
      "name": "Lowball Draw",
      "text": [
        "If scoring hand",
        "contains a {C:attention}2{}",
        "and a {C:attention}7{}, earn {C:money}$#1#{}"
      ],
      "type": "Joker"
    },
    "j_picubed_chickenjoker": {
      "name": "Chicken Joker!",
      "text": [
        "If scoring hand contains",
        "a {C:attention}Stone{} card or a {C:attention}Steel{}",
        "card, {C:attention}fill{} empty Joker",
        "slots with {C:dark_edition}Editioned{} {C:attention}Popcorn{}"
      ],
      "type": "Joker"
    },
    "j_picubed_shrapnel": {
      "name": "Shrapnel",
      "text": [
        "When a {C:attention}Consumable card{} is",
        "used, all playing cards in hand",
        "receive a {C:attention}permanent{} {C:mult}+#1#{} Mult"
      ],
      "type": "Joker"
    },
    "j_picubed_victimcard": {
      "name": "Victim Card",
      "text": [
        "This Joker gains {X:mult,C:white}X#1#{} Mult if",
        "played hand does {C:attention}not beat{} the",
        "blind, this Joker is {C:attention}destroyed{}",
        "after reaching {X:mult,C:white}X#2#{} Mult",
        "{C:inactive}(Currently{} {X:mult,C:white}X#3#{} {C:inactive}Mult){}"
      ],
      "type": "Joker"
    },
    "j_picubed_translucentjoker": {
      "name": "Translucent Joker",
      "text": [
        "After {C:attention}#1#{} rounds,",
        "sell this card to",
        "create an {C:attention}Invisible Joker{}",
        "{C:inactive}(Currently {}{C:attention}#2#{}{C:inactive}/#1# rounds){}"
      ],
      "type": "Joker"
    },
    "j_picubed_cyclone": {
      "name": "Cyclone",
      "text": [
        "Scored cards with a {C:attention}Seal{}",
        "create the {C:planet}Planet{} card of",
        "played {C:attention}poker hand{}"
      ],
      "type": "Joker"
    },
    "j_picubed_missingfinger": {
      "name": "Missing Finger",
      "text": [
        "{X:mult,C:white}X#1#{} Mult, {C:attention}#2#{} playing",
        "card {C:attention}selection limit{}",
        "for {C:blue}playing{} and {C:red}discarding{}"
      ],
      "type": "Joker"
    },
    "j_picubed_roundabout": {
      "name": "Round-a-bout",
      "text": [
        "Allows {C:attention}Straights{} to",
        "be made with both",
        "{C:attention}high and low ranks{}",
        "{C:inactive}(ex:{} {C:attention}3 2 A K Q{}{C:inactive}){}"
      ],
      "type": "Joker"
    },
    "j_picubed_hypemoments": {
      "name": "Hype Moments",
      "text": [
        "When {C:attention}Boss Blind{} is selected,",
        "create an {C:attention}Aura{}",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Joker"
    },
    "j_picubed_panicfire": {
      "name": "Panic Fire",
      "text": [
        "After Blind is selected, if a card",
        "is {C:attention}sold{} before play or discard,",
        "{X:mult,C:white}X#1#{} Mult for {C:attention}this round{}",
        "{C:inactive}(Currently #2#){}"
      ],
      "type": "Joker"
    },
    "j_picubed_nightvision": {
      "name": "Night Vision",
      "text": [
        "After Play, {C:attention}flip{} all cards in hand,",
        "earn {C:money}$#1#{} per card flipped",
        "{C:attention}face up{} by this Joker"
      ],
      "type": "Joker"
    },
    "j_picubed_talkingflower": {
      "name": "Talking Flower",
      "text": [
        "{C:dark_edition}+#1#{} Joker Slot,",
        "{C:mult}+#2#{} Mult"
      ],
      "type": "Joker"
    },
    "j_picubed_superlustyjoker": {
      "name": "Super Lusty Joker",
      "text": [
        "{C:attention}Retrigger{} played {C:hearts}Heart{} cards,",
        "{C:green}#2# in #3#{} chance to retrigger",
        "them {C:attention}#1#{} additional time"
      ],
      "type": "Joker"
    },
    "j_picubed_laserprinter": {
      "name": "Laser Printer",
      "text": [
        "{C:attention}Consumables{} have a {C:green}#1# in #2#{} chance",
        "to be {C:attention}recreated{} on use and a",
        "{C:green}#1# in #4#{} chance to be made {C:dark_edition}Negative{},",
        "this card has a {C:green}#1# in #3#{} ",
        "chance to be {C:attention}disabled{} for",
        "this Ante after activating",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Joker"
    },
    "c_picubed_commander": {
      "name": "Commander",
      "text": [
        "{C:attention}Destroy{} #1# random",
        "Consumable if slots are",
        "filled, add {C:dark_edition}Negative{}",
        "to all others"
      ],
      "type": "Spectral"
    },
    "c_picubed_rupture": {
      "name": "Rupture",
      "text": [
        "{C:attention}Destroy{} left-most Joker,",
        "create {C:attention}#1#{} random",
        "{C:spectral}Spectral{} cards"
      ],
      "type": "Spectral"
    },
    "c_picubed_extinction": {
      "name": "Extinction",
      "text": [
        "{C:attention}Destroy{} all cards of",
        "a {C:attention}random rank{}",
        "from your deck"
      ],
      "type": "Spectral"
    },
    "pnr_picubed_roof": {
      "name": "Roof",
      "text": [
        "{C:green}#2# in #3#{} chance to",
        "round {C:money}${} to the next {C:money}$#1#{},",
        "before end of round"
      ],
      "type": "Partner"
    },
    "pnr_picubed_refine": {
      "name": "Refine",
      "text": [
        "{C:attention}Enhanced{} cards gain",
        "{C:mult}+#1#{} when scored"
      ],
      "type": "Partner"
    },
    "pnr_picubed_copy": {
      "name": "Copy",
      "text": [
        "{C:attention}Consumables{} have a {C:green}#1# in #2#",
        "chance to be {C:attention}recreated{} on use,",
        "this card has a {C:green}#1# in #3#{} chance to",
        "be {C:attention}disabled{} for this Ante",
        "after activating",
        "{C:inactive}(Must have room){}"
      ],
      "type": "Partner"
    },
    "pnr_picubed_polymelia": {
      "name": "Polymelia",
      "text": [
        "{C:attention}+#1#{} Consumable Slots,",
        "held Consumables give",
        "{C:chips}+#2#{} Chips"
      ],
      "type": "Partner"
    },
    "picubedsjokers": {
      "name": "pi_cubed's Jokers",
      "text": [
        "A collection of vanilla-friendly Jokers made by yours truly.",
        "Follow me on bluesky at @picubed.bsky.social!",
        "Thanks franderman123 for Español (México) localization!"
      ],
      "type": "Mod"
    },
    "k_picubeds_pot_active": {
      "name": "\"Active!\"",
      "text": [],
      "type": "v_dictionary"
    },
    "k_picubeds_pot_inactive": {
      "name": "\"Inactive\"",
      "text": [],
      "type": "v_dictionary"
    },
    "k_picubeds_gullible": {
      "name": "\"Gullible!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_chisel": {
      "name": "\"Chisel!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_prime": {
      "name": "\"Prime!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_tumble": {
      "name": "\"Tumble!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_snakeeyes": {
      "name": "\"Snake Eyes!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_print": {
      "name": "\"Print!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_error": {
      "name": "\"Error!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_pride": {
      "name": "\"Pride!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_slosh": {
      "name": "\"Slosh!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_swap": {
      "name": "\"Swap!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_pot_ready": {
      "name": "\"Ready?\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_pot_hit": {
      "name": "\"Hit!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_pot_miss": {
      "name": "\"Miss...\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_club": {
      "name": "\"Club!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_spade": {
      "name": "\"Spade!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_diamond": {
      "name": "\"Diamond!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_offthehook": {
      "name": "\"Hooked!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_victimcard": {
      "name": "\"Revoked!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_panicfire_ready": {
      "name": "\"Ready!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_fixed": {
      "name": "\"Fixed!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_active": {
      "name": "\"Active!\"",
      "text": [],
      "type": "dictionary"
    },
    "k_picubeds_inactive": {
      "name": "\"Inactive\"",
      "text": [],
      "type": "dictionary"
    },
    "config_picubeds_newspectrals": {
      "name": "\"New Spectral Cards (restart required)\"",
      "text": [],
      "type": "dictionary"
    },
    "config_picubeds_preorderhook": {
      "name": "\"Preorder Bonus' hook (disable for better compatibility",
      "text": [],
      "type": "dictionary"
    },
    "config_picubeds_customsfx": {
      "name": "\"Custom Sound Effects (restart required)\"\r\n        ",
      "text": [],
      "type": "dictionary"
    }
  },
  "atlases": {
    "modicon": {
      "path": "picubedsicon.png",
      "px": 32,
      "py": 32,
      "localPath": "/wiki-data/pi_cubeds_jokers@pi-cubed-cat/v1.3.0c-beta/picubedsicon.png",
      "resolvedGitHubPath": "assets/1x/picubedsicon.png"
    },
    "PiCubedsJokers": {
      "path": "picubedsjokers.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/pi_cubeds_jokers@pi-cubed-cat/v1.3.0c-beta/picubedsjokers.png",
      "resolvedGitHubPath": "assets/1x/picubedsjokers.png"
    },
    "picubedsdeck": {
      "path": "picubedsdeck.png",
      "px": 71,
      "py": 95,
      "localPath": "/wiki-data/pi_cubeds_jokers@pi-cubed-cat/v1.3.0c-beta/picubedsdeck.png",
      "resolvedGitHubPath": "assets/1x/picubedsdeck.png"
    },
    "picubed_partners": {
      "path": "picubedspartner.png",
      "px": 46,
      "py": 58,
      "localPath": "/wiki-data/pi_cubeds_jokers@pi-cubed-cat/v1.3.0c-beta/picubedspartner.png",
      "resolvedGitHubPath": "assets/1x/picubedspartner.png"
    },
    "picubed_tags": {
      "path": "picubedstag.png",
      "px": 34,
      "py": 34,
      "localPath": "/wiki-data/pi_cubeds_jokers@pi-cubed-cat/v1.3.0c-beta/picubedstag.png",
      "resolvedGitHubPath": "assets/1x/picubedstag.png"
    }
  },
  "cards": [
    {
      "type": "Atlas",
      "key": "modicon",
      "atlas": null,
      "pos": null,
      "raw": "key = 'modicon',\r\n  path = 'picubedsicon.png',\r\n  px = 32,\r\n  py = 32"
    },
    {
      "type": "Atlas",
      "key": "PiCubedsJokers",
      "atlas": null,
      "pos": null,
      "raw": "key = \"PiCubedsJokers\",\r\n  path = \"picubedsjokers.png\",\r\n  px = 71,\r\n  py = 95"
    },
    {
      "type": "Atlas",
      "key": "picubedsdeck",
      "atlas": null,
      "pos": null,
      "raw": "key = \"picubedsdeck\",\r\n  path = \"picubedsdeck.png\",\r\n  px = 71,\r\n  py = 95"
    },
    {
      "type": "Joker",
      "key": "itsaysjokerontheceiling",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "--It Says \"Joker\" on the Ceiling\r\n  key = 'itsaysjokerontheceiling',\r\n  loc_txt = {\r\n    name = 'It Says \"Joker\" on the Ceiling',\r\n    text = {\r\n      \"Round {C:chips}Chips{} to the next #1#,\", \r\n      \"Round {C:mult}Mult{} to the next #2#\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 0 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.chips_ceil, card.ability.extra.mult_ceil } }\r\n  end,\r\n  config = { extra = { chips = 0, mult = 0, chips_ceil = 100, mult_ceil = 10 } },\r\n  calculate = function(self, card, context)\r\n    local mult_ceil = 0\r\n    local chips_ceil = 0\r\n    if context.joker_main then\r\n      if mult < to_big(1e+308) then\r\n        mult_ceil = math.ceil(to_number(mult) / card.ability.extra.mult_ceil) * card.ability.extra.mult_ceil\r\n        card.ability.extra.mult = mult_ceil - to_number(mult)\r\n      end \r\n      if hand_chips < to_big(1e+308) then\r\n        chips_ceil = math.ceil(to_number(hand_chips) / card.ability.extra.chips_ceil) * card.ability.extra.chips_ceil\r\n        card.ability.extra.chips = chips_ceil - to_number(hand_chips)\r\n      end\r\n      return {\r\n        colour = G.C.PURPLE,\r\n        message = localize(\"k_picubeds_gullible\"),\r\n        remove_default_message = true,\r\n        chips = card.ability.extra.chips,\r\n        mult = card.ability.extra.mult\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "d2",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "--D2\r\n  key = 'd2',\r\n  loc_txt = {\r\n    name = 'D2',\r\n    text = {\r\n      \"{C:green}#2# in #3#{} chance\", \r\n      \"to give {C:mult}+#1#{} Mult\"\r\n    }\r\n  },\r\n  config = { extra = { mult = 20, odds = 2 } },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 0 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult, \r\n        (G.GAME.probabilities.normal or 1), \r\ncard.ability.extra.odds } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      if pseudorandom('D2'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n        return {\r\n          mult_mod = card.ability.extra.mult,\r\n          message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult } }\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "wordsearch",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "--Word Search\r\n  key = 'wordsearch',\r\n  loc_txt = {\r\n    name = 'Word Search',\r\n    text = {\r\n      \"This Joker gains {C:mult}+#2#{} Mult\",\r\n      \"per scoring {C:attention}#1#{} card\",\r\n      \"{s:0.8}Rank changes every round\",\r\n      \"{C:inactive}(Currently {C:mult}+#3#{C:inactive} Mult)\"\r\n    }\r\n  },\r\n  config = { extra = { mult = 0, mult_mod = 1 }},\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 0 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  \r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { \r\n      localize((G.GAME.current_round.picubed_wordsearch_card or {}).rank or 'Ace', 'ranks'), card.ability.extra.mult_mod, card.ability.extra.mult \r\n    } }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.individual and context.cardarea == G.play and not \r\n    SMODS.has_no_rank(context.other_card) then\r\n      if \r\n        context.other_card:get_id() == G.GAME.current_round.picubed_wordsearch_card.id\r\n        and not context.blueprint \r\n        and not context.other_card.debuff then\r\n          card.ability.extra.mult = card.ability.extra.mult + card.ability.extra.mult_mod\r\n          return {\r\n            message = localize('k_upgrade_ex'),\r\n            colour = G.C.MULT,\r\n            card = card\r\n          }\r\n      end\r\n    end\r\n    if context.joker_main and card.ability.extra.mult > 0 then\r\n      return {\r\n        message = localize{type='variable', key='a_mult', vars = {card.ability.extra.mult} },\r\n        mult_mod = card.ability.extra.mult, \r\n        colour = G.C.MULT\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "moltenjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "--Molten Joker\r\n  key = 'moltenjoker',\r\n  loc_txt = {\r\n    name = 'Molten Joker',\r\n    text = {\r\n      \"Retrigger {C:attention}Gold{}, {C:attention}Steel{},\", \r\n      \"and {C:attention}Stone{} cards\"\r\n    }\r\n  },\r\n  config = { extra = { repetitions = 1 } },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 0 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  in_pool = function(self, args)\r\n    for kk, vv in pairs(G.playing_cards or {}) do\r\n        if SMODS.has_enhancement(vv, 'm_stone') or SMODS.has_enhancement(vv, 'm_gold') or SMODS.has_enhancement(vv, 'm_steel') then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\n  end,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_gold\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_steel\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    return {\r\n      vars = { card.ability.max_highlighted}\r\n    }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then\r\n      if SMODS.has_enhancement(context.other_card, 'm_stone') or SMODS.has_enhancement(context.other_card, 'm_gold')\r\n      or SMODS.has_enhancement(context.other_card, 'm_steel') then\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize('k_again_ex'),\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n    if context.cardarea == G.hand and context.repetition and not context.repetition_only then\r\n      if SMODS.has_enhancement(context.other_card, 'm_stone') or SMODS.has_enhancement(context.other_card, 'm_gold')\r\n      or SMODS.has_enhancement(context.other_card, 'm_steel') then\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize('k_again_ex'),\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n\t\t\t\t}\r\n      end\r\n    end\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "chisel",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "--Chisel\r\n  key = 'chisel',\r\n  loc_txt = {\r\n    name = 'Chisel',\r\n    text = {\r\n      \"If {C:attention}first{} played card\",\r\n      \"is a {C:attention}Stone{} card, {C:attention}remove{}\", \r\n      \"the enhancement and add\",\r\n      \"{C:chips}+#1# {C:attention}bonus{} {C:attention}chips{} to the card\"\r\n    }\r\n  },\r\n  config = { extra = { big_bonus = 50 } },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 0 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  enhancement_gate = 'm_stone',\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    return {\r\n      vars = { card.ability.extra.big_bonus, card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.individual and not context.blueprint then\r\n      if context.other_card == context.scoring_hand[1] and SMODS.has_enhancement(context.other_card, 'm_stone') then\r\n        if not context.other_card.debuff then \r\n          context.other_card:set_ability(G.P_CENTERS.c_base, nil, true)\r\n          context.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus or 0 --initialises a permanent chips value\r\n          context.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus + card.ability.extra.big_bonus --add permanent chips to playing card\r\n          return {\r\n                message = localize(\"k_picubeds_chisel\"),\r\n                colour = G.C.CHIPS\r\n          }\r\n        end\r\n      end\r\n    end\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "upgradedjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 0
      },
      "raw": "--Upgraded Joker\r\n  key = 'upgradedjoker',\r\n  loc_txt = {\r\n    name = 'Upgraded Joker',\r\n    text = {\r\n      \"Each played {C:attention}Enhanced card{}\",\r\n\t\t\t\"gives {C:chips}+#1#{} Chips and\",\r\n\t\t\t\"{C:mult}+#2#{} Mult when scored\"\r\n    }\r\n  },\r\n  config = { extra = { chips = 10, mult = 4 } },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 0 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n\t\treturn { vars = { card.ability.extra.chips, card.ability.extra.mult } }\r\n\tend,\r\n  calculate = function(self, card, context)\r\n\t\tif context.individual and context.cardarea == G.play then\r\n      if (context.other_card.config.center ~= G.P_CENTERS.c_base or SMODS.get_enhancements(context.other_card)[\"m_lucky\"] == true) and not context.other_card.debuff then\r\n        return {\r\n          chips = card.ability.extra.chips,\r\n\t\t\t\t\tmult = card.ability.extra.mult,\r\n\t\t\t\t\tcard = card\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "jokinhood",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 0
      },
      "raw": "--Jokin' Hood\r\n  key = 'jokinhood',\r\n  loc_txt = {\r\n    name = \"Jokin' Hood\",\r\n    text = {\r\n      \"{C:attention}Non-face cards{} give {C:money}$#1#{}\",\r\n      \"when scored, {C:attention}face cards{} give\",\r\n      \"{C:money}$#2#{} when scored\"\r\n    }\r\n  },\r\n  config = { extra = { num_money = 1, face_money = -2 } },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 0 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n\t\treturn { vars = { card.ability.extra.num_money, card.ability.extra.face_money } }\r\n\tend,\r\n  calculate = function(self, card, context)\r\n\t\tif context.individual and context.cardarea == G.play then\r\n      if ((not context.other_card:is_face()) or #find_joker('j_ortalab_hypercalculia') > 0) and not context.other_card.debuff then\r\n        return {\r\n\t\t\t\t\tdollars = card.ability.extra.num_money,\r\n          card = card\r\n\t\t\t\t}\r\n      else\r\n        return {\r\n          dollars = card.ability.extra.face_money,\r\n          card = card\r\n        }\r\n\t\t\tend\r\n\t\tend\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "prime7",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 0
      },
      "raw": "--Prime 7\r\n  key = 'prime7',\r\n  loc_txt = {\r\n    name = \"Prime 7\",\r\n    text = {\r\n      \"If hand is a single {C:attention}7{},\",\r\n      \"it becomes {C:dark_edition}Negative{}\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 0 },\r\n  soul_pos = { x = 3, y = 3},\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n      info_queue[#info_queue+1] = {key = 'e_negative_playing_card', set = 'Edition', config = {extra = G.P_CENTERS['e_negative'].config.card_limit} }\r\n    return {\r\n      vars = { card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n\t\tif not context.blueprint and context.before then \r\n      if #context.full_hand == 1 then\r\n        for k, v in ipairs(context.scoring_hand) do\r\n          if not v.debuff and v.base.value == '7' then \r\n            v:set_edition('e_negative', false, true)\r\n            G.E_MANAGER:add_event(Event({\r\n              func = function()\r\n                  v:juice_up()\r\n                  return true\r\n              end\r\n            }))\r\n            return {\r\n              colour = G.C.PURPLE,\r\n              message = localize(\"k_picubeds_prime\"),\r\n              card = card\r\n            }\r\n          end\r\n        end\r\n      end\r\n    end\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "landslide",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 0
      },
      "raw": "--Landslide\r\n  key = 'landslide',\r\n  loc_txt = {\r\n    name = 'Landslide',\r\n    text = {\r\n      \"A random card held in hand\",\r\n      \"becomes a {C:attention}Stone Card{}\",\r\n      \"if {C:chips}Chips{} exceeds {C:mult}Mult\",\r\n      \"after scoring\"\r\n    }\r\n  },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 0 },\r\n  cost = 5,\r\n  rarity = 1,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    return {\r\n      vars = { card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n\t\tif context.cardarea == G.jokers and context.after then \r\n      if hand_chips > mult and #G.hand.cards >= 1 then\r\n        local rndcard = pseudorandom_element(G.hand.cards, pseudoseed('Landslide'..G.GAME.round_resets.ante))\r\n        if not SMODS.has_enhancement(rndcard, 'm_stone') then\r\n          rndcard:set_ability(G.P_CENTERS.m_stone, nil, true)\r\n          G.E_MANAGER:add_event(Event({\r\n              func = function()\r\n                  rndcard:juice_up()\r\n                  return true\r\n              end\r\n          }))\r\n          return {\r\n            message = localize(\"k_picubeds_tumble\")\r\n            }\r\n        else\r\n          G.E_MANAGER:add_event(Event({\r\n              func = function()\r\n                  rndcard:juice_up()\r\n                  return true\r\n              end\r\n          }))\r\n        end\r\n      end\r\n    end\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "runnerup",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 0
      },
      "raw": "--Runner-up\r\n  key = 'runnerup',\r\n  loc_txt = {\r\n    name = 'Runner-up',\r\n    text = {\r\n      \"{X:mult,C:white}X#1#{} Mult on {C:attention}second{}\",\r\n      \"hand of round\"\r\n    }\r\n  },\r\n  config = { extra = { Xmult = 2 } },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 0 },\r\n  cost = 6,\r\n  rarity = 2,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    return {\r\n      vars = { card.ability.extra.Xmult }\r\n    }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main and G.GAME.current_round.hands_played == 1 then\r\n      return {\r\n\t\t\t\tmessage = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n\t\t\t\tXmult_mod = card.ability.extra.Xmult\r\n\t\t\t}\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "oooshiny",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 1
      },
      "raw": "--Ooo! Shiny!\r\n  key = 'oooshiny',\r\n  loc_txt = {\r\n    name = 'Ooo! Shiny!',\r\n    text = {\r\n      \"{C:dark_edition}Polychrome{} cards\",\r\n      \"give {C:money}$#1#{} when scored\"\r\n    }\r\n  },\r\n  config = { extra = { money = 7 } },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 1 },\r\n  cost = 7,\r\n  rarity = 2,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  in_pool = function(self, args)\r\n    for kk, vv in pairs(G.playing_cards or {}) do\r\n        if vv.edition then\r\n            if vv.edition.key == 'e_polychrome' then\r\n                return true\r\n            end\r\n        end\r\n    end \r\n    for kk, vv in pairs(G.jokers.cards or {}) do\r\n        if vv.edition then\r\n            if vv.edition.key == 'e_polychrome' then\r\n                return true\r\n            end\r\n        end\r\n    end\r\n    return false\r\n  end,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.e_polychrome\r\n    return {\r\n      vars = { card.ability.extra.money, card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  calculate = function(self, card, context)\r\n\t\tif context.individual and context.cardarea == G.play then\r\n      if context.other_card.edition and context.other_card.edition.key == 'e_polychrome' \r\n      and (not context.other_card.debuff) then\r\n        return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n        }\r\n      end\r\n\t\tend\r\n    if context.other_joker and context.other_joker.edition then\r\n\t\t\tif context.other_joker.edition.key == 'e_polychrome'\r\n\t\t\tand (not context.other_joker.debuff) then\r\n        return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n        }\r\n      end\r\n\t\tend\r\n\tend"
    },
    {
      "type": "Joker",
      "key": "stonemason",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 1
      },
      "raw": "--Stonemason\r\n  key = 'stonemason',\r\n  loc_txt = {\r\n    name = 'Stonemason',\r\n    text = {\r\n      \"{C:attention}Stone{} cards gain {X:mult,C:white}X#1#{} Mult\",\r\n      \"when scored, Stone cards have a\",\r\n      \"{C:green}#2# in #3#{} chance to be {C:attention}destroyed\",\r\n      \"after scoring is finished\"\r\n    }\r\n  },\r\n  config = { extra = { Xmult_bonus = 0.25, odds = 6 } },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 1 },\r\n  cost = 8,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  enhancement_gate = 'm_stone',\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    return {\r\n      vars = { card.ability.extra.Xmult_bonus, (G.GAME.probabilities.normal or 1), card.ability.extra.odds, card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.individual and context.cardarea == G.play then\r\n      if SMODS.has_enhancement(context.other_card, 'm_stone') then\r\n        context.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult or 1 \r\n        context.other_card.ability.perma_x_mult = context.other_card.ability.perma_x_mult +     card.ability.extra.Xmult_bonus\r\n        return {\r\n          message = localize(\"k_upgrade_ex\"),\r\n          colour = G.C.MULT,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n    if context.destroying_card and context.cardarea == G.play and not context.blueprint then\r\n      if SMODS.has_enhancement(context.destroying_card, 'm_stone') then\r\n        if pseudorandom('stonemason'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n          return {\r\n            remove = true\r\n          }\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "snakeeyes",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 1
      },
      "raw": "--Snake Eyes\r\n  key = 'snakeeyes',\r\n  loc_txt = {\r\n    name = 'Snake Eyes',\r\n    text = {\r\n      \"When this card is {C:attention}sold{}, Joker\",\r\n      \"to the {C:attention}left{} has its listed \",\r\n      \"{E:1,C:green}probabilities {C:attention}guaranteed\",\r\n      \"{C:inactive}(ex: {C:green}1 in 6 {C:inactive}-> {C:green}1 in 1{C:inactive})\"\r\n      \r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 1 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  pools = { [\"Meme\"] = true },\r\n  calculate = function(self, card, context)\r\n    if #G.jokers.cards ~= 1 and not context.blueprint and context.selling_self then\r\n      local joker_left = joker_left or 0\r\n      for i=1, #G.jokers.cards do -- determining which joker is left of card\r\n        if G.jokers.cards[i] == card and i ~= 1 then\r\n          joker_left = G.jokers.cards[i - 1]\r\n        end\r\n      end\r\n      \r\n      if joker_left ~= 0 and type(joker_left.ability.extra) == 'table' then\r\n        if joker_left.ability.name == 'j_picubed_inkjetprinter' then -- Exception for Inkjet Printer (insert other Jokers with multiple probabilities here)\r\n          joker_left.ability.extra.copy_odds = 1\r\n          joker_left.ability.extra.destroy_odds = 1\r\n          return {\r\n            message = localize(\"k_picubeds_snakeeyes\"),\r\n            card = card\r\n          }\r\n        elseif joker_left.ability.name == 'j_picubed_laserprinter' then -- Exception for Laser Printer\r\n          joker_left.ability.extra.copy_odds = 1\r\n          joker_left.ability.extra.destroy_odds = 1\r\n          joker_left.ability.extra.negative_odds = 1\r\n          return {\r\n            message = localize(\"k_picubeds_snakeeyes\"),\r\n            card = card\r\n          }\r\n        elseif joker_left.ability.extra.odds then\r\n          joker_left.ability.extra.odds = 1\r\n          return {\r\n            message = localize(\"k_picubeds_snakeeyes\"),\r\n            card = card\r\n          }\r\n        end\r\n      elseif joker_left ~= 0 and type(joker_left.ability.extra) == 'number' then --this may cause funny shit to happen\r\n        joker_left.ability.extra = 1\r\n        return {\r\n            message = localize(\"k_picubeds_snakeeyes\"),\r\n            card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "789",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 1
      },
      "raw": "--7 8 9\r\n  key = '789',\r\n  loc_txt = {\r\n    name = '7 8 9',\r\n    text = {\r\n      \"If played hand contains a {C:attention}scoring\",\r\n      \"{C:attention}7 {}and {C:attention}9{}, {C:attention}destroy{} all scored {C:attention}9s{},\",\r\n      \"and gain {X:mult,C:white}X#1#{} Mult per 9 scored\",\r\n      \"{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 1 },\r\n  cost = 7,\r\n  config = { extra = { Xmult_mod = 0.3, Xmult = 1 } },\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult_mod, card.ability.extra.Xmult} }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.individual and context.cardarea == G.play then\r\n      local has_7 = false\r\n      for k,v in ipairs(context.scoring_hand) do\r\n        if v:get_id() == 7 then\r\n          has_7 = true\r\n        end\r\n      end\r\n      if has_7 == true then\r\n        if context.other_card:get_id() == 9 and not context.blueprint \r\n        and not context.other_card.debuff then\r\n          card.ability.extra.Xmult = card.ability.extra.Xmult + card.ability.extra.Xmult_mod\r\n          return {\r\n            message = localize('k_upgrade_ex'),\r\n            colour = G.C.MULT,\r\n            card = card\r\n          }\r\n        end\r\n      end\r\n    end\r\n    if context.joker_main and card.ability.extra.Xmult > 1 then\r\n      return {\r\n        message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n        Xmult_mod = card.ability.extra.Xmult, \r\n        colour = G.C.MULT\r\n      }\r\n    end\r\n    if context.destroying_card and context.cardarea == G.play and not context.blueprint then\r\n      local has_7 = false\r\n      for k,v in ipairs(context.scoring_hand) do\r\n        if v:get_id() == 7 then\r\n          has_7 = true\r\n        end\r\n      end\r\n      if has_7 == true then\r\n        if context.destroying_card:get_id() == 9 and not context.destroying_card.debuff then\r\n          return {\r\n            remove = true\r\n          }\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "hiddengem",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 1
      },
      "raw": "--Hidden Gem\r\n  key = 'hiddengem',\r\n  loc_txt = {\r\n    name = 'Hidden Gem',\r\n    text = {\r\n      \"{C:attention}Discarded{} cards have a {C:green}#1# in #2#{}\",\r\n      \"chance to be {C:attention}destroyed{} and\",\r\n      \"create a {C:spectral}Spectral{} card\",\r\n      \"{C:inactive}(Must have room)\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 1 },\r\n  cost = 8,\r\n  config = { extra = { odds = 15 } },\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds} }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.discard then\r\n      if not context.other_card.debuff and not context.blueprint then\r\n        if pseudorandom('hiddengem'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n          if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\r\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n            G.E_MANAGER:add_event(Event({\r\n                trigger = 'before',\r\n                delay = 0.0,\r\n                func = (function()\r\n                        local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sixth')\r\n                        card:add_to_deck()\r\n                        G.consumeables:emplace(card)\r\n                        G.GAME.consumeable_buffer = 0\r\n                    return true\r\n                end)}))\r\n            return {\r\n              message = localize('k_plus_spectral'),\r\n              colour = G.C.SECONDARY_SET.Spectral,\r\n              card = card,\r\n              remove = true\r\n            }\r\n          else\r\n            return {\r\n              remove = true\r\n            }\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "ambigram",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 1
      },
      "raw": "--Ambigram\r\n  key = 'ambigram',\r\n  loc_txt = {\r\n    name = 'Ambigram',\r\n    text = {\r\n      \"If this Joker is the {C:attention}left-most{},\",\r\n      \"played {C:attention}6s{} become {C:attention}9s{},\",\r\n      \"If this Joker is the {C:attention}right-most{},\",\r\n      \"Played {C:attention}9s{} become {C:attention}6s{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 1 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  calculate = function(self, card, context)\r\n    if context.before and context.cardarea == G.jokers and not context.blueprint then\r\n      local has_69 = false\r\n      for k, v in ipairs(context.full_hand) do\r\n        if not v.debuff then\r\n          if v.base.value == '6' and G.jokers.cards[1] == card then\r\n            v:juice_up()\r\n            has_69 = true\r\n            assert(SMODS.change_base(v, nil, '9'))\r\n          elseif v.base.value == '9' and G.jokers.cards[#G.jokers.cards] == card then\r\n            v:juice_up()\r\n            has_69 = true\r\n            assert(SMODS.change_base(v, nil, '6'))\r\n          end\r\n        end\r\n      end\r\n      if has_69 then\r\n        has_69 = false\r\n        if G.GAME.blind.config.blind.key == (\"bl_pillar\") then\r\n          for k, v in ipairs(context.scoring_hand) do\r\n            v.debuff = false\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "superwrathfuljoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 1
      },
      "raw": "--Super Wrathful Joker\r\n  key = 'superwrathfuljoker',\r\n  loc_txt = {\r\n    name = 'Super Wrathful Joker',\r\n    text = {\r\n      \"All played {C:spades}Spade{} cards\",\r\n      \"become {C:attention}Kings{} when scored\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 1 },\r\n  cost = 9,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  calculate = function(self, card, context)\r\n    if context.before and context.cardarea == G.jokers and not context.blueprint then\r\n      local has_spades = false\r\n      for k, v in ipairs(context.scoring_hand) do\r\n        if not v.debuff then\r\n          if v:is_suit(\"Spades\") then\r\n            has_spades = true\r\n            v:juice_up()\r\n            assert(SMODS.change_base(v, nil, 'King'))\r\n          end\r\n        end\r\n      end\r\n      if has_spades then\r\n        has_spades = false\r\n        if G.GAME.blind.config.blind.key == (\"bl_pillar\") then\r\n          for k, v in ipairs(context.scoring_hand) do\r\n            v.debuff = false\r\n          end\r\n        end\r\n        return {\r\n            message = localize(\"k_picubeds_spade\"),\r\n            card = card,\r\n            colour = G.C.SUITS[\"Spades\"]\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "acecomedian",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 1
      },
      "raw": "--Ace Comedian\r\n  key = 'acecomedian',\r\n  loc_txt = {\r\n    name = 'Ace Comedian',\r\n    text = {\r\n      \"Retrigger each played\",\r\n      \"{C:attention}Ace{}, {C:attention}10{}, {C:attention}9{}, and {C:attention}8{}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  config = { extra = { repetitions = 1 } },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 1 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then\r\n      if \r\n      context.other_card:get_id() == 8 or\r\n      context.other_card:get_id() == 9 or\r\n      context.other_card:get_id() == 10 or\r\n      context.other_card:get_id() == 14 then\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize('k_again_ex'),\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "advancedskipping",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 1
      },
      "raw": "--Advanced Skipping\r\n  key = 'advancedskipping',\r\n  loc_txt = {\r\n    name = 'Advanced Skipping',\r\n    text = {\r\n      \"Receive {C:attention}#1#{} additional random {C:attention}tags\",\r\n      \"when blind is {C:attention}skipped{},\",\r\n      \"{C:attention}+#2# tag{} after each skip\",\r\n      \"{C:inactive}(Capped at current {}{C:attention}Ante{}{C:inactive}){}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 1 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { add_tags = 1, add_tags_mod = 1} },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.add_tags, card.ability.extra.add_tags_mod} }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.skip_blind and not context.blueprint then\r\n      --code below taken from Ortalab's Recycled Enhancement\r\n      local tag_pool = get_current_pool('Tag')\r\n      for i=1,card.ability.extra.add_tags do     \r\n        local selected_tag = pseudorandom_element(tag_pool, pseudoseed('advancedskipping'..G.GAME.round_resets.ante))\r\n        local it = 1\r\n        while selected_tag == 'UNAVAILABLE' do\r\n            it = it + 1\r\n            selected_tag = pseudorandom_element(tag_pool, pseudoseed('advancedskipping'..it..G.GAME.round_resets.ante))\r\n        end\r\n        if selected_tag ~= 'tag_orbital' then\r\n          add_tag(Tag(selected_tag))\r\n        else --i can't be assed dealing with orbital tag rn\r\n          add_tag(Tag('tag_meteor'))\r\n        end\r\n      end\r\n      card:juice_up()\r\n      if G.GAME.round_resets.ante > card.ability.extra.add_tags then\r\n        card.ability.extra.add_tags = card.ability.extra.add_tags + card.ability.extra.add_tags_mod\r\n        return {\r\n          message = localize('k_upgrade_ex'),\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "echolocation",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 1
      },
      "raw": "--Echolocation\r\n  key = 'echolocation',\r\n  loc_txt = {\r\n    name = 'Echolocation',\r\n    text = {\r\n      \"{C:attention}+#3#{} hand size,\",\r\n      \"{C:green}#1# in #2#{} playing cards\",\r\n      \"are drawn {C:attention}face down\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 1 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { odds = 5, hand_increase = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.odds, card.ability.extra.hand_increase} }\r\n  end,\r\n  \r\n  add_to_deck = function(self, card, from_debuff)\r\n\t\tG.hand:change_size(card.ability.extra.hand_increase)\r\n\tend,\r\n\r\n\tremove_from_deck = function(self, card, from_debuff)\r\n\t\tG.hand:change_size(-card.ability.extra.hand_increase)\r\n\tend,\r\n  \r\n  calculate = function(self, card, context)\r\n    if not context.blueprint then\r\n      if context.stay_flipped then\r\n        if pseudorandom(pseudoseed('echolocation'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal / card.ability.extra.odds then\r\n          return { stay_flipped = true }\r\n        end\r\n        -- else return { stay_flipped = false }\r\n      end\r\n    end\r\n    if context.cardarea == G.jokers and context.before then\r\n      for k, v in ipairs(context.full_hand) do\r\n        if v.facing == 'back' then\r\n          v:flip()\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "shoppingtrolley",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 2
      },
      "raw": "--Shopping Trolley\r\n  key = 'shoppingtrolley',\r\n  loc_txt = {\r\n    name = 'Shopping Trolley',\r\n    text = {\r\n      \"{C:green}#1# in #2#{} chance for\",\r\n      \"{C:attention}+#3#{} hand size\",\r\n      \"in {C:attention}Booster Packs\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 2 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { odds = 4, hand_increase = 5, trolley_success = 0 } },\r\n  pools = { [\"Meme\"] = true },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (G.GAME.probabilities.normal or 1)*3, card.ability.extra.odds, card.ability.extra.hand_increase} }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.open_booster and not context.blueprint then\r\n      if card.ability.extra.trolley_success == 1 then\r\n        card.ability.extra.trolley_success = 0\r\n        G.hand:change_size(-card.ability.extra.hand_increase)\r\n      end\r\n      if pseudorandom(pseudoseed('shoppingtrolley'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal*3 / card.ability.extra.odds then\r\n        card.ability.extra.trolley_success = 1\r\n        G.hand:change_size(card.ability.extra.hand_increase)\r\n        card:juice_up()\r\n      end\r\n    elseif context.ending_shop or context.setting_blind then\r\n      if card.ability.extra.trolley_success == 1 then\r\n        card.ability.extra.trolley_success = 0\r\n        G.hand:change_size(-card.ability.extra.hand_increase)\r\n      end\r\n    end\r\n  end,\r\n\r\n\tremove_from_deck = function(self, card, from_debuff)\r\n    if card.ability.extra.trolley_success == 1 then\r\n      G.hand:change_size(-card.ability.extra.hand_increase)\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "extrapockets",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 2
      },
      "raw": "--Extra Pockets\r\n  key = 'extrapockets',\r\n  loc_txt = {\r\n    name = 'Extra Pockets',\r\n    text = {\r\n      \"{C:attention}+#1#{} hand size for\",\r\n      \"each held {C:attention}Consumable\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 2 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = {hand_increase_mod = 1, hand_increase = 0, hand_diff = 0} },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.hand_increase_mod } }\r\n  end,\r\n  \r\n  remove_from_deck = function(self, card, from_debuff)\r\n    G.hand:change_size(-card.ability.extra.hand_increase)\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    --card.ability.extra.hand_increase_mod = math.ceil(card.ability.extra.hand_increase_mod)\r\n    card.ability.extra.hand_increase = #G.consumeables.cards * card.ability.extra.hand_increase_mod\r\n    while math.ceil(card.ability.extra.hand_increase) > math.ceil(card.ability.extra.hand_diff) do\r\n      card.ability.extra.hand_diff = card.ability.extra.hand_diff + 1\r\n      G.hand:change_size(1)\r\n    end\r\n    while math.ceil(card.ability.extra.hand_increase) < math.ceil(card.ability.extra.hand_diff) do\r\n      card.ability.extra.hand_diff = card.ability.extra.hand_diff - 1\r\n      G.hand:change_size(-1)\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "peartree",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 2
      },
      "raw": "--Pear Tree\r\n  key = 'peartree',\r\n  loc_txt = {\r\n    name = 'Pear Tree',\r\n    text = {\r\n      \"{C:mult}+#1#{} Mult if cards\",\r\n      \"{C:attention}held in hand{}\",\r\n      \"contain a {C:attention}Pair\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 2 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 15 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      local rank_list = {0}\r\n      for i=1, #G.hand.cards do\r\n        for j=1, #rank_list do\r\n          if i == 1 and not SMODS.has_no_rank(G.hand.cards[i]) then\r\n            rank_list[i] = G.hand.cards[i]:get_id()\r\n          elseif rank_list[1] ~= \"PAIR!\" and not SMODS.has_no_rank(G.hand.cards[i]) then\r\n            --print(tostring(G.hand.cards[i].base.value)..\" \"..tostring(rank_list[j]))\r\n            if tostring(G.hand.cards[i]:get_id()) == tostring(rank_list[j]) then\r\n              rank_list[1] = \"PAIR!\"\r\n              return {\r\n                mult_mod = card.ability.extra.mult,\r\n                message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult } }\r\n              }\r\n            else \r\n              rank_list[i] = G.hand.cards[i]:get_id()\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end    \r\n  end"
    },
    {
      "type": "Joker",
      "key": "spectraljoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 2
      },
      "raw": "--Spectral Joker\r\n  key = 'spectraljoker',\r\n  loc_txt = {\r\n    name = 'Spectral Joker',\r\n    text = {\r\n      \"After {C:attention}Boss Blind{} is\",\r\n      \"defeated, create a\",\r\n      \"free {C:attention}Ethereal Tag{}\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 2 },\r\n  cost = 9,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n      info_queue[#info_queue+1] = G.P_TAGS['tag_ethereal']\r\n    return {\r\n      vars = { card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.end_of_round and G.GAME.blind.boss and context.cardarea == G.jokers then\r\n      G.E_MANAGER:add_event(Event({\r\n        func = function()\r\n          add_tag(Tag('tag_ethereal'))\r\n          return true\r\n        end\r\n      }))\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "siphon",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 2
      },
      "raw": "--Siphon\r\n  key = 'siphon',\r\n  loc_txt = {\r\n    name = 'Siphon',\r\n    text = {\r\n      \"This Joker gains {C:chips}+#1#{} Chips\",\r\n      \"when another Joker is {C:attention}sold\",\r\n      --\"or {C:attention}destroyed\",\r\n      \"{C:inactive}(Currently {C:chips}+#2#{C:inactive} Chips)\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 2 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  config = { extra = { chips_mod = 8, chips = 0 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.chips_mod, card.ability.extra.chips } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if not context.selling_self then\r\n      if context.selling_card and context.card.ability.set == 'Joker' and not context.blueprint then\r\n        card.ability.extra.chips = card.ability.extra.chips + card.ability.extra.chips_mod\r\n        return {\r\n          selling_self = false,\r\n          message = localize('k_upgrade_ex'),\r\n          colour = G.C.CHIPS,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n    if context.joker_main then\r\n      return {\r\n          chip_mod = card.ability.extra.chips,\r\n          message = localize { type = 'variable', key = 'a_chips', vars = { card.ability.extra.chips } }\r\n        }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "inkjetprinter",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 2
      },
      "raw": "--Inkjet Printer\r\n   key = 'inkjetprinter',\r\n  loc_txt = {\r\n    name = 'Inkjet Printer',\r\n    text = {\r\n      \"{C:attention}Consumables{} have a {C:green}#1# in #2#\",\r\n      \"chance to be {C:attention}recreated{} on use,\",\r\n      \"this card has a {C:green}#1# in #3#{} chance to\",\r\n      \"be {C:attention}destroyed{} after activating\",\r\n      \"{C:inactive}(Must have room){}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 2 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  config = { extra = { copy_odds = 2, destroy_odds = 4, copied = {} } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.copy_odds, card.ability.extra.destroy_odds } }\r\n  end,\r\n  in_pool = function(self, args)\r\n      return #SMODS.find_card('j_picubed_laserprinter') < 1\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.using_consumeable and not context.blueprint then\r\n      if pseudorandom(pseudoseed('inkjetprinter'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal / card.ability.extra.copy_odds then\r\n        local has_activated = false\r\n        local has_destroyed = false\r\n        G.E_MANAGER:add_event(Event({\r\n          func = function()\r\n            if are_consm_slots_filled(context.consumeable) then\r\n              local copied_card = copy_card(context.consumeable, nil)\r\n              copied_card:add_to_deck()\r\n              G.consumeables:emplace(copied_card)\r\n              has_activated = true\r\n              card_eval_status_text(card, 'extra', nil, nil, nil,\r\n                { message = localize(\"k_picubeds_print\") })\r\n            end\r\n            return true\r\n          end\r\n        }))\r\n\r\n        if pseudorandom(pseudoseed('inkjetprinter'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal / card.ability.extra.destroy_odds then\r\n          G.E_MANAGER:add_event(Event({\r\n\t\t\t\t\tfunc = function()\r\n\t\t\t\t\t\tif has_activated then\r\n              has_destroyed = true\r\n              play_sound('tarot1')\r\n                card.T.r = -0.2\r\n                card:juice_up(0.3, 0.4)\r\n                card.states.drag.is = true\r\n                card.children.center.pinch.x = true\r\n                -- This part destroys the card.\r\n                G.E_MANAGER:add_event(Event({\r\n                  trigger = 'after',\r\n                  delay = 0.3,\r\n                  blockable = false,\r\n                  func = function()\r\n                    card_eval_status_text(card, 'extra', nil, nil, nil,\r\n                      { message = localize(\"k_picubeds_error\") })\r\n                    local mpcard = create_card('Joker', G.jokers, nil, 0, nil, nil, 'j_misprint', 'pri')\r\n                    mpcard:set_edition(card.edition, false, true)\r\n                    mpcard:add_to_deck()\r\n                    G.jokers:emplace(mpcard)\r\n                    mpcard:start_materialize()\r\n                    G.GAME.pool_flags.picubed_printer_error = true\r\n                    G.jokers:remove_card(card)\r\n                    card:remove()\r\n                    card = nil\r\n                    return true;\r\n                  end\r\n                }))\r\n              end\r\n          return true\r\n          end\r\n          }))\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "blackjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 2
      },
      "raw": "--Black Joker\r\n  key = 'blackjoker',\r\n  loc_txt = {\r\n    name = 'Black Joker',\r\n    text = {\r\n      \"If the {C:attention}sum rank{} of\",\r\n      \"{C:attention}first{} played or discarded\",\r\n      \"cards is {C:attention}#2#{}, earn {C:money}$#3#{}\",\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 2 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { sum_rank = 0, cap = 21, money = 7, has_decimal = false, ace_count = 0 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.sum_rank, card.ability.extra.cap, card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.first_hand_drawn then\r\n      local eval = function() return G.GAME.current_round.discards_used == 0 and G.GAME.current_round.hands_played == 0 and not G.RESET_JIGGLES end\r\n      juice_card_until(card, eval, true)\r\n    end\r\n    if ((context.cardarea == G.jokers and context.before) or context.pre_discard) and (G.GAME.current_round.discards_used <= 0 and G.GAME.current_round.hands_played <= 0) then\r\n      card.ability.extra.sum_rank = 0\r\n      if not context.blueprint then\r\n        card.ability.extra.has_decimal = false\r\n        card.ability.extra.ace_count = 0\r\n        if card.ability.extra.cap ~= 21 then card.ability.extra.has_decimal = true end\r\n        for k,v in ipairs(context.full_hand) do\r\n          if SMODS.has_no_rank(v) then -- rankless cards\r\n            card.ability.extra.sum_rank = card.ability.extra.sum_rank + 0\r\n          elseif v:get_id() > 14 then --UnStable ranks \r\n            if v:get_id() == 15 then -- 0 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 0\r\n            elseif v:get_id() == 16 then -- 0.5 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 0.5\r\n              card.ability.extra.has_decimal = true\r\n            elseif v:get_id() == 17 then -- 1 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 1\r\n            elseif v:get_id() == 18 then -- sqrt 2 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 1.41\r\n              card.ability.extra.has_decimal = true\r\n            elseif v:get_id() == 19 then -- e rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 2.72\r\n              card.ability.extra.has_decimal = true\r\n            elseif v:get_id() == 20 then -- pi rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 3.14\r\n              card.ability.extra.has_decimal = true\r\n            elseif v:get_id() == 21 then -- ??? rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + pseudorandom('???') * 11\r\n              card.ability.extra.has_decimal = true\r\n            elseif v:get_id() == 22 then -- 21 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 21\r\n            elseif v:get_id() == 23 then -- 11 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 11\r\n            elseif v:get_id() == 24 then -- 12 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 12\r\n            elseif v:get_id() == 25 then -- 13 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 13\r\n            elseif v:get_id() == 26 then -- 25 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 25\r\n            elseif v:get_id() == 27 then -- 161 rank\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 161\r\n            end\r\n          elseif v:get_id() > 10 then --face cards or aces\r\n            if v:get_id() < 14 then --face cards\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 10\r\n            else --aces\r\n              card.ability.extra.sum_rank = card.ability.extra.sum_rank + 11\r\n              card.ability.extra.ace_count = card.ability.extra.ace_count + 1\r\n            end\r\n          elseif v:get_id() <= 10 and v:get_id() >= 2 then --numbered cards (vanilla only)\r\n            card.ability.extra.sum_rank = card.ability.extra.sum_rank + v:get_id()\r\n          end\r\n          --return { message = tostring(card.ability.extra.sum_rank), card = card }\r\n        end\r\n      end\r\n      while card.ability.extra.sum_rank >= card.ability.extra.cap + 1 and card.ability.extra.ace_count > 0 do\r\n        card.ability.extra.sum_rank = card.ability.extra.sum_rank - 10\r\n        card.ability.extra.ace_count = card.ability.extra.ace_count - 1\r\n      end\r\n      if card.ability.extra.sum_rank == card.ability.extra.cap or (card.ability.extra.has_decimal == true and card.ability.extra.sum_rank < card.ability.extra.cap + 1 and card.ability.extra.sum_rank > card.ability.extra.cap - 1) then\r\n        return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n        }\r\n      else\r\n        return {\r\n          message = tostring(card.ability.extra.sum_rank),\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "bisexualflag_spectrums",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "--Bisexual Flag (with Spectrum)\r\n  key = 'bisexualflag_spectrums',\r\n  loc_txt = {\r\n    name = 'Bisexual Flag',\r\n    text = {\r\n      \"If {C:attention}played hand{} contains either\",\r\n      \"a {C:attention}Straight{} and {C:attention}all four default{}\",\r\n      \"{C:attention}suits{}, or a {C:attention}Straight Spectrum{},\",\r\n      \"create 3 {C:dark_edition}Negative {C:purple}Tarot{} cards\",\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 2 },\r\n  cost = 8,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n      info_queue[#info_queue + 1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = 1}}\r\n    return {\r\n      vars = { card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  --[[in_pool = function(self, args)\r\n    if not G.GAME.challenge == 'ch_c_picubed_balalajokerpoker' then return true end\r\n  end,]]\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      local suit_list = {\r\n        ['Hearts'] = 0,\r\n        ['Diamonds'] = 0,\r\n        ['Spades'] = 0,\r\n        ['Clubs'] = 0\r\n      }\r\n      for k, v in ipairs(context.scoring_hand) do --checking for all non-wild cards\r\n        if not SMODS.has_any_suit(v) then\r\n          if v:is_suit('Hearts', true) and suit_list[\"Hearts\"] ~= 1 then suit_list[\"Hearts\"] = 1\r\n          elseif v:is_suit('Diamonds', true) and suit_list[\"Diamonds\"] ~= 1  then suit_list[\"Diamonds\"] = 1\r\n          elseif v:is_suit('Spades', true) and suit_list[\"Spades\"] ~= 1  then suit_list[\"Spades\"] = 1\r\n          elseif v:is_suit('Clubs', true) and suit_list[\"Clubs\"]~= 1  then suit_list[\"Clubs\"] = 1\r\n          end\r\n        end\r\n      end\r\n      for k, v in ipairs(context.scoring_hand) do --checking for all wild cards\r\n        if SMODS.has_any_suit(v) then\r\n          if v:is_suit('Hearts', true) and suit_list[\"Hearts\"] ~= 1 then suit_list[\"Hearts\"] = 1\r\n          elseif v:is_suit('Diamonds', true) and suit_list[\"Diamonds\"] ~= 1  then suit_list[\"Diamonds\"] = 1\r\n          elseif v:is_suit('Spades', true) and suit_list[\"Spades\"] ~= 1  then suit_list[\"Spades\"] = 1\r\n          elseif v:is_suit('Clubs', true) and suit_list[\"Clubs\"]~= 1  then suit_list[\"Clubs\"] = 1\r\n          end\r\n        end\r\n      end\r\n      if string.find(context.scoring_name, \"Straight Spectrum\") or ((next(context.poker_hands[\"Straight\"]) or next(context.poker_hands[\"Straight Flush\"])) and \r\n      suit_list[\"Hearts\"] > 0 and\r\n      suit_list[\"Diamonds\"] > 0 and\r\n      suit_list[\"Spades\"] > 0 and\r\n      suit_list[\"Clubs\"] > 0) then\r\n          local card_type = 'Tarot'\r\n          G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 3\r\n          G.E_MANAGER:add_event(Event({\r\n              trigger = 'before',\r\n              func = (function()\r\n                      for i=1,3 do\r\n                        local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, nil, 'sup')\r\n                        card:set_edition('e_negative', true)\r\n                        card:add_to_deck()\r\n                        G.consumeables:emplace(card)\r\n                        G.GAME.consumeable_buffer = 0\r\n                      end\r\n                  return true\r\n              end)}))\r\n          return {\r\n              message = localize(\"k_picubeds_pride\"),\r\n              colour = G.C.SECONDARY_SET.Tarot,\r\n              card = card\r\n          }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "bisexualflag",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "--Bisexual Flag (without Spectrum FALLBACK)\r\n  key = 'bisexualflag',\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 2 },\r\n  no_collection = true,\r\n  discovered = true,\r\n  in_pool = function(self, args) return false end,\r\n  update = function(self, card, dt)\r\n    card:set_ability(G.P_CENTERS[\"j_picubed_bisexualflag_spectrums\"])\r\n  end"
    },
    {
      "type": "Joker",
      "key": "bisexualflag",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "--Bisexual Flag (without Spectrum)\r\n  key = 'bisexualflag',\r\n  loc_txt = {\r\n    name = 'Bisexual Flag',\r\n    text = {\r\n      \"If {C:attention}played hand{} contains a\",\r\n      \"{C:attention}Straight{} and {C:attention}all four suits{},\",\r\n      \"create 3 {C:dark_edition}Negative {C:purple}Tarot{} cards\",\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 2 },\r\n  cost = 8,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n      info_queue[#info_queue + 1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = 1}}\r\n    return {\r\n      vars = { card.ability.max_highlighted }\r\n    }\r\n  end,\r\n  --[[in_pool = function(self, args)\r\n    if not G.GAME.challenge == 'ch_c_picubed_balalajokerpoker' then return true end\r\n  end,]]\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      local suit_list = {\r\n        ['Hearts'] = 0,\r\n        ['Diamonds'] = 0,\r\n        ['Spades'] = 0,\r\n        ['Clubs'] = 0\r\n      }\r\n      for k, v in ipairs(context.scoring_hand) do --checking for all non-wild cards\r\n        if not SMODS.has_any_suit(v) then\r\n          if v:is_suit('Hearts', true) and suit_list[\"Hearts\"] ~= 1 then suit_list[\"Hearts\"] = 1\r\n          elseif v:is_suit('Diamonds', true) and suit_list[\"Diamonds\"] ~= 1  then suit_list[\"Diamonds\"] = 1\r\n          elseif v:is_suit('Spades', true) and suit_list[\"Spades\"] ~= 1  then suit_list[\"Spades\"] = 1\r\n          elseif v:is_suit('Clubs', true) and suit_list[\"Clubs\"]~= 1  then suit_list[\"Clubs\"] = 1\r\n          end\r\n        end\r\n      end\r\n      for k, v in ipairs(context.scoring_hand) do --checking for all wild cards\r\n        if SMODS.has_any_suit(v) then\r\n          if v:is_suit('Hearts', true) and suit_list[\"Hearts\"] ~= 1 then suit_list[\"Hearts\"] = 1\r\n          elseif v:is_suit('Diamonds', true) and suit_list[\"Diamonds\"] ~= 1  then suit_list[\"Diamonds\"] = 1\r\n          elseif v:is_suit('Spades', true) and suit_list[\"Spades\"] ~= 1  then suit_list[\"Spades\"] = 1\r\n          elseif v:is_suit('Clubs', true) and suit_list[\"Clubs\"]~= 1  then suit_list[\"Clubs\"] = 1\r\n          end\r\n        end\r\n      end\r\n      if (next(context.poker_hands[\"Straight\"]) or next(context.poker_hands[\"Straight Flush\"])) and \r\n      suit_list[\"Hearts\"] > 0 and\r\n      suit_list[\"Diamonds\"] > 0 and\r\n      suit_list[\"Spades\"] > 0 and\r\n      suit_list[\"Clubs\"] > 0 then\r\n          local card_type = 'Tarot'\r\n          G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 3\r\n          G.E_MANAGER:add_event(Event({\r\n              trigger = 'before',\r\n              func = (function()\r\n                      for i=1,3 do\r\n                        local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, nil, 'sup')\r\n                        card:set_edition('e_negative', true)\r\n                        card:add_to_deck()\r\n                        G.consumeables:emplace(card)\r\n                        G.GAME.consumeable_buffer = 0\r\n                      end\r\n                  return true\r\n              end)}))\r\n          return {\r\n              message = localize(\"k_picubeds_pride\"),\r\n              colour = G.C.SECONDARY_SET.Tarot,\r\n              card = card\r\n          }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "bisexualflag_spectrums",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 2
      },
      "raw": "--Bisexual Flag (with Spectrum FALLBACK)\r\n  key = 'bisexualflag_spectrums',\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 2 },\r\n  no_collection = true,\r\n  discovered = true,\r\n  in_pool = function(self, args) return false end,\r\n  update = function(self, card, dt)\r\n    card:set_ability(G.P_CENTERS[\"j_picubed_bisexualflag\"])\r\n  end"
    },
    {
      "type": "Joker",
      "key": "tradein",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 2
      },
      "raw": "--Trade-in\r\n  key = 'tradein',\r\n  loc_txt = {\r\n    name = 'Trade-in',\r\n    text = {\r\n      \"Earn {C:money}$#1#{} when a\",\r\n      \"playing card is\",\r\n      \"{C:attention}destroyed\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 2 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.remove_playing_cards then\r\n      local num_destroy = 0\r\n      for k,v in ipairs(context.removed) do\r\n        num_destroy = num_destroy + 1\r\n      end\r\n      if num_destroy > 0 then\r\n        return {\r\n            dollars = card.ability.extra.money*num_destroy,\r\n            card = card\r\n          }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "apartmentcomplex",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 2
      },
      "raw": "--Apartment Complex\r\n  key = 'apartmentcomplex',\r\n  loc_txt = {\r\n    name = 'Apartment Complex',\r\n    text = {\r\n      \"This Joker gains {X:mult,C:white}X#1#{} Mult\",\r\n      \"if {C:attention}played hand{} is a\",\r\n      \"{C:attention}Flush House{}\",\r\n      \"{C:inactive}(Currently {X:mult,C:white}X#2#{} {C:inactive}Mult)\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 2 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  in_pool = function(self, args)\r\n    if G.GAME.hands[\"Flush House\"].played ~= 0 then\r\n        return true\r\n    end\r\n    if G.GAME.hands[\"Flush\"].played >= 2 and G.GAME.hands[\"Full House\"].played >= 2 then\r\n        return true\r\n    end\r\n    return false\r\n  end,\r\n  config = { extra = { Xmult_mod = 0.75, Xmult = 1 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult_mod, card.ability.extra.Xmult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.before and not context.blueprint then\r\n      if next(context.poker_hands[\"Flush House\"]) then\r\n        card.ability.extra.Xmult = card.ability.extra.Xmult + card.ability.extra.Xmult_mod\r\n        return {\r\n            message = localize('k_upgrade_ex'),\r\n            colour = G.C.MULT,\r\n            card = card\r\n          }\r\n      end\r\n    end\r\n    if context.joker_main and card.ability.extra.Xmult > 1 then\r\n      return {\r\n\t\t\t\tmessage = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n\t\t\t\tXmult_mod = card.ability.extra.Xmult\r\n\t\t\t}\r\n    end\r\n  end"
    },
    {
      "type": "Consumable",
      "key": "commander",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 3
      },
      "raw": "--Commander (Spectral card)\r\n  set = \"Spectral\",\r\n  key = \"commander\",\r\n  loc_txt = {\r\n    name = 'Commander',\r\n    text = {\r\n      \"{C:attention}Destroy{} 1 random\",\r\n      \"Consumable if slots are\",\r\n      \"filled, add {C:dark_edition}Negative{}\",\r\n      \"to all others\"\r\n    }\r\n  },\r\n  discovered = true,\r\n  config = { \r\n    extra = { num = 1 }\r\n  },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 3 },\r\n  cost = 4,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue + 1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = G.P_CENTERS['e_negative'].config.card_limit} }\r\n    return { vars = { card.ability.extra.num } }\r\n  end,\r\n  can_use = function(self, card)\r\n    return #G.consumeables.cards >= 1\r\n  end,\r\n  in_pool = function(self, args)\r\n    return #G.consumeables.cards >= 1\r\n  end,\r\n  use = function(self, card, area, copier)\r\n    if (#G.consumeables.cards >= G.consumeables.config.card_limit) or (card.edition and card.edition.key == 'e_negative' and #G.consumeables.cards + 1 >= G.consumeables.config.card_limit) then\r\n      local rndcard = pseudorandom_element(G.consumeables.cards, pseudoseed('Commander'..G.GAME.round_resets.ante))\r\n      if rndcard ~= nil then\r\n        --This event bit taken from Extra Credit's Toby the Corgi\r\n        G.E_MANAGER:add_event(Event({\r\n          func = function()\r\n            play_sound('tarot1')\r\n            rndcard.T.r = -0.2\r\n            rndcard:juice_up(0.3, 0.4)\r\n            rndcard.states.drag.is = true\r\n            rndcard.children.center.pinch.x = true\r\n            rndcard:start_dissolve()\r\n            rndcard = nil\r\n            delay(0.3)\r\n            return true\r\n          end\r\n        }))\r\n      end\r\n    end\r\n    for k, v in ipairs(G.consumeables.cards) do\r\n      v:set_edition('e_negative', false, true)\r\n      v:juice_up()\r\n    end\r\n  end"
    },
    {
      "type": "Consumable",
      "key": "rupture",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 8
      },
      "raw": "--Rupture (Spectral card)\r\n  set = \"Spectral\",\r\n  key = \"rupture\",\r\n  loc_txt = {\r\n    name = 'Rupture',\r\n    text = {\r\n      \"{C:attention}Destroy{} left-most Joker,\",\r\n      \"create {C:attention}#1#{} random\",\r\n      \"{C:spectral}Spectral{} cards\"\r\n    }\r\n  },\r\n  discovered = true,\r\n  config = { \r\n    extra = { num = 2 }\r\n  },\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 8 },\r\n  cost = 4,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.num } }\r\n  end,\r\n  can_use = function(self, card)\r\n      return G.consumeables and #G.consumeables.cards < G.consumeables.config.card_limit\r\n  end,\r\n  use = function(self, card, area, copier)\r\n    if G.jokers.cards then\r\n      if not G.jokers.cards[1].ability.eternal then\r\n        G.jokers.cards[1]:start_dissolve(nil, nil)\r\n      end\r\n    end\r\n    for i = 1, math.min(card.ability.extra.num, G.consumeables.config.card_limit - #G.consumeables.cards) do\r\n        G.E_MANAGER:add_event(Event({\r\n            trigger = 'after',\r\n            delay = 0.4,\r\n            func = function()\r\n                if G.consumeables.config.card_limit > #G.consumeables.cards then\r\n                    play_sound('timpani')\r\n                    SMODS.add_card({ set = 'Spectral' })\r\n                    card:juice_up(0.3, 0.5)\r\n                end\r\n                return true\r\n            end\r\n        }))\r\n    end\r\n    delay(0.6)\r\n  end,"
    },
    {
      "type": "Consumable",
      "key": "extinction",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 8
      },
      "raw": "--Extinction (Spectral card)\r\n  set = \"Spectral\",\r\n  key = \"extinction\",\r\n  loc_txt = {\r\n    name = 'Extinction',\r\n    text = {\r\n      \"{C:attention}Destroy{} all cards of\",\r\n      \"a {C:attention}random rank{}\",\r\n      \"from your deck\"\r\n    }\r\n  },\r\n  discovered = true,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 8 },\r\n  cost = 4,\r\n  can_use = function(self, card)\r\n    return true\r\n  end,\r\n  use = function(self, card, area, copier)\r\n    if next(SMODS.find_card('j_gros_michel')) then\r\n        for k, v in ipairs(G.jokers.cards) do\r\n            if v.ability.name == 'Gros Michel' then\r\n              card_eval_status_text(v, 'extra', nil, nil, nil, {message = localize('k_extinct_ex') })\r\n              G.E_MANAGER:add_event(Event({\r\n                func = function()\r\n                    play_sound('tarot1')\r\n                    v.T.r = -0.2\r\n                    v:juice_up(0.3, 0.4)\r\n                    v.states.drag.is = true\r\n                    v.children.center.pinch.x = true\r\n                    G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.3, blockable = false,\r\n                        func = function()\r\n                            G.jokers:remove_card(v)\r\n                            v:remove()\r\n                            v = nil\r\n                        return true; end})) \r\n                    return true\r\n                end\r\n              }))\r\n              G.GAME.pool_flags.gros_michel_extinct = true\r\n            end\r\n        end\r\n    end\r\n    local rank_list = {2,3,4,5,6,7,8,9,10,11,12,13,14}\r\n    local chrank = pseudorandom_element(rank_list, \"extinction\"..G.GAME.round_resets.ante)\r\n    local the_key = chrank\r\n    if the_key == 11 then the_key = 'Jack'\r\n    elseif the_key == 12 then the_key = 'Queen'\r\n    elseif the_key == 13 then the_key = 'King'\r\n    elseif the_key == 14 then the_key = 'Ace' end\r\n    card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize(tostring(the_key), 'ranks'),\r\n              colour = G.C.SECONDARY_SET.Spectral })\r\n    for k, v in ipairs(G.playing_cards) do\r\n      if v:get_id() == chrank then\r\n        SMODS.destroy_cards(v)\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "the_debuffer",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 3
      },
      "raw": "--The Debuffer (Test Joker)\r\n  key = 'the_debuffer',\r\n  loc_txt = {\r\n    name = 'The Debuffer',\r\n    text = {\r\n      \"{C:attention}Debuffs{} all jokers and\", \r\n      \"playing cards when sold\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 3 },\r\n  cost = 1,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  eternal_compat = false,\r\n\r\n  calculate = function(self, card, context)\r\n    if not context.blueprint and context.selling_self then\r\n      for k, v in ipairs(G.jokers.cards) do\r\n        v:flip()\r\n      end\r\n      for k, v in ipairs(G.hand.cards) do\r\n       SMODS.debuff_card(v, true, 'test')\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "incompletesurvey",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 3
      },
      "raw": "--Incomplete Survey\r\n  key = 'incompletesurvey',\r\n  loc_txt = {\r\n    name = 'Incomplete Survey',\r\n    text = {\r\n      \"Earn {C:money}$#1#{} at start of round,\",\r\n      \"{C:attention}final card{} drawn to hand is\",\r\n      \"drawn {C:attention}face down{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 3 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.first_hand_drawn == true and not context.blueprint then\r\n      return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n      }\r\n    end\r\n    if context.stay_flipped and not (context.cardarea == G.play and context.before) then    \r\n      if G.hand.config.card_limit - 1 <= (#G.hand.cards) then\r\n        return { stay_flipped = true }\r\n      end\r\n    end\r\n    if context.cardarea == G.jokers and context.before then\r\n      for k, v in ipairs(context.full_hand) do\r\n        if v.facing == 'back' then\r\n          v:flip()\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "allin",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 3
      },
      "raw": "--All In\r\n  key = 'allin',\r\n  loc_txt = {\r\n    name = 'All In',\r\n    text = {\r\n      \"All {C:attention}face down{} cards and\",\r\n      \"Jokers are retriggered\",\r\n      \"{C:attention}#1#{} additional times\",\r\n      \"{C:inactive}(except All In)\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 3 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { repetitions = 2, face_down_cards = {} } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.repetitions } }\r\n  end,\r\n  in_pool = function(self, args) return G.GAME.round_resets.ante >= 2 end,\r\n  calculate = function(self, card, context) --don't base your joker ideas on face-down cards.\r\n    if G.hand and #G.hand.highlighted and context.press_play then\r\n      for i = 1, #G.hand.highlighted do\r\n        if G.hand.highlighted[i].facing == 'back' then\r\n          --print(\"kys\")\r\n          card.ability.extra.face_down_cards[i] = true\r\n          --print(i)\r\n          --print(card.ability.extra.face_down_cards[i])\r\n        else\r\n          --print(\"hi!\")\r\n          card.ability.extra.face_down_cards[i] = false\r\n          --print(i)\r\n          --print(card.ability.extra.face_down_cards[i])\r\n        end\r\n      --print(#(card.ability.extra.face_down_cards or {6,6,6,6,6,6}))\r\n      end\r\n    end\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then\r\n        --print(card.ability.extra.face_down_cards)\r\n        local card_pos = 1\r\n        for i = 1, #context.full_hand do\r\n          if context.full_hand[i] == context.other_card then\r\n            card_pos = i\r\n            --print(i)\r\n          end\r\n        end\r\n        --print(card.ability.extra.face_down_cards[card_pos])\r\n        if card.ability.extra.face_down_cards[card_pos] == true or context.other_card.facing == 'back' then\r\n          --print(tostring(card_pos)..\"FACE DOWN!\")\r\n          return {\r\n            repetitions = card.ability.extra.repetitions,\r\n            card = card\r\n          }\r\n        end\r\n\t\tend\r\n    if context.final_scoring_step and context.cardarea == G.play then\r\n      card.ability.extra.face_down_cards = {}\r\n    end\r\n    if context.cardarea == G.hand and context.repetition and not context.repetition_only then\r\n      if context.other_card.facing == 'back' then\r\n\t\t\t\treturn {\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n\t\t\t\t}\r\n      end\r\n    end\r\n    if context.retrigger_joker_check and not context.retrigger_joker and context.other_card.ability.name ~= 'j_picubed_allin' then\r\n      if context.other_card.facing == 'back' then\r\n        return {\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n        }\r\n      end\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "gottheworm",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 3
      },
      "raw": "--Got the Worm\r\n  key = 'gottheworm',\r\n  loc_txt = {\r\n    name = 'Got the Worm',\r\n    text = {\r\n      \"{C:attention}Skipping{} a blind\",\r\n      \"also gives {C:money}$#1#{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 3 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 15 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.skip_blind then\r\n      return {\r\n        dollars = card.ability.extra.money,\r\n        card = card\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "extralimb",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 4
      },
      "raw": "--Extra Limb\r\n  key = 'extralimb',\r\n  loc_txt = {\r\n    name = 'Extra Limb',\r\n    text = {\r\n      \"{C:attention}+#1#{} Consumable Slots,\",\r\n      \"{C:mult}+#2#{} Mult per held\",\r\n      \"Consumable\",\r\n      \"{C:inactive}(Currently {C:mult}+#3# {C:inactive}Mult)\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 4 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { card_limit = 1, mult_mod = 6 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    if G.OVERLAY_MENU then\r\n      return { vars = { card.ability.extra.card_limit, card.ability.extra.mult_mod, 0 } }\r\n    else\r\n      return { vars = { card.ability.extra.card_limit, card.ability.extra.mult_mod, card.ability.extra.mult_mod * #G.consumeables.cards } }\r\n    end\r\n  end,\r\n  --add & remove taken from Extra Credit's Forklift\r\n  add_to_deck = function(self, card, from_debuff)\r\n      G.E_MANAGER:add_event(Event({func = function()\r\n          G.consumeables.config.card_limit = G.consumeables.config.card_limit + card.ability.extra.card_limit\r\n          return true end }))\r\n  end,\r\n  remove_from_deck = function(self, card, from_debuff)\r\n      G.E_MANAGER:add_event(Event({func = function()\r\n          G.consumeables.config.card_limit = G.consumeables.config.card_limit - card.ability.extra.card_limit\r\n          return true end }))\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main and #G.consumeables.cards ~= 0 then\r\n      return {\r\n        mult_mod = card.ability.extra.mult_mod * #G.consumeables.cards,\r\n        message = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult_mod * #G.consumeables.cards } }\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "perfectscore",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 4
      },
      "raw": "--Perfect Score\r\n  key = 'perfectscore',\r\n  loc_txt = {\r\n    name = 'Perfect Score',\r\n    text = {\r\n      \"{C:chips}+#1# {}Chips if scoring\",\r\n      \"hand contains a {C:attention}10{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 4 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { chips = 100 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.chips } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      local has_10 = false\r\n      for k, v in ipairs(context.scoring_hand) do\r\n        if v.base.value == '10' then\r\n          has_10 = true\r\n        end\r\n      end\r\n      if has_10 then\r\n        return {\r\n        chip_mod = card.ability.extra.chips,\r\n        message = localize { type = 'variable', key = 'a_chips', vars = { card.ability.extra.chips } }\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Sound",
      "key": "explo1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"explo1\",\r\n\tpath = \"explo1.ogg\","
    },
    {
      "type": "Sound",
      "key": "explo2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"explo2\",\r\n\tpath = \"explo2.ogg\","
    },
    {
      "type": "Sound",
      "key": "explo3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"explo3\",\r\n\tpath = \"explo3.ogg\","
    },
    {
      "type": "Joker",
      "key": "explosher",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 4
      },
      "raw": "--Explosher\r\n  key = 'explosher',\r\n  loc_txt = {\r\n    name = 'Explosher',\r\n    text = {\r\n      \"After scoring is complete,\",\r\n      \"give {C:attention}#1# {}random cards\", \r\n      \"held in hand a {C:attention}random suit\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 4 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { num = 3 } },\r\n loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.num } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.jokers and context.after then\r\n      local suit_list = {'Hearts', 'Diamonds', 'Spades', 'Clubs'}\r\n      if #G.hand.cards > 0 and #G.hand.cards <= card.ability.extra.num then\r\n        for k,v in ipairs(G.hand.cards) do\r\n          for i=#suit_list,1,-1 do\r\n            if v.base.suit == suit_list[i] then\r\n              table.remove(suit_list, i)\r\n            end\r\n          end\r\n        end\r\n        if #suit_list == 0 then\r\n          suit_list = {'Hearts', 'Diamonds', 'Spades', 'Clubs'}\r\n        end\r\n        local chosen_suit = pseudorandom_element(suit_list, pseudoseed('Explosher'..G.GAME.round_resets.ante))\r\n        for k,v in ipairs(G.hand.cards) do\r\n          G.E_MANAGER:add_event(Event({func = function()\r\n            v:change_suit(chosen_suit)\r\n            v:juice_up()\r\n            card:juice_up()\r\n          return true end }))\r\n        end\r\n        if picubed_config.custom_sound_effects then\r\n          return {\r\n            message = localize(\"k_picubeds_slosh\"),\r\n            volume = 0.5,\r\n            sound = \"picubed_explo\"..pseudorandom_element({'1', '2', '3'}, pseudoseed('Explosher1'..G.GAME.round_resets.ante))\r\n          }\r\n        else\r\n          return {\r\n            message = localize(\"k_picubeds_slosh\"),\r\n          }\r\n        end\r\n      elseif #G.hand.cards > 0 then\r\n        local card_list = {}\r\n        local hit_list = {}\r\n        for k,v in ipairs(G.hand.cards) do\r\n          for i=#suit_list,1,-1 do\r\n            if v.base.suit == suit_list[i] then\r\n              table.remove(suit_list, i)\r\n            end\r\n          end\r\n        end\r\n        if #suit_list == 0 then\r\n          suit_list = {'Hearts', 'Diamonds', 'Spades', 'Clubs'}\r\n        end\r\n        local chosen_suit = pseudorandom_element(suit_list, pseudoseed('Explosher'..G.GAME.round_resets.ante))\r\n        for i=1,#G.hand.cards do\r\n          card_list[i] = G.hand.cards[i]\r\n        end\r\n        for i=1,card.ability.extra.num do\r\n          hit_list[i] = pseudorandom_element(card_list, pseudoseed('Explosher'..i..G.GAME.round_resets.ante))\r\n          for j=1,#card_list do\r\n            if hit_list[i] == card_list[j] then\r\n              table.remove(card_list, j)\r\n            end\r\n          end\r\n        end\r\n        for k,v in ipairs(hit_list) do\r\n          G.E_MANAGER:add_event(Event({func = function()\r\n            v:change_suit(chosen_suit)\r\n            v:juice_up()\r\n            card:juice_up()\r\n          return true end }))\r\n        end\r\n        if picubed_config.custom_sound_effects then\r\n          return {\r\n            message = localize(\"k_picubeds_slosh\"),\r\n            volume = 0.5,\r\n            sound = \"picubed_explo\"..pseudorandom_element({'1', '2', '3'}, pseudoseed('Explosher1'..G.GAME.round_resets.ante))\r\n          }\r\n        else\r\n          return {\r\n            message = localize(\"k_picubeds_slosh\"),\r\n          }\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Sound",
      "key": "rhythm1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rhythm1\",\r\n\tpath = \"rhythm1.ogg\","
    },
    {
      "type": "Sound",
      "key": "rhythm2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"rhythm2\",\r\n\tpath = \"rhythm2.ogg\","
    },
    {
      "type": "Joker",
      "key": "rhythmicjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 4
      },
      "raw": "--Rhythmic Joker\r\n  key = 'rhythmicjoker',\r\n  loc_txt = {\r\n    name = 'Rhythmic Joker',\r\n    text = {\r\n      \"{C:mult}+#1#{} Mult if Hands\",\r\n      \"remaining is {C:attention}even\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 4 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 12 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main and G.GAME.current_round.hands_left % 2 == 0 then\r\n      if picubed_config.custom_sound_effects then\r\n        return {\r\n          message = localize{type='variable',key='a_mult',vars={card.ability.extra.mult}},\r\n          mult_mod = card.ability.extra.mult, \r\n          colour = G.C.MULT,\r\n          volume = 0.4,\r\n          sound = \"picubed_rhythm2\"\r\n        }\r\n      else\r\n        return {\r\n          message = localize{type='variable',key='a_mult',vars={card.ability.extra.mult}},\r\n          mult_mod = card.ability.extra.mult, \r\n          colour = G.C.MULT,\r\n        }\r\n      end\r\n    end\r\n    if context.hand_drawn and G.GAME.current_round.hands_left % 2 ~= 0 then\r\n      if picubed_config.custom_sound_effects then play_sound('picubed_rhythm1', 0.7, 0.7) end\r\n      card:juice_up()\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "goldenpancakes",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 4
      },
      "raw": "--Golden Pancakes\r\n  key = 'goldenpancakes',\r\n  loc_txt = {\r\n    name = 'Golden Pancakes',\r\n    text = {\r\n      \"Earn {C:money}$#1#{} after hand is\",\r\n      \"played, {C:green}#2# in #3#{} chance\",\r\n      \"to be {C:attention}destroyed\",\r\n      \"at end of round\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 4 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  config = { extra = { money = 2, odds = 6 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\r\n  end,\r\n  pools = { [\"Food\"] = true },\r\n  calculate = function(self, card, context)\r\n    if context.after then\r\n\t\t\treturn {\r\n        dollars = card.ability.extra.money,\r\n        card = card\r\n      }\r\n\t\tend\r\n    if context.end_of_round and not context.repetition and context.game_over == false and not context.blueprint then\r\n\t\t\tif pseudorandom('goldenpancakes'..G.GAME.round_resets.ante) < G.GAME.probabilities.normal / card.ability.extra.odds then\r\n\t\t\t\tG.E_MANAGER:add_event(Event({\r\n\t\t\t\t\tfunc = function()\r\n\t\t\t\t\t\tplay_sound('tarot1')\r\n\t\t\t\t\t\tcard.T.r = -0.2\r\n\t\t\t\t\t\tcard:juice_up(0.3, 0.4)\r\n\t\t\t\t\t\tcard.states.drag.is = true\r\n\t\t\t\t\t\tcard.children.center.pinch.x = true\r\n\t\t\t\t\t\tG.E_MANAGER:add_event(Event({\r\n\t\t\t\t\t\t\ttrigger = 'after',\r\n\t\t\t\t\t\t\tdelay = 0.3,\r\n\t\t\t\t\t\t\tblockable = false,\r\n\t\t\t\t\t\t\tfunc = function()\r\n\t\t\t\t\t\t\t\tG.jokers:remove_card(card)\r\n\t\t\t\t\t\t\t\tcard:remove()\r\n\t\t\t\t\t\t\t\tcard = nil\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\tend\r\n\t\t\t\t}))\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize(\"k_eaten_ex\")\r\n\t\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize(\"k_safe_ex\")\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "preorderbonus",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "--Preorder Bonus (with hook)\r\n  key = 'preorderbonus',\r\n  loc_txt = {\r\n    name = 'Preorder Bonus',\r\n    text = {\r\n      \"Booster Packs\",\r\n      \"cost {C:attention}#1#% less{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 4 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { discount = 0.5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.discount * 100 } }\r\n  end,\r\n  --[[in_pool = function(self, args)\r\n    if not G.GAME.challenge == 'ch_c_picubed_balalajokerpoker' then return true end\r\n  end,]]\r\n  add_to_deck = function(self, card, from_debuff)\r\n      G.E_MANAGER:add_event(Event({func = function()\r\n      for k, v in pairs(G.I.CARD) do\r\n          if v.set_cost then v:set_cost() end\r\n      end\r\n    return true end }))\r\n  end,\r\n  remove_from_deck = function(self, card, from_debuff)\r\n      G.E_MANAGER:add_event(Event({func = function()\r\n      for k, v in pairs(G.I.CARD) do\r\n          if v.set_cost then v:set_cost() end\r\n      end\r\n    return true end }))\r\n  end"
    },
    {
      "type": "Joker",
      "key": "preorderbonus_hookless",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "--Preorder Bonus (without hook FALLBACK)\r\n  key = 'preorderbonus_hookless',\r\n  pos = { x = 5, y = 4 },\r\n  atlas = 'PiCubedsJokers',\r\n  no_collection = true,\r\n  discovered = true,\r\n  in_pool = function(self, args) return false end,\r\n  update = function(self, card, dt)\r\n    card:set_ability(G.P_CENTERS[\"j_picubed_preorderbonus\"])\r\n  end"
    },
    {
      "type": "Joker",
      "key": "preorderbonus_hookless",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "--Preorder Bonus (without hook)\r\n  key = 'preorderbonus_hookless',\r\n  loc_txt = {\r\n    name = 'Preorder Bonus',\r\n    text = {\r\n      \"After opening a\",\r\n      \"Booster Pack, refund\",\r\n      \"{C:attention}#1#%{} of the cost\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 4 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { discount = 0.5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (card.ability.extra.discount) * 100 } }\r\n  end,\r\n  --[[in_pool = function(self, args)\r\n    if not G.GAME.challenge == 'ch_c_picubed_balalajokerpoker' then return true end\r\n  end,]]\r\n  calculate = function(self, card, context)\r\n    if context.open_booster then\r\n      local price_refund = card.ability.extra.discount * context.card.cost\r\n      return {\r\n        dollars = price_refund,\r\n        card = card\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "preorderbonus",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 4
      },
      "raw": "--Preorder Bonus (with hook FALLBACK)\r\n  key = 'preorderbonus',\r\n  pos = { x = 5, y = 4 },\r\n  atlas = 'PiCubedsJokers',\r\n  no_collection = true,\r\n  discovered = true,\r\n  in_pool = function(self, args) return false end,\r\n  update = function(self, card, dt)\r\n    card:set_ability(G.P_CENTERS[\"j_picubed_preorderbonus_hookless\"])\r\n  end"
    },
    {
      "type": "Joker",
      "key": "waterbottle",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 4
      },
      "raw": "--Water Bottle\r\n  key = 'waterbottle',\r\n  loc_txt = {\r\n    name = 'Water Bottle',\r\n    text = {\r\n      \"{C:chips}+#1#{} Chips for each\",\r\n      \"Consumable used this {C:attention}Ante{}\",\r\n      \"{C:inactive}(Currently {C:chips}+#2# {C:inactive}Chips)\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 4 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  config = { extra = { chips_mod = 15, chips = 0} },\r\n  pools = { [\"Food\"] = true },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.chips_mod, card.ability.extra.chips } }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.using_consumeable and not context.blueprint then\r\n      card.ability.extra.chips = card.ability.extra.chips + card.ability.extra.chips_mod\r\n      return {\r\n        message = localize('k_upgrade_ex'),\r\n        colour = G.C.CHIPS,\r\n        card = card\r\n      }\r\n    end\r\n    if context.joker_main then\r\n      return {\r\n          chip_mod = card.ability.extra.chips,\r\n          message = localize { type = 'variable', key = 'a_chips', vars = { card.ability.extra.chips } }\r\n        }\r\n    end\r\n    \r\n    if context.end_of_round and not context.blueprint and G.GAME.blind.boss and card.ability.extra.chips > 0 then\r\n      card.ability.extra.chips = 0\r\n      return {\r\n          card = card,\r\n          message = localize('k_reset'),\r\n          colour = G.C.RED\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "currencyexchange",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 4
      },
      "raw": "--Currency Exchange\r\n  key = 'currencyexchange',\r\n  loc_txt = {\r\n    name = 'Currency Exchange',\r\n    text = {\r\n      \"Cards held in hand\",\r\n      \"give {C:mult}+#1#{} Mult\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 4 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.hand and context.individual and not context.end_of_round then\r\n      if not context.other_card.debuff then\r\n        return {\r\n            mult = card.ability.extra.mult,\r\n            card = context.other_card\r\n          }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "arrogantjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 3
      },
      "raw": "--Arrogant Joker\r\n  key = 'arrogantjoker',\r\n  loc_txt = {\r\n    name = 'Arrogant Joker',\r\n    text = {\r\n      \"{X:mult,C:white}X#1#{} Mult if this Joker\",\r\n      \"is the {C:attention}left-most {}Joker\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 3 },\r\n  display_size = { w = 1.1 * 71, h = 1.1 * 95 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { Xmult = 2 } },\r\n  pools = { [\"Meme\"] = true },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult } }\r\n  end,\r\n  update = function(self, card, dt)\r\n    if G.jokers then\r\n      if G.jokers.cards[1] == card then\r\n        card.children.center:set_sprite_pos({x = 8, y = 3})\r\n      else\r\n        card.children.center:set_sprite_pos({x = 8, y = 4})\r\n      end\r\n    else\r\n      card.children.center:set_sprite_pos({x = 8, y = 3})\r\n    end\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.joker_main and G.jokers.cards[1] == card then\r\n      return {\r\n\t\t\t\tmessage = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n\t\t\t\tXmult_mod = card.ability.extra.Xmult\r\n\t\t\t}\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "fusionmagic",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 4
      },
      "raw": "--Fusion Magic\r\n  key = 'fusionmagic',\r\n  loc_txt = {\r\n    name = 'Fusion Magic',\r\n    text = {\r\n      \"After {C:attention}selling #1#{} {C:inactive}[#2#]{} {C:tarot}Tarot{} cards,\",\r\n      \"create a {C:spectral}Spectral {}card\",\r\n      \"{C:inactive}(Must have room)\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 4 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { num = 4, num_remaining = 4 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.num, card.ability.extra.num_remaining } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.selling_card and context.card.ability.set == 'Tarot' and not context.blueprint then\r\n      card.ability.extra.num_remaining = card.ability.extra.num_remaining - 1\r\n      if card.ability.extra.num_remaining > 0 then\r\n        return {\r\n          message = tostring(card.ability.extra.num_remaining)\r\n        }\r\n      else\r\n        if (#G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit) --negative tarots \r\n        or ((#G.consumeables.cards + G.GAME.consumeable_buffer - 1 < G.consumeables.config.card_limit) and (not context.card.edition or (context.card.edition and context.card.edition.key ~= 'e_negative'))) then --non-negative tarots\r\n          G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n          card.ability.extra.num_remaining = card.ability.extra.num\r\n          G.E_MANAGER:add_event(Event({\r\n              trigger = 'before',\r\n              delay = 0.0,\r\n              func = (function()\r\n                local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sixth')\r\n                card:add_to_deck()\r\n                G.consumeables:emplace(card)\r\n                G.GAME.consumeable_buffer = 0\r\n              return true\r\n          end)}))\r\n          return {\r\n            message = localize('k_plus_spectral'),\r\n            colour = G.C.SECONDARY_SET.Spectral,\r\n            card = card\r\n          }\r\n        else\r\n          card.ability.extra.num_remaining = 1\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "supergreedyjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 3
      },
      "raw": "--Super Greedy Joker\r\n  key = 'supergreedyjoker',\r\n  loc_txt = {\r\n    name = 'Super Greedy Joker',\r\n    text = {\r\n      \"Create a random {C:attention}Editioned {}Joker\",\r\n      \"when a {C:diamonds}Diamond {}card scores\",\r\n      \"{C:inactive}(Must have room?)\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 3 },\r\n  cost = 9,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { num = 4, num_remaining = 4 } },\r\n  calculate = function(self, card, context)\r\n    if context.end_of_round or context.before then\r\n      picubeds_supergreedyjoker_emptyslots = G.jokers.config.card_limit - #G.jokers.cards\r\n    end\r\n    if context.cardarea == G.play then\r\n      if context.individual then\r\n        if context.other_card:is_suit(\"Diamonds\") and #G.jokers.cards < G.jokers.config.card_limit and picubeds_supergreedyjoker_emptyslots > 0 then\r\n          SMODS.calculate_effect({ message = localize('k_picubeds_diamond'), colour = G.C.SUITS[\"Diamonds\"] },\r\n              context.blueprint_card or card)\r\n          picubeds_supergreedyjoker_emptyslots = picubeds_supergreedyjoker_emptyslots - 1\r\n          G.E_MANAGER:add_event(Event({\r\n            func = function()\r\n              has_diamond = true\r\n              local mpcard = create_card('Joker', G.jokers, nil, nil, nil, nil, nil, 'pri')\r\n              local edition = poll_edition('edi'..G.GAME.round_resets.ante, 1, true, true)\r\n              mpcard:set_edition(edition, false, true)\r\n              mpcard:add_to_deck()\r\n              G.jokers:emplace(mpcard)\r\n              mpcard:start_materialize()\r\n              card:juice_up()\r\n              return true;\r\n            end\r\n          }))\r\n          \r\n        elseif context.other_card:is_suit(\"Diamonds\") and pseudorandom('supergreedyjoker'..G.GAME.round_resets.ante) < 1/30 then \r\n          SMODS.calculate_effect({ message = localize('k_picubeds_diamond'), colour = G.C.SUITS[\"Diamonds\"] },\r\n              context.blueprint_card or card)\r\n          G.E_MANAGER:add_event(Event({\r\n            func = function()\r\n              local mpcard = create_card('Joker', G.jokers, nil, nil, nil, nil, nil, 'pri')\r\n              local edition = \"e_negative\"\r\n              mpcard:set_edition(edition, false, true)\r\n              mpcard:add_to_deck()\r\n              G.jokers:emplace(mpcard)\r\n              mpcard:start_materialize()\r\n              card:juice_up()\r\n              return true;\r\n            end\r\n          }))\r\n          return {\r\n              message = localize(\"k_picubeds_diamond\"),\r\n              card = card,\r\n              colour = G.C.SUITS[\"Diamonds\"]\r\n          }\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "pi",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 3
      },
      "raw": "--Pi\r\n  key = 'pi',\r\n  loc_txt = {\r\n    name = 'Pi',\r\n    text = {\r\n      \"Cards with an {C:attention}edition{}\",\r\n      \"give {X:mult,C:white}X#1#{} Mult\"\r\n    }\r\n  },\r\n  rarity = 4,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 3 },\r\n  soul_pos = { x = 5, y = 3 },\r\n  cost = 20,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { Xmult = 1.5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.other_joker then\r\n      if context.other_joker.edition then\r\n        return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      end\r\n    elseif context.other_consumeable then\r\n      if context.other_consumeable.edition then\r\n        return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      end\r\n    elseif context.individual and context.cardarea == G.play then\r\n      if context.other_card.edition then\r\n        return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      end\r\n    elseif context.individual and context.cardarea == G.hand and not context.end_of_round then\r\n      if context.other_card.edition then\r\n        return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Sound",
      "key": "onbeat1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"onbeat1\",\r\n\tpath = \"onbeat1.ogg\","
    },
    {
      "type": "Sound",
      "key": "onbeat2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"onbeat2\",\r\n\tpath = \"onbeat2.ogg\","
    },
    {
      "type": "Joker",
      "key": "onbeat",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 5
      },
      "raw": "--On-beat\r\n  key = 'onbeat',\r\n  loc_txt = {\r\n    name = 'On-beat',\r\n    text = {\r\n      \"Retrigger the {C:attention}1st{}, {C:attention}3rd{},\",\r\n      \"and {C:attention}5th{} cards played\",\r\n      \"{s:0.8}After hand is played,\",\r\n      \"{s:0.8}becomes {s:0.8,C:attention}Off-beat{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 5 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { repetitions = 1, odds = 50, secret_art = false } },\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_picubed_offbeat\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  update = function(self, card, dt)\r\n    if card.ability.extra.secret_art then\r\n      card.children.center:set_sprite_pos({ x = 0, y = 6 })\r\n    else\r\n      card.children.center:set_sprite_pos({ x = 0, y = 5 })\r\n    end\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then \r\n      local card_pos = 1\r\n      for i = 1, #context.scoring_hand do\r\n        if context.scoring_hand[i] == context.other_card then\r\n          card_pos = i\r\n        end\r\n      end\r\n      if card_pos % 2 == 1 then\r\n        return {\r\n          message = localize('k_again_ex'),\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n    if context.after and context.main_eval and not context.blueprint then\r\n      G.E_MANAGER:add_event(Event({\r\n        func = function()\r\n            local da_odds = card.ability.extra.odds\r\n            card:set_ability(G.P_CENTERS[\"j_picubed_offbeat\"])\r\n            card:juice_up()\r\n            card.ability.extra.odds = da_odds\r\n            if pseudorandom('offbeat'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n                card.ability.extra.secret_art = true\r\n            else\r\n                card.ability.extra.secret_art = false\r\n            end\r\n            return true\r\n        end\r\n      }))\r\n      if picubed_config.custom_sound_effects then\r\n        return {\r\n          card = card,\r\n          message = localize(\"k_picubeds_swap\"),\r\n          volume = 0.5,\r\n          pitch = 1,\r\n          sound = \"picubed_onbeat1\"\r\n        }\r\n      else\r\n        return {\r\n          card = card,\r\n          message = localize('k_picubeds_swap')\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "offbeat",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 5
      },
      "raw": "--Off-beat\r\n  key = 'offbeat',\r\n  loc_txt = {\r\n    name = 'Off-beat',\r\n    text = {\r\n      \"Retrigger the {C:attention}2nd{}\",\r\n      \"and {C:attention}4th{} cards played\",\r\n      \"{s:0.8}After hand is played,\",\r\n      \"{s:0.8}becomes {s:0.8,C:attention}On-beat{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 5 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  in_pool = function(self, args) return false end,\r\n  config = { extra = { repetitions = 1, odds = 50, secret_art = false } },\r\n  --loc_vars = function(self, info_queue, card)\r\n    --info_queue[#info_queue+1] = {key = \"k_picubeds_onbeat_titl\", set = 'Other'}\r\n    --return { vars = { card.ability.max_highlighted } }\r\n  --end,\r\n  update = function(self, card, dt)\r\n    if card.ability.extra.secret_art then\r\n      card.children.center:set_sprite_pos({ x = 1, y = 6 })\r\n    else\r\n      card.children.center:set_sprite_pos({ x = 1, y = 5 })\r\n    end\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then \r\n      local card_pos = 1\r\n      for i = 1, #context.scoring_hand do\r\n        if context.scoring_hand[i] == context.other_card then\r\n          card_pos = i\r\n        end\r\n      end\r\n      if card_pos % 2 ~= 1 then\r\n        return {\r\n          message = localize('k_again_ex'),\r\n          repetitions = card.ability.extra.repetitions,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n    if context.after and context.main_eval and not context.blueprint then\r\n        \r\n      G.E_MANAGER:add_event(Event({\r\n        func = function()\r\n            local da_odds = card.ability.extra.odds\r\n            card:set_ability(G.P_CENTERS[\"j_picubed_onbeat\"])\r\n            card:juice_up()\r\n            card.ability.extra.odds = da_odds\r\n            if pseudorandom('offbeat'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n                card.ability.extra.secret_art = true\r\n            else\r\n                card.ability.extra.secret_art = false\r\n            end\r\n            return true\r\n        end\r\n      }))\r\n      if picubed_config.custom_sound_effects then\r\n        return {\r\n          card = card,\r\n          message = localize(\"k_picubeds_swap\"),\r\n          volume = 0.5,\r\n          pitch = 1,\r\n          sound = \"picubed_onbeat2\"\r\n        }\r\n      else\r\n        return {\r\n          card = card,\r\n          message = localize('k_picubeds_swap')\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "polyrhythm",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 5
      },
      "raw": "--Polyrhythm\r\n  key = 'polyrhythm',\r\n  loc_txt = {\r\n    name = 'Polyrhythm',\r\n    text = {\r\n      \"Receive {C:money}$#1#{} every {C:attention}#2#{} {C:inactive}[#4#]{}\",\r\n      \"hands played, create a {C:tarot}Tarot{}\",\r\n      \"card every {C:attention}#3#{} {C:inactive}[#5#]{} discards\",\r\n      \"{C:inactive}(Must have room){}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 5 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 3, money_req = 3, tarot_req = 4, money_count = 3, tarot_count = 4 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money, card.ability.extra.money_req, card.ability.extra.tarot_req,card.ability.extra.money_count, card.ability.extra.tarot_count } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main and not context.blueprint then\r\n      card.ability.extra.money_count = card.ability.extra.money_count - 1\r\n      if card.ability.extra.money_count > 0 then\r\n        return {\r\n          card = card,\r\n          message = tostring(card.ability.extra.money_count),\r\n          colour = G.C.MONEY\r\n        }\r\n      end\r\n    end\r\n    if context.joker_main and card.ability.extra.money_count <= 0 then\r\n      card.ability.extra.money_count = card.ability.extra.money_req\r\n      return {\r\n          colour = G.C.MONEY,\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n      }\r\n    end\r\n    if context.pre_discard and not context.blueprint then\r\n      card.ability.extra.tarot_count = card.ability.extra.tarot_count - 1\r\n      if card.ability.extra.tarot_count > 0 then\r\n        return {\r\n          colour = G.C.PURPLE,\r\n          card = card,\r\n          message = tostring(card.ability.extra.tarot_count)\r\n        }\r\n      end\r\n    end\r\n    if context.pre_discard and card.ability.extra.tarot_count <= 0 then\r\n      card.ability.extra.tarot_count = card.ability.extra.tarot_req\r\n      if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\r\n        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n        G.E_MANAGER:add_event(Event({\r\n            func = (function()\r\n                G.E_MANAGER:add_event(Event({\r\n                    func = function()\r\n                        SMODS.add_card {\r\n                            set = 'Tarot',\r\n                        }\r\n                        G.GAME.consumeable_buffer = 0\r\n                        return true\r\n                    end\r\n                }))\r\n                SMODS.calculate_effect({ message = localize('k_plus_tarot'), colour = G.C.PURPLE },\r\n                    context.blueprint_card or card)\r\n                return true\r\n            end)\r\n        }))\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Sound",
      "key": "pot1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pot1\",\r\n\tpath = \"pot1.ogg\","
    },
    {
      "type": "Sound",
      "key": "pot2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"pot2\",\r\n\tpath = \"pot2.ogg\","
    },
    {
      "type": "Joker",
      "key": "pot",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 5
      },
      "raw": "--Pot\r\n  key = 'pot',\r\n  loc_txt = {\r\n    name = 'Pot',\r\n    text = {\r\n      \"{C:green}#1# in #2#{} chance for {X:mult,C:white}X#3#{} Mult,\",\r\n      \"gives a {C:attention}cue{} if this Joker\",\r\n      \"will activate for played hand\",\r\n      \"{C:inactive}Currently #4#{}\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 5 },\r\n  soul_pos = { x = 7, y = 6 },\r\n  cost = 8,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { odds = 3, Xmult = 4, is_active = false } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { \r\n      vars = { \r\n        (G.GAME.probabilities.normal or 1), \r\n        card.ability.extra.odds, \r\n        card.ability.extra.Xmult, \r\n        localize { type = 'variable', key = ((card.ability.extra.is_active and 'k_picubeds_pot_active') or 'k_picubeds_pot_inactive'), vars = { card.ability.extra.is_active } } \r\n      } \r\n    }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if (context.first_hand_drawn or context.hand_drawn) and not context.blueprint then\r\n      if pseudorandom('D2'..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n        card.ability.extra.is_active = true\r\n        local eval = function() return card.ability.extra.is_active and not G.RESET_JIGGLES end\r\n        juice_card_until(card, eval, true)\r\n        if picubed_config.custom_sound_effects then\r\n          return {\r\n            card = card,\r\n            message = localize('k_picubeds_pot_ready'),\r\n            volume = 0.5,\r\n            pitch = 1,\r\n            sound = \"picubed_pot1\"\r\n          }\r\n        else\r\n          return {\r\n            card = card,\r\n            message = localize('k_picubeds_pot_active')\r\n          }\r\n        end\r\n      end\r\n    end\r\n    if context.joker_main and card.ability.extra.is_active then\r\n      if picubed_config.custom_sound_effects then\r\n        return {\r\n          volume = 0.4,\r\n          sound = \"picubed_rhythm2\",\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      else\r\n        return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n        }\r\n      end\r\n    end\r\n    if context.pre_discard and not context.blueprint and not context.hook then\r\n      if card.ability.extra.is_active then\r\n        card.ability.extra.is_active = false\r\n        if picubed_config.custom_sound_effects then\r\n          return {\r\n            volume = 0.5,\r\n            pitch = 1,\r\n            sound = \"picubed_pot2\",\r\n            message = localize(\"k_picubeds_pot_miss\"),\r\n            card = card\r\n          }\r\n        else\r\n          return {\r\n            message = localize(\"k_picubeds_pot_miss\"),\r\n            card = card\r\n          }\r\n        end\r\n      end\r\n    end\r\n    if context.after then\r\n      card.ability.extra.is_active = false\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "supergluttonousjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 5
      },
      "raw": "--Super Gluttonous Joker\r\n  key = 'supergluttonousjoker',\r\n  loc_txt = {\r\n    name = 'Super Gluttonous Joker',\r\n    text = {\r\n      \"When a {C:clubs}Club{} card is\",\r\n      \"drawn to hand, draw an\",\r\n      \"{C:attention}additional{} card to hand\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 5 },\r\n  cost = 9,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  calculate = function(self, card, context)\r\n    if (context.first_hand_drawn or context.hand_drawn) then\r\n      local club_count = 0\r\n      for k,v in ipairs(context.hand_drawn) do\r\n        if v:is_suit(\"Clubs\") then\r\n          club_count = club_count + 1\r\n        end\r\n      end\r\n      if club_count > 0 and #G.deck.cards > 0 then\r\n        G.E_MANAGER:add_event(Event({\r\n          func = function()\r\n            G.FUNCS.draw_from_deck_to_hand(club_count)\r\n        return true end \r\n        }))  \r\n        return {\r\n          message = localize(\"k_picubeds_club\"),\r\n          card = card,\r\n          colour = G.C.SUITS[\"Clubs\"]\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "mountjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 5
      },
      "raw": "--Mount Joker\r\n  key = 'mountjoker',\r\n  loc_txt = {\r\n    name = 'Mount Joker',\r\n    text = {\r\n      \"If played hand has at\",\r\n      \"least 4 {C:attention}Stone{} cards,\",\r\n      \"poker hand is your\",\r\n      \"{C:attention}most played poker hand{}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 5 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  enhancement_gate = 'm_stone',\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    return {\r\n      vars = { card.ability.max_highlighted}\r\n    }\r\n  end,\r\n  calculate = function(self, card, context) --this joker is all patch, in evaluate_poker_hand(hand)\r\n    local stone_count = 0\r\n    for k,v in ipairs(G.hand.highlighted) do\r\n        if SMODS.has_enhancement(v, 'm_stone') then \r\n            stone_count = stone_count + 1\r\n        end\r\n    end\r\n    for k,v in ipairs(G.play.cards) do\r\n        if SMODS.has_enhancement(v, 'm_stone') then \r\n            stone_count = stone_count + 1\r\n        end\r\n    end\r\n    if context.modify_scoring_hand and not context.blueprint and stone_count >= 4 then\r\n      return {\r\n          add_to_hand = true\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "oxplow",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 5
      },
      "raw": "--Ox Plow\r\n  key = 'oxplow',\r\n  loc_txt = {\r\n    name = 'Ox Plow',\r\n    text = {\r\n      \"Earn {C:money}$#1#{} if played\",\r\n      \"hand is {C:attention}not{} your {C:attention}most{}\",\r\n      \"{C:attention}played poker hand{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 5 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.after then\r\n      local is_most = true\r\n      local play_more_than = (G.GAME.hands[context.scoring_name].played or 0)\r\n      for k, v in pairs(G.GAME.hands) do\r\n        if k ~= context.scoring_name and v.played >= play_more_than and v.visible then\r\n          is_most = false\r\n          break\r\n        end\r\n      end\r\n      if not is_most then\r\n        return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "offthehook",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 5
      },
      "raw": "--Off the Hook\r\n  key = 'offthehook',\r\n  loc_txt = {\r\n    name = 'Off the Hook',\r\n    text = {\r\n      \"After play, all\",\r\n      \"{C:attention}unenhanced{} cards held\",\r\n      \"in hand are discarded\",\r\n      \"{C:chips}+#1#{} Hand\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 5 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { h_plays = 1 } },\r\n  loc_vars = function(self, info_queue, card)\r\n      return { vars = { card.ability.extra.h_plays } }\r\n  end,\r\n  add_to_deck = function(self, card, from_debuff)\r\n      G.GAME.round_resets.hands = G.GAME.round_resets.hands + card.ability.extra.h_plays\r\n      ease_hands_played(card.ability.extra.h_plays)\r\n  end,\r\n  remove_from_deck = function(self, card, from_debuff)\r\n      G.GAME.round_resets.hands = G.GAME.round_resets.hands - card.ability.extra.h_plays\r\n      ease_hands_played(-card.ability.extra.h_plays)\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.press_play and not context.blueprint and not (G.GAME.blind.config.blind.key == (\"bl_hook\" or \"bl_cry_obsidian_orb\" or \"b_bunc_bulwark\")) then\r\n      local saved_highlight = G.hand.config.highlighted_limit\r\n      G.hand.config.highlighted_limit = 31415\r\n      G.E_MANAGER:add_event(Event({ func = function()\r\n            for k, v in ipairs(G.hand.cards) do\r\n                if v.config.center == G.P_CENTERS.c_base then\r\n                    G.hand:add_to_highlighted(v, true)\r\n                    any_selected = true\r\n                end\r\n            end\r\n            if any_selected then G.FUNCS.discard_cards_from_highlighted(nil, true) end\r\n      return true end }))\r\n      G.E_MANAGER:add_event(Event({ func = function() \r\n          G.hand.config.highlighted_limit = saved_highlight \r\n          play_sound('card1', 1)\r\n      return true end }))\r\n      return {\r\n            message = localize(\"k_picubeds_offthehook\"),\r\n            card = card,\r\n      }\r\n    elseif context.before and not context.blueprint and (G.GAME.blind.config.blind.key == (\"bl_hook\" or \"b_cry_obsidian_orb\" or \"b_bunc_bulwark\")) then\r\n      local saved_highlight = G.hand.config.highlighted_limit\r\n      G.hand.config.highlighted_limit = 31415\r\n      G.E_MANAGER:add_event(Event({ func = function()\r\n            for k, v in ipairs(G.hand.cards) do\r\n                if v.config.center == G.P_CENTERS.c_base then\r\n                    G.hand:add_to_highlighted(v, true)\r\n                    any_selected = true\r\n                end\r\n            end\r\n            if any_selected then G.FUNCS.discard_cards_from_highlighted(nil, true) end\r\n      return true end }))\r\n      G.E_MANAGER:add_event(Event({ func = function() \r\n          G.hand.config.highlighted_limit = saved_highlight \r\n          play_sound('card1', 1)\r\n      return true end }))\r\n      return {\r\n            message = localize(\"k_picubeds_offthehook\"),\r\n            card = card,\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "eyepatch",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 6
      },
      "raw": "--Eye Patch\r\n  key = 'eyepatch',\r\n  loc_txt = {\r\n    name = 'Eye Patch',\r\n    text = {\r\n      \"This Joker gains {X:mult,C:white}X#2#{} Mult\",\r\n      \"if {C:attention}poker hand{} has {C:attention}not{}\",\r\n      \"been played this {C:attention}Ante{}, resets\",\r\n      \"when {C:attention}Boss Blind{} is defeated\",\r\n      \"{C:inactive}(Currently {X:mult,C:white}X#1#{} {C:inactive}Mult){}\",\r\n      \"{s:0.8}#3#{}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 6 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { Xmult = 1, Xmult_mod = 1/3, hand_list = {}, displ_list = {} } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { \r\n        card.ability.extra.Xmult, \r\n        card.ability.extra.Xmult_mod,\r\n        table.concat(card.ability.extra.displ_list or {}, \", \")\r\n      } \r\n    }\r\n  end,\r\n  add_to_deck = function(self, card, from_debuff)\r\n    for k, v in pairs(G.handlist) do\r\n      card.ability.extra.hand_list[v] = false\r\n    end\r\n  end,\r\n  calculate = function(self, card, context)\r\n    card.ability.extra.displ_list = {}\r\n    for k, v in pairs(G.handlist) do\r\n      if card.ability.extra.hand_list[v] == true then\r\n        table.insert(card.ability.extra.displ_list, tostring(localize(v, 'poker_hands')))\r\n      end\r\n    end\r\n    --[[local eval = function() return card.ability.extra.hand_list[context.scoring_name or nil] == false and #G.hand.highlighted > 0 and not G.RESET_JIGGLES end \r\n    juice_card_until(card, eval, true)]]\r\n    \r\n    if card.ability.extra.hand_list[context.scoring_name or nil] == false and #G.hand.highlighted > 0 and not G.RESET_JIGGLES then\r\n      G.E_MANAGER:add_event(Event({\r\n        trigger = 'after', blocking = false, blockable = false, timer = 'REAL',\r\n        func = (function() card:juice_up(0.1, 0.1) return true end)\r\n      }))\r\n    end\r\n    \r\n    if context.before and context.main_eval and not context.blueprint then\r\n        if card.ability.extra.hand_list[context.scoring_name] == false then\r\n            card.ability.extra.hand_list[context.scoring_name] = true\r\n            card.ability.extra.Xmult = card.ability.extra.Xmult + card.ability.extra.Xmult_mod\r\n            return {\r\n                message = localize('k_upgrade_ex'),\r\n                card = card\r\n            }\r\n        end\r\n    end\r\n    if context.joker_main then\r\n        return {\r\n            xmult = card.ability.extra.Xmult\r\n        }\r\n    end\r\n    if context.end_of_round and not context.blueprint and G.GAME.blind.boss and card.ability.extra.Xmult > 1 then\r\n      card.ability.extra.displ_list = {}\r\n      for k, v in pairs(G.handlist) do\r\n        card.ability.extra.hand_list[v] = false\r\n      end\r\n\r\n      card.ability.extra.Xmult = 1\r\n      return {\r\n          card = card,\r\n          message = localize('k_reset'),\r\n          colour = G.C.RED\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "timidjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 6
      },
      "raw": "--Timid Joker\r\n  key = 'timidjoker',\r\n  loc_txt = {\r\n    name = 'Timid Joker',\r\n    text = {\r\n      \"{C:mult}+#1#{} Mult if this Joker\",\r\n      \"is the {C:attention}right-most{} Joker\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 6 },\r\n  display_size = { w = 0.9 * 71, h = 0.9 * 95 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 20 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  update = function(self, card, dt)\r\n    if G.jokers then\r\n      if G.jokers.cards[#G.jokers.cards] == card then\r\n        card.children.center:set_sprite_pos({x = 4, y = 6})\r\n      else\r\n        card.children.center:set_sprite_pos({x = 3, y = 6})\r\n      end\r\n    else\r\n      card.children.center:set_sprite_pos({x = 4, y = 6})\r\n    end\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main and G.jokers.cards[#G.jokers.cards] == card then\r\n      return {\r\n\t\t\t\tmessage = localize { type = 'variable', key = 'a_mult', vars = { card.ability.extra.mult } },\r\n\t\t\t\tmult_mod = card.ability.extra.mult\r\n\t\t\t}\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "rushedjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 5
      },
      "raw": "--Rushed Joker\r\n  key = 'rushedjoker',\r\n  loc_txt = {\r\n    name = 'Rushed Joker',\r\n    text = {\r\n      \"{C:attention}First{} card played\",\r\n      \"gives {C:mult}+#1#{} Mult\",\r\n      \"when scored\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 5 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.individual and context.cardarea == G.play then\r\n      if context.other_card == context.scoring_hand[1] and not context.other_card.debuff then\r\n        return {\r\n\t\t\t\t\tmult = card.ability.extra.mult,\r\n\t\t\t\t\tcard = card\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "tyredumpyard",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 6
      },
      "raw": "--Tyre Dumpyard\r\n  key = 'tyredumpyard',\r\n  loc_txt = {\r\n    name = 'Tyre Dumpyard',\r\n    text = {\r\n      \"When {C:attention}Boss Blind{} is selected,\",\r\n      \"fill all Consumable slots\",\r\n      \"with {C:attention}The Wheel of Fortune{}\",\r\n      \"{C:inactive}(Must have room){}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 6 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.c_wheel_of_fortune\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.setting_blind and not context.repetition and not context.individual and context.blind.boss and not context.blueprint then\r\n      \r\n      for i=1, (G.consumeables.config.card_limit) do\r\n        if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\r\n          G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n          G.E_MANAGER:add_event(Event({\r\n            trigger = 'before',\r\n            delay = 0.0,\r\n            func = (function()\r\n              local card = create_card('Tarot', G.consumeables, nil, nil, nil, nil, 'c_wheel_of_fortune')\r\n              card:add_to_deck()\r\n              G.consumeables:emplace(card)\r\n              G.GAME.consumeable_buffer = 0\r\n              card:juice_up(0.5, 0.5)\r\n              return true\r\n            end)}))\r\n          card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_plus_tarot'), colour = G.C.PURPLE})\r\n        end\r\n      end\r\n    \r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "acorntree",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 6
      },
      "raw": "--Acorn Tree\r\n  key = 'acorntree',\r\n  loc_txt = {\r\n    name = 'Acorn Tree',\r\n    text = {\r\n      \"When {C:attention}Blind{} is selected, all\",\r\n      \"Jokers are {C:attention}flipped and{}\",\r\n      \"{C:attention}shuffled{}, and earn {C:money}$#1#{} for\",\r\n      \"each other Joker affected\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 6 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.setting_blind and not context.blueprint then\r\n      G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 0.2, func = function() \r\n        for k, v in ipairs(G.jokers.cards) do\r\n          v:flip()\r\n        end\r\n      return true end }))\r\n      if #G.jokers.cards > 1 then \r\n        G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 0.2, func = function() \r\n            G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 0.85);return true end })) \r\n            delay(0.15)\r\n            G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1.15);return true end })) \r\n            delay(0.15)\r\n            G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1);return true end })) \r\n            delay(0.5)\r\n        return true end }))\r\n        return {\r\n          dollars = card.ability.extra.money * (#G.jokers.cards - 1),\r\n          card = card,\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "forgery",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 5
      },
      "raw": "--Forgery\r\n  key = 'forgery',\r\n  loc_txt = {\r\n    name = 'Forgery',\r\n    text = {\r\n      \"When {C:attention}Blind{} is selected,\",\r\n      \"{C:attention}destroy{} 1 random card in\",\r\n      \"{C:attention}deck{}, and add half its\",\r\n      \"{C:chips}Chips{} to this Joker as {C:mult}Mult\",\r\n      \"{C:inactive}(Currently {C:mult}+#1#{C:inactive} Mult)\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 5 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 0 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.setting_blind and not context.blueprint then\r\n      local card_is_kil = pseudorandom_element(G.playing_cards, pseudoseed('forgery'..G.GAME.round_resets.ante))\r\n      local card_mult = 0\r\n      if SMODS.has_no_rank(card_is_kil) then -- rankless cards\r\n        card_mult = card_mult + 0\r\n      elseif card_is_kil:get_id() > 14 then --UnStable ranks \r\n        if card_is_kil:get_id() == 15 then -- 0 rank\r\n          card_mult = card_mult + 0\r\n        elseif card_is_kil:get_id() == 16 then -- 0.5 rank\r\n          card_mult = card_mult + 0.5\r\n        elseif card_is_kil:get_id() == 17 then -- 1 rank\r\n          card_mult = card_mult + 1\r\n        elseif card_is_kil:get_id() == 18 then -- sqrt 2 rank\r\n          card_mult = card_mult + 1.41\r\n        elseif card_is_kil:get_id() == 19 then -- e rank\r\n          card_mult = card_mult + 2.72\r\n        elseif card_is_kil:get_id() == 20 then -- pi rank\r\n          card_mult = card_mult + 3.14\r\n        elseif card_is_kil:get_id() == 21 then -- ??? rank\r\n          card_mult = card_mult + pseudorandom('???') * 11\r\n        elseif card_is_kil:get_id() == 22 then -- 21 rank\r\n          card_mult = card_mult + 21\r\n        elseif card_is_kil:get_id() == 23 then -- 11 rank\r\n          card_mult = card_mult + 11\r\n        elseif card_is_kil:get_id() == 24 then -- 12 rank\r\n          card_mult = card_mult + 12\r\n        elseif card_is_kil:get_id() == 25 then -- 13 rank\r\n          card_mult = card_mult + 13\r\n        elseif card_is_kil:get_id() == 26 then -- 25 rank\r\n          card_mult = card_mult + 25\r\n        elseif card_is_kil:get_id() == 27 then -- 161 rank\r\n          card_mult = card_mult + 161\r\n        end\r\n      elseif card_is_kil:get_id() > 10 then --face cards or aces\r\n        if card_is_kil:get_id() < 14 then --face cards\r\n          card_mult = card_mult + 10\r\n        else --aces\r\n          card_mult = card_mult + 11\r\n        end\r\n      elseif card_is_kil:get_id() <= 10 and card_is_kil:get_id() >= 2 then --numbered cards (vanilla only)\r\n          card_mult = card_mult + card_is_kil:get_id()\r\n      end\r\n      card_mult = card_mult + (card_is_kil.ability.perma_bonus or 0) + (card_is_kil.ability.perma_h_chips or 0)\r\n      if SMODS.has_enhancement(card_is_kil, 'm_bonus') then -- bonus card (vanilla)\r\n          card_mult = card_mult + 30\r\n      elseif SMODS.has_enhancement(card_is_kil, 'm_akyrs_ash_card') then -- ash card (aikoyori's shenanigans)\r\n          card_mult = card_mult + 30\r\n      end\r\n      if card_is_kil.edition then\r\n        if card_is_kil.edition.key == 'e_foil' then -- foil (vanilla)\r\n            card_mult = card_mult + 50\r\n        elseif card_is_kil.edition.key == 'e_cry_noisy' then -- noisy (cryptid)\r\n            card_mult = card_mult + pseudorandom('noisy') * 150\r\n        elseif card_is_kil.edition.key == 'e_ortalab_anaglyphic' then -- anaglyphic (ortalab)\r\n            card_mult = card_mult + 20\r\n        elseif card_is_kil.edition.key == 'e_cry_mosaic' then -- mosaic (cryptid)\r\n            card_mult = 2.5 * card_mult\r\n        elseif card_is_kil.edition.key == 'e_akyrs_texelated' then -- texelated (aikoyori's shenanigans)\r\n            card_mult = 0.8 * card_mult\r\n        elseif card_is_kil.edition.key == 'e_bunc_glitter' then -- glitter (bunco)\r\n            card_mult = 1.3 * card_mult\r\n        elseif card_is_kil.edition.key == 'e_yahimod_evil' then -- evil (yahimod)\r\n            card_mult = 1.5 * card_mult\r\n        end\r\n      end\r\n      if card_is_kil.ability.perma_x_chips and card_is_kil.ability.perma_x_chips > 1 then\r\n        card_mult = card_mult * card_is_kil.ability.perma_x_chips\r\n      end\r\n      if card_is_kil.ability.perma_h_x_chips and card_is_kil.ability.perma_h_x_chips > 1 then\r\n        card_mult = card_mult * card_is_kil.ability.perma_h_x_chips\r\n      end       \r\n      G.E_MANAGER:add_event(Event({\r\n        trigger = 'before',\r\n        delay = 0.1,\r\n        func = function()\r\n          draw_card(G.deck, G.play, 90, 'up', nil, card_is_kil)\r\n          delay(1)\r\n          return true\r\n        end\r\n      }))\r\n      G.E_MANAGER:add_event(Event({\r\n        trigger = 'before',\r\n        delay = 0.1,\r\n        func = function()\r\n          SMODS.destroy_cards(card_is_kil)\r\n          SMODS.calculate_effect({ message = localize { type = 'variable', key = 'a_mult', vars = { card_mult * 0.5 } }, colour = G.C.MULT, sound = 'slice1', pitch = 0.96 + math.random() * 0.08 }, card )\r\n          return true \r\n        end\r\n      }))\r\n      card.ability.extra.mult = card.ability.extra.mult + card_mult * 0.5\r\n    end\r\n    if context.joker_main then\r\n      return {\r\n          mult = card.ability.extra.mult,\r\n          card = card\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "yawningcat",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 6
      },
      "raw": "--Yawning Cat\r\n  key = 'yawningcat',\r\n  loc_txt = {\r\n    name = 'Yawning Cat',\r\n    text = {\r\n      \"If {C:attention}played hand{} contains\",\r\n      \"at least {C:attention}#1#{} scoring\",\r\n      \"cards, {C:attention}retrigger{} playing\",\r\n      \"cards {C:attention}#2# additional times{}\"\r\n    }\r\n  },\r\n  rarity = 4,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 6 },\r\n  soul_pos = { x = 9, y = 6 },\r\n  cost = 20,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { num = 3, retriggers = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.num, card.ability.extra.retriggers } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if #(context.scoring_hand or {}) >= card.ability.extra.num and context.cardarea == G.play and context.repetition and not context.repetition_only then\r\n      return {\r\n          repetitions = card.ability.extra.retriggers,\r\n          card = card\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "weemini",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 8
      },
      "raw": "--Wee Mini\r\n  key = 'weemini',\r\n  loc_txt = {\r\n    name = 'Wee Mini',\r\n    text = {\r\n      \"If played hand or cards held\",\r\n      \"in hand contain a {C:attention}2{},\",\r\n      \"played hand contains a\",\r\n      \"{C:attention}Two Pair{} and apply {C:attention}Splash{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 8 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_splash\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    local count_2 = 0\r\n    for k,v in ipairs(G.hand.highlighted) do\r\n        if v:get_id() == 2 then \r\n            count_2 = count_2 + 1\r\n        end\r\n    end\r\n    for k,v in ipairs(G.play.cards) do\r\n        if v:get_id() == 2 then \r\n            count_2 = count_2 + 1\r\n        end\r\n    end\r\n    for k,v in ipairs(G.hand.cards) do\r\n        if v:get_id() == 2 then\r\n            count_2 = count_2 + 1\r\n        end\r\n    end\r\n    if context.modify_scoring_hand and not context.blueprint and count_2 >= 1 then\r\n      return {\r\n          add_to_hand = true\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "lowballdraw",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 9,
        "y": 7
      },
      "raw": "--Lowball Draw\r\n  key = 'lowballdraw',\r\n  loc_txt = {\r\n    name = 'Lowball Draw',\r\n    text = {\r\n      \"If scoring hand\",\r\n      \"contains a {C:attention}2{}\",\r\n      \"and a {C:attention}7{}, earn {C:money}$#1#{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 9, y = 7 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 5 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.before then\r\n      local has_2 = false\r\n      local has_7 = false\r\n      for k,v in ipairs(context.scoring_hand) do\r\n        if v:get_id() == 2 then\r\n          has_2 = true\r\n        end\r\n        if v:get_id() == 7 then\r\n          has_7 = true\r\n        end\r\n      end\r\n      if has_7 and has_2 then\r\n        return {\r\n          dollars = card.ability.extra.money,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "chickenjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 8
      },
      "raw": "--Chicken Joker!\r\n  key = 'chickenjoker',\r\n  loc_txt = {\r\n    name = 'Chicken Joker!',\r\n    text = {\r\n      \"If scoring hand contains\",\r\n      \"a {C:attention}Stone{} card or a {C:attention}Steel{}\",\r\n      \"card, {C:attention}fill{} empty Joker\",\r\n      \"slots with {C:dark_edition}Editioned{} {C:attention}Popcorn{}\"\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 8 },\r\n  cost = 5,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_stone\r\n    info_queue[#info_queue+1] = G.P_CENTERS.m_steel\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_popcorn\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  in_pool = function(self, args)\r\n    for kk, vv in pairs(G.playing_cards or {}) do\r\n        if SMODS.has_enhancement(vv, 'm_stone') or SMODS.has_enhancement(vv, 'm_steel') then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.before and context.main_eval and not context.blueprint then\r\n      local has_flint_or_steel = false\r\n      for kk, vv in pairs(G.playing_cards or {}) do\r\n        if SMODS.has_enhancement(vv, 'm_stone') or SMODS.has_enhancement(vv, 'm_steel') then\r\n            has_flint_or_steel = true\r\n        end\r\n      end\r\n      if has_flint_or_steel then\r\n        local joker_limit_buffer = 0\r\n        for i=1, (G.jokers.config.card_limit) do\r\n          if (#G.jokers.cards - joker_limit_buffer) < G.jokers.config.card_limit then\r\n            print(#G.jokers.cards)\r\n            print(G.jokers.config.card_limit)\r\n            local polled_edition = poll_edition('iamsteve'..G.GAME.round_resets.ante, 1, false, true)\r\n            if polled_edition ~= 'e_negative' then joker_limit_buffer = joker_limit_buffer - 1 end\r\n            G.E_MANAGER:add_event(Event({\r\n              trigger = 'before',\r\n              delay = 0.25,\r\n              func = (function()\r\n                local mpcard = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_popcorn', 'chi')\r\n                mpcard:set_edition(polled_edition, false, true)\r\n                mpcard:add_to_deck()\r\n                G.jokers:emplace(mpcard)\r\n                mpcard:start_materialize()\r\n                card:juice_up()\r\n                return true\r\n            end)}))\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "shrapnel",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 4,
        "y": 7
      },
      "raw": "--Shrapnel\r\n  key = 'shrapnel',\r\n  loc_txt = {\r\n    name = 'Shrapnel',\r\n    text = {\r\n      \"When a {C:attention}Consumable card{} is\",\r\n      \"used, all playing cards in hand\",\r\n      \"receive a {C:attention}permanent{} {C:mult}+#1#{} Mult\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 4, y = 7 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { mult = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.mult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.using_consumeable and G.hand.cards then\r\n      for k, v in ipairs(G.hand.cards) do\r\n        v.ability.perma_mult = v.ability.perma_mult or 0 \r\n        v.ability.perma_mult = v.ability.perma_mult + card.ability.extra.mult\r\n        G.E_MANAGER:add_event(Event({\r\n        trigger = 'before',\r\n        delay = 0.15,\r\n        func = (function()\r\n          v:juice_up()\r\n          return true\r\n        end)}))\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "victimcard",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 7
      },
      "raw": "--Victim Card\r\n  key = 'victimcard',\r\n  loc_txt = {\r\n    name = 'Victim Card',\r\n    text = {\r\n      \"This Joker gains {X:mult,C:white}X#1#{} Mult if\",\r\n      \"played hand does {C:attention}not beat{} the\",\r\n      \"blind, this Joker is {C:attention}destroyed{}\",\r\n      \"after reaching {X:mult,C:white}X#2#{} Mult\",\r\n      \"{C:inactive}(Currently{} {X:mult,C:white}X#3#{} {C:inactive}Mult){}\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 7 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = false,\r\n  eternal_compat = false,\r\n  config = { extra = { Xmult_mod = 0.2, Xmult_cap = 4, Xmult = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult_mod, card.ability.extra.Xmult_cap, card.ability.extra.Xmult } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.pre_discard and not context.blueprint then\r\n      picubed_victimcard_prehand = false\r\n    end\r\n    if context.hand_drawn and picubed_victimcard_prehand and not context.blueprint and G.GAME.current_round.hands_played ~= 0 then\r\n      card.ability.extra.Xmult = card.ability.extra.Xmult + card.ability.extra.Xmult_mod\r\n      if card.ability.extra.Xmult >= card.ability.extra.Xmult_cap then\r\n        G.E_MANAGER:add_event(Event({\r\n          func = function()\r\n            play_sound('tarot1')\r\n            card.T.r = -0.2\r\n            card:juice_up(0.3, 0.4)\r\n            card.states.drag.is = true\r\n            card.children.center.pinch.x = true\r\n            G.E_MANAGER:add_event(Event({\r\n                trigger = 'after',\r\n                delay = 0.3,\r\n                blockable = false,\r\n                func = function()\r\n                    card:remove()\r\n                    return true\r\n                end\r\n            }))\r\n            return true\r\n          end\r\n        }))\r\n        return {\r\n          message = localize('k_picubeds_victimcard'),\r\n          colour = G.C.MULT,\r\n          card = card\r\n        }\r\n      else\r\n        return {\r\n          message = localize('k_upgrade_ex'),\r\n          colour = G.C.MULT,\r\n          card = card\r\n        }\r\n      end\r\n    end\r\n    if context.joker_main then\r\n      picubed_victimcard_prehand = true\r\n      return {\r\n\t\t\t\tmessage = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n\t\t\t\tXmult_mod = card.ability.extra.Xmult\r\n\t\t\t}\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "translucentjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 8,
        "y": 7
      },
      "raw": "--Translucent Joker\r\n  key = 'translucentjoker',\r\n  loc_txt = {\r\n    name = 'Translucent Joker',\r\n    text = {\r\n      \"After {C:attention}#1#{} rounds,\",\r\n      \"sell this card to\",\r\n      \"create an {C:attention}Invisible Joker{}\",\r\n      \"{C:inactive}(Currently {}{C:attention}#2#{}{C:inactive}/#1# rounds){}\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 8, y = 7 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  config = { extra = { rounds_total = 2, rounds = 0 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_invisible\r\n    return { vars = { card.ability.extra.rounds_total, card.ability.extra.rounds } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.selling_self and (card.ability.extra.rounds >= card.ability.extra.rounds_total) and not context.blueprint then\r\n      local mpcard = create_card('Joker', G.jokers, nil, 0, nil, nil, 'j_invisible', 'tra')\r\n      mpcard:add_to_deck()\r\n      G.jokers:emplace(mpcard)\r\n      mpcard:start_materialize()\r\n    end\r\n    if context.end_of_round and context.game_over == false and context.main_eval and not context.blueprint then\r\n        card.ability.extra.rounds = card.ability.extra.rounds + 1\r\n        if card.ability.extra.invis_rounds == card.ability.extra.rounds_total then\r\n            local eval = function(card) return not card.REMOVED end\r\n            juice_card_until(card, eval, true)\r\n        end\r\n        return {\r\n            message = (card.ability.extra.rounds < card.ability.extra.rounds_total) and\r\n                (card.ability.extra.rounds .. '/' .. card.ability.extra.rounds_total) or\r\n                localize('k_active_ex'),\r\n            colour = G.C.FILTER\r\n        }\r\n    end\r\n    \r\n  end"
    },
    {
      "type": "Joker",
      "key": "cyclone",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 8
      },
      "raw": "--Cyclone\r\n  key = 'cyclone',\r\n  loc_txt = {\r\n    name = 'Cyclone',\r\n    text = {\r\n      \"Scored cards with a {C:attention}Seal{}\",\r\n      \"create the {C:planet}Planet{} card of\",\r\n      \"played {C:attention}poker hand{}\",\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 8 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play then\r\n      if context.individual then\r\n        if context.other_card.ability.seal then\r\n          if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\r\n            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n            local _planet = nil\r\n            for k, v in pairs(G.P_CENTER_POOLS.Planet) do\r\n                if v.config.hand_type == G.GAME.last_hand_played then\r\n                    _planet = v.key\r\n                end\r\n            end\r\n            G.E_MANAGER:add_event(Event({\r\n              trigger = 'before',\r\n              delay = 0.0,\r\n              func = (function()\r\n                SMODS.add_card({ key = _planet or 'c_pluto' })\r\n                G.GAME.consumeable_buffer = 0\r\n                --card:juice_up(0.5, 0.5)\r\n                return true\r\n              end)}))\r\n            card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_plus_planet'), colour = G.C.SECONDARY_SET.Planet})\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "missingfinger",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 7
      },
      "raw": "--Missing Finger\r\n  key = 'missingfinger',\r\n  loc_txt = {\r\n    name = 'Missing Finger',\r\n    text = {\r\n      \"{X:mult,C:white}X#1#{} Mult, {C:attention}#2#{} playing\",\r\n      \"card {C:attention}selection limit{}\",\r\n      --\"for {C:blue}playing{} and {C:red}discarding{}\",\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 7 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { Xmult = 4, select_mod = -1 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.Xmult, card.ability.extra.select_mod } }\r\n  end,\r\n  add_to_deck = function(self, card, from_debuff)\r\n    G.hand.config.highlighted_limit = G.hand.config.highlighted_limit + card.ability.extra.select_mod \r\n\tend,\r\n\tremove_from_deck = function(self, card, from_debuff)\r\n    G.hand.config.highlighted_limit = G.hand.config.highlighted_limit - card.ability.extra.select_mod \r\n\tend,\r\n  calculate = function(self, card, context)\r\n    if context.joker_main then\r\n      return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n      }\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "roundabout",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 5,
        "y": 8
      },
      "raw": "--Round-a-bout\r\n  key = 'roundabout',\r\n  loc_txt = {\r\n    name = 'Round-a-bout',\r\n    text = {\r\n      \"Allows {C:attention}Straights{} to\",\r\n      \"be made with both\",\r\n      \"{C:attention}high and low ranks{}\",\r\n      \"{C:inactive}(ex:{} {C:attention}3 2 A K Q{}{C:inactive}){}\",\r\n    }\r\n  },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 5, y = 8 },\r\n  cost = 3,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,"
    },
    {
      "type": "Joker",
      "key": "hypemoments",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 6,
        "y": 8
      },
      "raw": "--Hype Moments\r\n  key = 'hypemoments',\r\n  loc_txt = {\r\n    name = 'Hype Moments',\r\n    text = {\r\n      \"When {C:attention}Boss Blind{} is selected,\",\r\n      \"create an {C:attention}Aura{}\",\r\n      \"{C:inactive}(Must have room){}\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 6, y = 8 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.c_aura\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.setting_blind and not context.individual and context.blind.boss then\r\n      if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then\r\n        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1\r\n        G.E_MANAGER:add_event(Event({\r\n          trigger = 'before',\r\n          delay = 0.0,\r\n          func = (function()\r\n            local card = create_card('Spectral', G.consumeables, nil, nil, nil, nil, 'c_aura')\r\n            card:add_to_deck()\r\n            G.consumeables:emplace(card)\r\n            G.GAME.consumeable_buffer = 0\r\n            card:juice_up(0.5, 0.5)\r\n            return true\r\n          end)}))\r\n        card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_plus_spectral'),\r\n              colour = G.C.SECONDARY_SET.Spectral })\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "panicfire",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 3,
        "y": 8
      },
      "raw": "--Panic Fire\r\n  key = 'panicfire',\r\n  loc_txt = {\r\n    name = 'Panic Fire',\r\n    text = {\r\n      \"After Blind is selected, if a card\",\r\n      \"is {C:attention}sold{} before play or discard,\",\r\n      \"{X:mult,C:white}X#1#{} Mult for {C:attention}this round{}\",\r\n      \"{C:inactive}(Currently #2#){}\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 3, y = 8 },\r\n  soul_pos = { x = 4, y = 8 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { Xmult = 3, is_active = false } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { \r\n        card.ability.extra.Xmult, \r\n        localize { type = 'variable', key = ((card.ability.extra.is_active and 'k_picubeds_pot_active') or 'k_picubeds_pot_inactive'), vars = { card.ability.extra.is_active } },\r\n    } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.first_hand_drawn and not context.blueprint then\r\n        local eval = function() return G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0 and not G.RESET_JIGGLES and not card.ability.extra.is_active end\r\n        juice_card_until(card, eval, true)\r\n    end\r\n    if context.selling_card and not card.ability.extra.is_active and G.GAME.current_round.discards_used == 0 and G.GAME.current_round.hands_played == 0 and #G.hand.cards > 0 then\r\n      card.ability.extra.is_active = true\r\n      return {\r\n          card = card,\r\n          message = localize('k_picubeds_panicfire_ready')\r\n      } \r\n    end\r\n    if context.joker_main and card.ability.extra.is_active then\r\n      return {\r\n          message = localize { type = 'variable', key = 'a_xmult', vars = { card.ability.extra.Xmult } },\r\n          Xmult_mod = card.ability.extra.Xmult\r\n      }\r\n    end\r\n    if context.end_of_round then\r\n      card.ability.extra.is_active = false\r\n    end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "nightvision",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 7
      },
      "raw": "--Night Vision\r\n  key = 'nightvision',\r\n  loc_txt = {\r\n    name = 'Night Vision',\r\n    text = {\r\n      \"After Play, {C:attention}flip{} all cards in hand,\",\r\n      \"earn {C:money}$#1#{} per card flipped\",\r\n      \"{C:attention}face up{} by this Joker\",\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 7 },\r\n  cost = 6,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { money = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.money } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.before and not context.blueprint then\r\n      local flip_count = 0\r\n      for k, v in ipairs(G.hand.cards) do\r\n        if v.facing ~= 'front' then\r\n          flip_count = flip_count + 1\r\n        end\r\n        v:flip()\r\n      end\r\n      if not flip_count == 0 then\r\n        return {\r\n            dollars = card.ability.extra.money * flip_count,\r\n            card = card\r\n        }\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Sound",
      "key": "tf_bye1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_bye1\",\r\n\tpath = \"tf_bye1.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_bye2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_bye2\",\r\n\tpath = \"tf_bye2.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_bye3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_bye3\",\r\n\tpath = \"tf_bye3.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_hi1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_hi1\",\r\n\tpath = \"tf_hi1.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_hi2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_hi2\",\r\n\tpath = \"tf_hi2.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_hi3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_hi3\",\r\n\tpath = \"tf_hi3.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_hi4",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_hi4\",\r\n\tpath = \"tf_hi4.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_hi5",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_hi5\",\r\n\tpath = \"tf_hi5.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_onward",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_onward\",\r\n\tpath = \"tf_onward.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_high1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_high1\",\r\n\tpath = \"tf_shop_high1.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_high2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_high2\",\r\n\tpath = \"tf_shop_high2.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_high3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_high3\",\r\n\tpath = \"tf_shop_high3.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_low1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_low1\",\r\n\tpath = \"tf_shop_low1.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_low2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_low2\",\r\n\tpath = \"tf_shop_low2.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_shop_low3",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_shop_low3\",\r\n\tpath = \"tf_shop_low3.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_wee1",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_wee1\",\r\n\tpath = \"tf_wee1.ogg\","
    },
    {
      "type": "Sound",
      "key": "tf_wee2",
      "atlas": null,
      "pos": null,
      "raw": "key = \"tf_wee2\",\r\n\tpath = \"tf_wee2.ogg\","
    },
    {
      "type": "Joker",
      "key": "talkingflower",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 7
      },
      "raw": "--Talking Flower\r\n  key = 'talkingflower',\r\n  loc_txt = {\r\n    name = 'Talking Flower',\r\n    text = {\r\n      \"{C:dark_edition}+#1#{} Joker Slot,\",\r\n      \"{C:mult}+#2#{} Mult\"\r\n      \r\n    }\r\n  },\r\n  config = { extra = { slots = 1, mult = 4 } },\r\n  rarity = 1,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 7 },\r\n  cost = 4,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  pools = { [\"Meme\"] = true },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.slots, card.ability.extra.mult } }\r\n  end,\r\n  add_to_deck = function(self, card, from_debuff)\r\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit + card.ability.extra.slots\r\n    if G.GAME.round == 0 then\r\n      card:tf_say(\"tf_onward\")\r\n      --print(\"Onward and Upward!\")\r\n    else\r\n      local tfnum = pseudorandom_element({1,2,3,4,5}, pseudoseed(\"talkingflower\"..G.GAME.round_resets.ante))\r\n      card:tf_say(\"tf_hi\"..tfnum)\r\n      --print(\"Hiiii!\")\r\n    end\r\n\tend,\r\n\tremove_from_deck = function(self, card, from_debuff)\r\n\t\tG.jokers.config.card_limit = G.jokers.config.card_limit - card.ability.extra.slots\r\n    local tfnum = pseudorandom_element({1,2,3}, pseudoseed(\"talkingflower\"..G.GAME.round_resets.ante))\r\n    card:tf_say(\"tf_bye\"..tfnum)\r\n    --print(\"Later!\")\r\n\tend,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.card_added then\r\n      if context.card.ability.name == 'Wee Joker' or context.card.ability.name == 'j_picubed_weemini' then\r\n        local tfnum = pseudorandom_element({1,2}, pseudoseed(\"talkingflower\"..G.GAME.round_resets.ante))\r\n        card:tf_say(\"tf_wee\"..tfnum)\r\n      end\r\n    end\r\n    if context.starting_shop then\r\n      if to_number(G.GAME.dollars) >= 15 then\r\n        local tfnum = pseudorandom_element({1,2,3}, pseudoseed(\"talkingflower\"..G.GAME.round_resets.ante))\r\n        card:tf_say(\"tf_shop_high\"..tfnum)\r\n        --print(\"Why not take both?\")\r\n      else\r\n        local tfnum = pseudorandom_element({1,2,3}, pseudoseed(\"talkingflower\"..G.GAME.round_resets.ante))\r\n        card:tf_say(\"tf_shop_low\"..tfnum)\r\n        --print(\"Tough choice...\")\r\n      end\r\n    end\r\n    if context.joker_main then\r\n      return {\r\n        mult = card.ability.extra.mult,\r\n        card = card\r\n      }\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "superlustyjoker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 7,
        "y": 3
      },
      "raw": "--Super Lusty Joker\r\n  key = 'superlustyjoker',\r\n  loc_txt = {\r\n    name = 'Super Lusty Joker',\r\n    text = {\r\n      \"{C:attention}Retrigger{} played {C:hearts}Heart{} cards,\",\r\n      \"{C:green}#2# in #3#{} chance to retrigger\",\r\n      \"them {C:attention}#1#{} additional time\",\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 7, y = 3 },\r\n  cost = 9,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  config = { extra = { repetitions = 1, odds = 2 } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.repetitions, (G.GAME.probabilities.normal or 1), card.ability.extra.odds } }\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.cardarea == G.play and context.repetition and not context.repetition_only then\r\n      local bonus_retrigger = 0\r\n      if pseudorandom(\"superlustyjoker\"..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.odds) then\r\n        bonus_retrigger = 1\r\n      end\r\n      if context.other_card:is_suit(\"Hearts\") then\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmessage = localize('k_again_ex'),\r\n          repetitions = 1 + card.ability.extra.repetitions * bonus_retrigger,\r\n          card = card,\r\n          colour = G.C.SUITS[\"Hearts\"],\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n  end"
    },
    {
      "type": "Joker",
      "key": "laserprinter",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 1,
        "y": 8
      },
      "raw": "--Laser Printer\r\n   key = 'laserprinter',\r\n  loc_txt = {\r\n    name = 'Laser Printer',\r\n    text = {\r\n      \"{C:attention}Consumables{} have a {C:green}#1# in #2#{} chance\",\r\n      \"to be {C:attention}recreated{} on use and a\",\r\n      \"{C:green}#1# in #4#{} chance to be made {C:dark_edition}Negative{},\",\r\n      \"this card has a {C:green}#1# in #3#{} \",\r\n      \"chance to be {C:attention}disabled{} for\",\r\n      \"this Ante after activating\",\r\n      \"{C:inactive}(Must have room){}\"\r\n    }\r\n  },\r\n  rarity = 2,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 1, y = 8 },\r\n  --soul_pos = { x = 1, y = 7 },\r\n  soul_pos = { x = 10, y = 7 }, --no soul\r\n  cost = 6,\r\n  unlocked = false,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = false,\r\n  config = { extra = { copy_odds = 2, destroy_odds = 4, copied = {}, negative_odds = 2, is_disabled = false } },\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { (G.GAME.probabilities.normal or 1), card.ability.extra.copy_odds, card.ability.extra.destroy_odds, card.ability.extra.negative_odds } }\r\n  end,\r\n  in_pool = function(self, args)\r\n      return G.GAME.pool_flags.picubed_printer_error and #SMODS.find_card('j_picubed_inkjetprinter') < 1\r\n  end,\r\n  locked_loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_picubed_inkjetprinter\r\n    return { vars = { card.ability.max_highlighted } }\r\n  end,\r\n  check_for_unlock = function(self, args)\r\n      if G.GAME.pool_flags.picubed_printer_error then return true end\r\n      return false\r\n  end,\r\n  calculate = function(self, card, context)\r\n    if context.end_of_round and G.GAME.blind.boss and context.cardarea == G.jokers and card.ability.extra.is_disabled then\r\n      card.ability.extra.is_disabled = false\r\n      card.children.floating_sprite:set_sprite_pos({ x = 10, y = 7 })\r\n      card_eval_status_text(card, 'extra', nil, nil, nil, { message = localize(\"k_picubeds_fixed\") })\r\n    end\r\n    if context.using_consumeable and not context.blueprint and not card.ability.extra.is_disabled then\r\n      if pseudorandom(pseudoseed('laserprinter'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal / card.ability.extra.negative_odds then\r\n        local has_activated = false\r\n        local has_destroyed = false\r\n        local is_negative = false\r\n      if pseudorandom(\"laserprinters\"..G.GAME.round_resets.ante) < (G.GAME.probabilities.normal / card.ability.extra.negative_odds) then\r\n        is_negative = true\r\n      end\r\n        G.E_MANAGER:add_event(Event({\r\n          func = function()\r\n            if is_negative then\r\n              local copied_card = copy_card(context.consumeable, nil)\r\n              copied_card:add_to_deck()\r\n              if context.consumeable.edition then\r\n                if not copied_card.edition == 'e_negative' then\r\n                  copied_card:set_edition(\"e_negative\", false, true)\r\n                end\r\n              else\r\n                copied_card:set_edition(\"e_negative\", false, true)\r\n              end\r\n              G.consumeables:emplace(copied_card)\r\n              has_activated = true\r\n              card_eval_status_text(card, 'extra', nil, nil, nil,\r\n                { message = localize(\"k_picubeds_print\") })\r\n            elseif are_consm_slots_filled(context.consumeable) then\r\n              local copied_card = copy_card(context.consumeable, nil)\r\n              copied_card:add_to_deck()\r\n              G.consumeables:emplace(copied_card)\r\n              has_activated = true\r\n              card_eval_status_text(card, 'extra', nil, nil, nil,\r\n                { message = localize(\"k_picubeds_print\") })\r\n            end\r\n            return true\r\n          end\r\n        }))\r\n\r\n        if pseudorandom(pseudoseed('laserprinter'..G.GAME.round_resets.ante)) < G.GAME.probabilities.normal / card.ability.extra.destroy_odds then\r\n          G.E_MANAGER:add_event(Event({\r\n\t\t\t\t\tfunc = function()\r\n\t\t\t\t\t\tif has_activated then\r\n              has_destroyed = true\r\n                G.E_MANAGER:add_event(Event({\r\n                  trigger = 'after',\r\n                  delay = 0.3,\r\n                  blockable = false,\r\n                  func = function()\r\n                    card_eval_status_text(card, 'extra', nil, nil, nil,\r\n                      { message = localize(\"k_picubeds_error\") })\r\n                    card.ability.extra.is_disabled = true\r\n                    card.children.floating_sprite:set_sprite_pos({ x = 1, y = 7 })\r\n                    return true;\r\n                  end\r\n                }))\r\n              end\r\n          return true\r\n          end\r\n          }))\r\n        end\r\n      end\r\n    end\r\n  end"
    },
    {
      "type": "Back",
      "key": "wonderfuldeck",
      "atlas": "picubedsdeck",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "-- Wonderful Deck\r\n    name = \"Wonderful Deck\",\r\n    key = \"wonderfuldeck\",\r\n    loc_txt = {\r\n        name = \"Wonderful Deck\",\r\n        text = {\r\n        \"Start with a\",\r\n        \"{C:attention}Talking Flower{}\",\r\n        },\r\n    },\r\n    pos = { x = 0, y = 0 },\r\n    atlas = \"picubedsdeck\",\r\n    unlocked = true,\r\n    apply = function(self)\r\n        G.E_MANAGER:add_event(Event({\r\n            func = function()\r\n                SMODS.add_card({set = 'Joker', area = G.jokers, skip_materialize = true, key = \"j_picubed_talkingflower\", no_edition = true})\r\n            return true end\r\n        }))\r\n    end"
    },
    {
      "type": "Back",
      "key": "myepicdeck",
      "atlas": "picubedsdeck",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "-- my epic deck by pi_cubed\r\n    name = \"my epic deck by pi_cubed\",\r\n    key = \"myepicdeck\",\r\n    loc_txt = {\r\n        name = \"my epic deck by pi_cubed\",\r\n        text = {\r\n        \"{C:tarot}pi_cubed's Jokers{}' {C:attention}Jokers{} are\",\r\n        \"{C:attention}3x{} more likely to appear\",\r\n        },\r\n    },\r\n    pos = { x = 1, y = 0 },\r\n    atlas = \"picubedsdeck\",\r\n    unlocked = true,"
    },
    {
      "type": "Back",
      "key": "rejuvinationdeck",
      "atlas": "picubedsdeck",
      "pos": {
        "x": 2,
        "y": 0
      },
      "raw": "-- Rejuvination Deck\r\n    name = \"Rejuvination Deck\",\r\n    key = \"rejuvinationdeck\",\r\n    loc_txt = {\r\n        name = \"Rejuvination Deck\",\r\n        text = {\r\n        \"Start with {C:attention}#1#{} Joker slots,\",\r\n        \"{C:attention}+#2#{} slot after Boss Blind\",\r\n        \"is defeated\",\r\n        },\r\n    },\r\n    pos = { x = 2, y = 0 },\r\n    atlas = \"picubedsdeck\",\r\n    unlocked = true,\r\n    config = {joker_slot = -5, joker_slot_mod = 1},\r\n    loc_vars = function(self, info_queue, card)\r\n        return {vars = {self.config.joker_slot + 5, self.config.joker_slot_mod}}\r\n    end,\r\n    calculate = function(self, back, context)\r\n      if context.context == 'eval' and G.GAME.last_blind and G.GAME.last_blind.boss then\r\n          G.E_MANAGER:add_event(Event({\r\n            func = function()\r\n              G.jokers.config.card_limit = G.jokers.config.card_limit + self.config.joker_slot_mod\r\n              return true\r\n            end\r\n          }))\r\n      end\r\n    end"
    },
    {
      "type": "Back",
      "key": "covetousdeck",
      "atlas": "picubedsdeck",
      "pos": {
        "x": 3,
        "y": 0
      },
      "raw": "-- Covetous Deck\r\n    name = \"Covetous Deck\",\r\n    key = \"covetousdeck\",\r\n    loc_txt = {\r\n        name = \"Covetous Deck\",\r\n        text = {\r\n        \"Start with a {C:attention}#1#{},\",\r\n        \"{C:attention}#2#{}, and {C:attention}#3#{}\",\r\n        },\r\n    },\r\n    pos = { x = 3, y = 0 },\r\n    atlas = \"picubedsdeck\",\r\n    unlocked = true,\r\n    config = { \r\n      jokers = {'j_picubed_shoppingtrolley', 'j_picubed_preorderbonus'}, \r\n      vouchers = {'v_seed_money'},\r\n    },\r\n    loc_vars = function(self, info_queue, card)\r\n      return { vars = { \r\n          localize { type = 'name_text', set = 'Joker', key = 'j_picubed_shoppingtrolley' },\r\n          localize { type = 'name_text', set = 'Joker', key = 'j_picubed_preorderbonus' },\r\n          localize { type = 'name_text', set = 'Voucher', key = self.config.vouchers[1] },\r\n      } }\r\n    end,"
    },
    {
      "type": "Back",
      "key": "collectorsdeck",
      "atlas": "picubedsdeck",
      "pos": {
        "x": 4,
        "y": 0
      },
      "raw": "-- Collector's Deck\r\n    name = \"Collector's Deck\",\r\n    key = \"collectorsdeck\",\r\n    loc_txt = {\r\n        name = \"Collector's Deck\",\r\n        text = {\r\n        \"Start with a {C:attention}#1#{},\",\r\n        \"{C:attention}#2#{}, and {C:attention}#3#{}\",\r\n        },\r\n    },\r\n    pos = { x = 4, y = 0 },\r\n    atlas = \"picubedsdeck\",\r\n    unlocked = true,\r\n    config = { \r\n      vouchers = {'v_magic_trick', 'v_illusion', 'v_overstock_norm'},\r\n    },\r\n    loc_vars = function(self, info_queue, card)\r\n      return { vars = { \r\n          localize { type = 'name_text', set = 'Voucher', key = self.config.vouchers[1] },\r\n          localize { type = 'name_text', set = 'Voucher', key = self.config.vouchers[2] },\r\n          localize { type = 'name_text', set = 'Voucher', key = self.config.vouchers[3] },\r\n      } }\r\n    end,"
    },
    {
      "type": "Atlas",
      "key": "picubed_partners",
      "atlas": null,
      "pos": null,
      "raw": "key = \"picubed_partners\",\r\n        path = \"picubedspartner.png\",\r\n        px = 46,\r\n        py = 58"
    },
    {
      "type": "Joker",
      "key": "snooze",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "--Snooze\r\n  key = 'snooze',\r\n  loc_txt = {\r\n    name = 'Snooze',\r\n    text = {\r\n      \"After Boss Blind is\",\r\n      \"defeated, add an extra\",\r\n      \"{C:attention}Small Blind{} to Ante\"\r\n    }\r\n  },\r\n  rarity = 3,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 0, y = 0 },\r\n  cost = 7,\r\n  discovered = true,\r\n  blueprint_compat = false,\r\n  perishable_compat = true,\r\n  eternal_compat = true,\r\n  calculate = function(self, card, context)\r\n    --if not context.blueprint and context.end_of_round and G.GAME.blind.boss and context.cardarea == G.jokers then\r\n      ULTIM_ANTE.blind_count = 4\r\n      ULTIM_ANTE.get_new_blind[4]       = function() return get_new_boss() end\r\n      G.GAME.round_resets.blind_choices['Small'] = 'bl_small'\r\n      G.GAME.round_resets.blind_choices['Big'] = 'bl_small'\r\n      ULTIM_ANTE.get_new_blind['Big']   = function() return 'bl_big' end\r\n      G.GAME.round_resets.blind_choices['Boss'] = 'bl_big'\r\n      G.GAME.round_resets.blind_choices[4] = 'bl_big'\r\n    --end\r\n  end"
    },
    {
      "type": "Joker",
      "key": "mrsjankman_joker",
      "atlas": "PiCubedsJokers",
      "pos": {
        "x": 2,
        "y": 7
      },
      "raw": "-- Mrs. Jankman (Cryptid & MoreFluff)\r\n  key = 'mrsjankman_joker',\r\n  loc_txt = {\r\n    name = 'Mrs. Jankman',\r\n    text = {\r\n      \"All Jokers with a\", \r\n      \"{C:attention}modded Edition{}\",\r\n      \"give {X:chips,C:white}X#1#{} Chips\",\r\n      \"{s:0.8,C:inactive,E:2}Heteronormative Jank!\"\r\n      \r\n    }\r\n  },\r\n  config = { extra = { x_chips = 27.41 } },\r\n  rarity = 4,\r\n  atlas = 'PiCubedsJokers',\r\n  pos = { x = 2, y = 7 },\r\n  soul_pos = { x = 3, y = 7 },\r\n  cost = 20,\r\n  discovered = true,\r\n  blueprint_compat = true,\r\n  pools = { [\"Meme\"] = true },\r\n  in_pool = function(self, args)\r\n    return (#find_joker(\"j_mf_jankman\") > 0)\r\n  end,\r\n  loc_vars = function(self, info_queue, card)\r\n    return { vars = { card.ability.extra.x_chips } }\r\n  end,\r\n  \r\n  calculate = function(self, card, context)\r\n    if context.other_joker and context.other_joker.edition then\r\n      if context.other_joker.edition.key ~= 'e_polychrome' then\r\n        if context.other_joker.edition.key ~= 'e_foil' then\r\n          if context.other_joker.edition.key ~= 'e_holographic' then\r\n            if context.other_joker.edition.key ~= 'e_negative' then\r\n              if (not context.other_joker.debuff) then\r\n                return {\r\n                  xchips = card.ability.extra.x_chips,\r\n                  card = card\r\n                }\r\n              end\r\n            end\r\n          end\r\n        end\r\n      end\r\n\t\tend\r\n  end"
    },
    {
      "type": "Atlas",
      "key": "picubed_tags",
      "atlas": null,
      "pos": null,
      "raw": "key = \"picubed_tags\",\r\n  path = \"picubedstag.png\",\r\n  px = 34,\r\n  py = 34"
    },
    {
      "type": "Tag",
      "key": "jollytopup",
      "atlas": "picubed_tags",
      "pos": {
        "x": 0,
        "y": 0
      },
      "raw": "-- Jolly Top-up Tag (Cryptid)\r\n  key = 'jollytopup',\r\n  loc_txt = {\r\n    name = \"Jolly Top-up Tag\",\r\n    text = {\r\n      \"Create #1# {C:attention}Jolly Jokers\",\r\n      \"{C:inactive}(Does not require room){}\"\r\n    }\r\n  },\r\n  config = { extra = { spawn_jokers = 5 } },\r\n  atlas = \"picubed_tags\",\r\n  pos = { x = 0, y = 0 },\r\n  discovered = true,\r\n  min_ante = 2,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_jolly\r\n    return { vars = { card.config.extra.spawn_jokers } }\r\n  end,\r\n  apply = function(self, tag, context)\r\n    if context.type == \"immediate\" then\r\n      tag:yep(\"+\", G.C.RED, function()\r\n          for i = 1, tag.config.extra.spawn_jokers do\r\n            SMODS.add_card({set = 'Joker', area = G.jokers, key = 'j_jolly'})\r\n          end\r\n        return true\r\n        end)\r\n      tag.triggered = true\r\n      return true\r\n    end\r\n  end"
    },
    {
      "type": "Tag",
      "key": "jollytopup_negative",
      "atlas": "picubed_tags",
      "pos": {
        "x": 1,
        "y": 0
      },
      "raw": "-- gaT pu-poT ylloJ (Cryptid)\r\n  key = 'jollytopup_negative',\r\n  loc_txt = {\r\n    name = \"gaT pu-poT ylloJ\",\r\n    text = {\r\n      \"Create #1# {C:dark_edition}Negative{}\",\r\n      \"{C:attention}Jolly Jokers\"\r\n    }\r\n  },\r\n  config = { extra = { spawn_jokers = 2 } },\r\n  atlas = \"picubed_tags\",\r\n  pos = { x = 1, y = 0 },\r\n  discovered = true,\r\n  min_ante = 2,\r\n  loc_vars = function(self, info_queue, card)\r\n    info_queue[#info_queue+1] = G.P_CENTERS.j_jolly\r\n    info_queue[#info_queue+1] = G.P_CENTERS.e_negative\r\n    return { vars = { card.config.extra.spawn_jokers } }\r\n  end,\r\n  apply = function(self, tag, context)\r\n    if context.type == \"immediate\" then\r\n      tag:yep(\"+\", G.C.RED, function()\r\n          for i = 1, tag.config.extra.spawn_jokers do\r\n            SMODS.add_card({set = 'Joker', area = G.jokers, key = 'j_jolly', edition = \"e_negative\"})\r\n          end\r\n        return true\r\n        end)\r\n      tag.triggered = true\r\n      return true\r\n    end\r\n  end"
    }
  ],
  "version": "v1.3.0c-beta"
}